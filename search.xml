<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ios模拟器数据存储位置</title>
      <link href="/2018/08/27/ios%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/"/>
      <url>/2018/08/27/ios%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<ul><li>沙盒数据库存储位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/用户名/Library/Developer/CoreSimulator/Devices/AE22462A-FE79-4B52-B40A-4C7C42D39C59/data/Containers/Data/Application/EC0464BF-B47C-4C6F-95B9-6DEB37BAD3EA/Library</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>md语法</title>
      <link href="/2018/08/25/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/08/25/Markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="Markdown-syntax-guide-and-writing-on-MWeb"><a href="#Markdown-syntax-guide-and-writing-on-MWeb" class="headerlink" title="Markdown syntax guide and writing on MWeb"></a>Markdown syntax guide and writing on MWeb</h1><h2 id="Philosophy"><a href="#Philosophy" class="headerlink" title="Philosophy"></a>Philosophy</h2><blockquote><p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.<br>Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions.<br>Markdown’s syntax is intended for one purpose: to be used as a format for <em>writing</em> for the web.</p></blockquote><a id="more"></a><h2 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h2><p>You can use  <code>CMD + 4</code> or <code>CMD + R</code> to preview the result.</p><h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># This is an `&lt;h1&gt;` tag</span><br><span class="line">## This is an `&lt;h2&gt;` tag</span><br><span class="line">###### This is an `&lt;h6&gt;` tag</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><h1 id="This-is-an-lt-h1-gt-tag"><a href="#This-is-an-lt-h1-gt-tag" class="headerlink" title="This is an &lt;h1&gt; tag"></a>This is an <code>&lt;h1&gt;</code> tag</h1><h2 id="This-is-an-lt-h2-gt-tag"><a href="#This-is-an-lt-h2-gt-tag" class="headerlink" title="This is an &lt;h2&gt; tag"></a>This is an <code>&lt;h2&gt;</code> tag</h2><h6 id="This-is-an-lt-h6-gt-tag"><a href="#This-is-an-lt-h6-gt-tag" class="headerlink" title="This is an &lt;h6&gt; tag"></a>This is an <code>&lt;h6&gt;</code> tag</h6><h2 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*This text will be italic*</span><br><span class="line">_This will also be italic_</span><br><span class="line"></span><br><span class="line">**This text will be bold**</span><br><span class="line">__This will also be bold__</span><br><span class="line"></span><br><span class="line">*You **can** combine them*</span><br></pre></td></tr></table></figure><p><strong>Shortcuts:</strong>  <code>CMD + U</code>、<code>CMD + I</code>、<code>CMD + B</code><br><strong>Result:</strong></p><p><em>This text will be italic</em><br><em>This will also be italic</em></p><p><strong>This text will be bold</strong><br><strong>This will also be bold</strong></p><p><em>You <strong>can</strong> combine them</em></p><h2 id="Newlines"><a href="#Newlines" class="headerlink" title="Newlines"></a>Newlines</h2><p>End a line with two or more spaces + enter.<br>Just typing enter to newline,please set：<code>Preferences</code> - <code>Themes</code> - <code>Translate newlines to &lt;br&gt; tags</code>  enable ( default is enable )</p><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><h3 id="Unordered"><a href="#Unordered" class="headerlink" title="Unordered"></a>Unordered</h3><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* Item 1 unordered list `* + SPACE`</span><br><span class="line">* Item 2</span><br><span class="line">* Item 2a unordered list `TAB + * + SPACE`</span><br><span class="line">* Item 2b</span><br></pre></td></tr></table></figure><p><strong>Shortcuts:</strong>  <code>Option + U</code><br><strong>Result:</strong></p><ul><li>Item 1 unordered list <code>* + SPACE</code></li><li>Item 2</li><li>Item 2a unordered list <code>TAB + * + SPACE</code></li><li>Item 2b</li></ul><h3 id="Ordered"><a href="#Ordered" class="headerlink" title="Ordered"></a>Ordered</h3><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. Item 1 ordered list `Number + . + SPACE`</span><br><span class="line">2. Item 2 </span><br><span class="line">3. Item 3</span><br><span class="line">1. Item 3a ordered list `TAB + Number + . + SPACE`</span><br><span class="line">2. Item 3b</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><ol><li>Item 1 ordered list <code>Number + . + SPACE</code></li><li>Item 2 </li><li>Item 3</li><li>Item 3a ordered list <code>TAB + Number + . + SPACE</code></li><li>Item 3b</li></ol><h3 id="Task-lists"><a href="#Task-lists" class="headerlink" title="Task lists"></a>Task lists</h3><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [ ] task one not finish `- + SPACE + [ ]`</span><br><span class="line">- [x] task two finished `- + SPACE + [x]`</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><ul><li style="list-style: none"><input type="checkbox"> task one not finish <code>- + SPACE + [ ]</code></li><li style="list-style: none"><input type="checkbox" checked> task two finished <code>- + SPACE + [x]</code></li></ul><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![GitHub set up](https://help.github.com/assets/images/site/set-up-git.gif)</span><br><span class="line">Format: ![Alt Text](url)</span><br></pre></td></tr></table></figure><p><strong>Shortcuts:</strong>  <code>Control + Shift + I</code><br>The Library’s document support drag &amp; drop or <code>CMD + V</code> paste or <code>CMD + Option + I</code> to insert  the picture.<br><strong>Result:</strong></p><p><img src="https://help.github.com/assets/images/site/set-up-git.gif" alt="GitHub set up"></p><p>In MWeb, you can use <code>-w + Number</code> to control image width, for example, set the image width 140px:</p><p><img src="https://help.github.com/assets/images/site/set-up-git.gif" alt="GitHub set up-w140"></p><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">email &lt;example@example.com&gt;</span><br><span class="line">[GitHub](http://github.com)</span><br><span class="line">autolink  &lt;http://www.github.com/&gt;</span><br></pre></td></tr></table></figure><p><strong>Shortcuts:</strong>  <code>Control + Shift + L</code><br>The Library’s document support drag &amp; drop or <code>CMD + Option + I</code> to insert attachment.<br><strong>Result:</strong></p><p>An email <a href="mailto:&#101;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;&#64;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;" target="_blank" rel="noopener">&#101;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;&#64;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a> link.<br><a href="http://github.com" target="_blank" rel="noopener">GitHub</a><br>Automatic linking for URLs<br>Any URL (like <a href="http://www.github.com/" target="_blank" rel="noopener">http://www.github.com/</a>) will be automatically converted into a clickable link.</p><h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">As Kanye West said:</span><br><span class="line">&gt; We&apos;re living the future so</span><br><span class="line">&gt; the present is our past.</span><br></pre></td></tr></table></figure><p><strong>Shortcuts:</strong>  <code>CMD + Shift + B</code><br><strong>Result:</strong></p><p>As Kanye West said:</p><blockquote><p>We’re living the future so<br>the present is our past.</p></blockquote><h2 id="Inline-code"><a href="#Inline-code" class="headerlink" title="Inline code"></a>Inline code</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I think you should use an</span><br><span class="line">`&lt;addr&gt;` `code` element here instead.</span><br></pre></td></tr></table></figure><p><strong>Shortcuts:</strong>  <code>CMD + K</code><br><strong>Result:</strong></p><p>I think you should use an<br><code>&lt;addr&gt;</code> <code>code</code> element here instead.</p><h2 id="Multi-line-code"><a href="#Multi-line-code" class="headerlink" title="Multi-line code"></a>Multi-line code</h2><p><strong>Example:</strong></p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">        $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p><strong>Shortcuts:</strong>  <code>CMD + Shift + K</code><br><strong>Result:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">        $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sequence-and-Flow-chart"><a href="#Sequence-and-Flow-chart" class="headerlink" title="Sequence and Flow chart"></a>Sequence and Flow chart</h2><p><strong>Example:</strong></p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello</span><br><span class="line">Note right of China: China thinks about it</span><br><span class="line">China--&gt;Andrew: How are you?</span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start:&gt;http://www.google.com[blank]</span><br><span class="line">e=&gt;end:&gt;http://www.google.com</span><br><span class="line">op1=&gt;operation: My Operation</span><br><span class="line">sub1=&gt;subroutine: My Subroutine</span><br><span class="line">cond=&gt;condition: Yes</span><br><span class="line">or No?:&gt;http://www.google.com</span><br><span class="line">io=&gt;inputoutput: catch something...</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure></code></pre><p><strong>Result:</strong> ( Please enable  <code>Preferences</code> - <code>Themes</code> - <code>Enable sequence &amp; flow chart</code>, default is enable. )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello</span><br><span class="line">Note right of China: China thinks about it</span><br><span class="line">China--&gt;Andrew: How are you?</span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start:&gt;http://www.google.com[blank]</span><br><span class="line">e=&gt;end:&gt;http://www.google.com</span><br><span class="line">op1=&gt;operation: My Operation</span><br><span class="line">sub1=&gt;subroutine: My Subroutine</span><br><span class="line">cond=&gt;condition: Yes</span><br><span class="line">or No?:&gt;http://www.google.com</span><br><span class="line">io=&gt;inputoutput: catch something...</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure><p>More info: <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">http://bramp.github.io/js-sequence-diagrams/</a>, <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">http://adrai.github.io/flowchart.js/</a></p><h2 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">First Header | Second Header</span><br><span class="line">------------ | -------------</span><br><span class="line">Content from cell 1 | Content from cell 2</span><br><span class="line">Content in the first column | Content in the second column</span><br></pre></td></tr></table></figure><p>You can create tables by assembling a list of words and dividing them with hyphens - (for the first row), and then separating each column with a pipe |:</p><p><strong>Result:</strong></p><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content from cell 1</td><td>Content from cell 2</td></tr><tr><td>Content in the first column</td><td>Content in the second column</td></tr></tbody></table><h2 id="Strikethrough"><a href="#Strikethrough" class="headerlink" title="Strikethrough"></a>Strikethrough</h2><p><strong>Example:</strong></p><p>(like <del>this</del>)</p><p><strong>Result:</strong></p><p>Any word wrapped with two tildes (like <del>this</del>) will appear crossed out.</p><h2 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h2><p>Following lines will produce a horizontal rule:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><hr><hr><hr><h2 id="LaTex"><a href="#LaTex" class="headerlink" title="LaTex"></a>LaTex</h2><p>Use double US dollars sign pair for Block level Math formula, and one US dollar sign pair for Inline Level.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">For example this is a Block level $$x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;$$ formula, and this is an inline Level $x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;$ formula.</span><br><span class="line"></span><br><span class="line">\\[ \frac&#123;1&#125;&#123;\Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \pi&#125;&#125; =</span><br><span class="line">1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">&#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125; &#123;1+\ldots&#125; &#125; &#125; &#125; \\]</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><p>For example this is a Block level $$x = {-b \pm \sqrt{b^2-4ac} \over 2a}$$ formula, and this is an inline Level $x = {-b \pm \sqrt{b^2-4ac} \over 2a}$ formula.</p><p>\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =<br>1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}<br>{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]</p><h2 id="Footnote"><a href="#Footnote" class="headerlink" title="Footnote"></a>Footnote</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a footnote:[^sample_footnote]</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><p>This is a footnote:[^sample_footnote]</p><p>[^sample_footnote]: footnote text detail…</p><h2 id="Comment-And-Read-More"><a href="#Comment-And-Read-More" class="headerlink" title="Comment And Read More.."></a>Comment And Read More..</h2><!-- comment --><!-- more --><p>Actions-&gt;Insert Read More Comment <em>OR</em> <code>CMD + .</code></p><h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC]</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><p>[TOC]</p>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RN-android报错</title>
      <link href="/2018/08/20/RN-android%E6%8A%A5%E9%94%99/"/>
      <url>/2018/08/20/RN-android%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<ul><li><h3 id="使用react-native-run-android-运行出现"><a href="#使用react-native-run-android-运行出现" class="headerlink" title="使用react-native run-android 运行出现"></a>使用react-native run-android 运行出现</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`JAVA_HOME is set to an invalid directory`</span><br></pre></td></tr></table></figure><a id="more"></a><p>这个原因是<code>.bash_profile</code>中定义的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASS_PATH=$JAVA_HOME/lib:$CLASS_PATH</span><br></pre></td></tr></table></figure><p>文件目录不正确，解决办法，使用android studio运行项目，查看jdk路径<br><img src="/2018/08/20/RN-android报错/001.png" alt=""><br><img src="/2018/08/20/RN-android报错/002.png" alt=""></p><ul><li><h3 id="android-运行起来，报错could-not-connect-to-development-server"><a href="#android-运行起来，报错could-not-connect-to-development-server" class="headerlink" title="android 运行起来，报错could not connect to development server"></a>android 运行起来，报错<code>could not connect to development server</code></h3>需要摇一摇在设置<code>debug server host &amp;port for device</code><br><img src="/2018/08/20/RN-android报错/003.png" alt=""><br><img src="/2018/08/20/RN-android报错/004.png" alt=""></li></ul>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RN打包iOS报错</title>
      <link href="/2018/08/19/RN%E6%89%93%E5%8C%85ios%E6%8A%A5%E9%94%99/"/>
      <url>/2018/08/19/RN%E6%89%93%E5%8C%85ios%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<ul><li><h3 id="RN打包iOS报错"><a href="#RN打包iOS报错" class="headerlink" title="RN打包iOS报错"></a>RN打包iOS报错</h3></li></ul><p><img src="/2018/08/19/RN打包ios报错/001.png" alt=""></p><a id="more"></a><p>需要在xcode中修改</p><p><img src="/2018/08/19/RN打包ios报错/002.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mac系统过大</title>
      <link href="/2018/08/19/mac%20%E7%B3%BB%E7%BB%9F%E8%BF%87%E5%A4%A7/"/>
      <url>/2018/08/19/mac%20%E7%B3%BB%E7%BB%9F%E8%BF%87%E5%A4%A7/</url>
      <content type="html"><![CDATA[<ul><li>在终端输入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure><p>可以看到每个文件大小占比，cd到比较大的那个目录,通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -d 1 -h</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>者命令查看文件大小分布，然后cd到比较大目录在通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -d 1 -h</span><br></pre></td></tr></table></figure></p><p>如此重复，删掉占用硬盘比较大的文件，</p><ul><li>删除的时候先看一下，别冲动一下删除</li><li><a href="https://www.cnblogs.com/yajunLi/p/7008578.html" target="_blank" rel="noopener">参考</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CodePush 命令行</title>
      <link href="/2018/08/19/codePush/"/>
      <url>/2018/08/19/codePush/</url>
      <content type="html"><![CDATA[<ul><li><a href="https://github.com/Microsoft/code-push/blob/master/cli/README-cn.md" target="_blank" rel="noopener">原文地址</a></li></ul><h1 id="CodePush-命令行"><a href="#CodePush-命令行" class="headerlink" title="CodePush 命令行"></a>CodePush 命令行</h1><h4 id="Note-This-translated-document-is-community-contributed-and-maintained-it-will-not-be-kept-updated-or-in-sync-with-the-original-by-the-main-contributors-Please-send-a-pull-request-if-you-find-any-issues"><a href="#Note-This-translated-document-is-community-contributed-and-maintained-it-will-not-be-kept-updated-or-in-sync-with-the-original-by-the-main-contributors-Please-send-a-pull-request-if-you-find-any-issues" class="headerlink" title="Note: This translated document is community contributed and maintained, it will not be kept updated or in sync with the original by the main contributors. Please send a pull request if you find any issues."></a>Note: This translated document is community contributed and maintained, it will not be kept updated or in sync with the <a href="./README.md">original</a> by the main contributors. Please send a pull request if you find any issues.</h4><h4 id="注：本翻译文档是由社区贡献和维护，不受原文的作者持续维护并更新。如果您发现任何问题，请发送pull请求。"><a href="#注：本翻译文档是由社区贡献和维护，不受原文的作者持续维护并更新。如果您发现任何问题，请发送pull请求。" class="headerlink" title="注：本翻译文档是由社区贡献和维护，不受原文的作者持续维护并更新。如果您发现任何问题，请发送pull请求。"></a>注：本翻译文档是由社区贡献和维护，不受<a href="./README.md">原文</a>的作者持续维护并更新。如果您发现任何问题，请发送pull请求。</h4><a id="more"></a><p>CodePush是一个云服务，它能让Cordova和React Native的开发者将手机应用的更新直接部署到用户的设备上。<br>它担任类似中间仓库的角色，开发者可以把更新（JS，HTML，CSS和图片）发布到这个仓库上，然后那些Apps就能查询到更新了（那些集成了CodePush SDKs的<a href="http://github.com/Microsoft/cordova-plugin-code-push" target="_blank" rel="noopener">Cordova</a>和<a href="http://github.com/Microsoft/react-native-code-push" target="_blank" rel="noopener">React Native</a> 应用）。</p><p>这就让你可以与你的用户群有一个更确定且直接的交互模式，当你定位到Bug或添加小功能时，就不需要重新构建二进制文件再在各AppStore里重新发布了。</p><p><img src="https://cloud.githubusercontent.com/assets/116461/14505396/c97bdc78-016d-11e6-89da-3f3557f8b33d.png" alt="CodePush CLI"></p><ul><li><a href="#安装">安装</a></li><li><a href="#快速开始">快速开始</a></li><li><a href="#创建账号">创建账号</a></li><li><a href="#身份认证">身份认证</a></li><li><a href="#应用管理">应用管理</a></li><li><a href="#应用合作">应用合作</a></li><li><a href="#部署管理">部署管理</a></li><li><a href="#发布更新">发布更新</a><ul><li><a href="#发布更新-general">发布更新 (General)</a></li><li><a href="#发布更新-react-native">发布更新 (React Native)</a></li><li><a href="#发布更新-cordova">发布更新 (Cordova)</a></li></ul></li><li><a href="#补丁更新">补丁更新</a></li><li><a href="#促进更新">促进更新</a></li><li><a href="#回滚更新">回滚更新</a></li><li><a href="#查看发布历史">查看发布历史</a></li><li><a href="#清除发布历史">清除发布历史</a></li></ul><p><a href="./README.md">[English Version]</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>安装 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li>安装 CodePush CLI: <code>npm install -g code-push-cli</code></li></ul><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ol><li>使用CodePush CLI创建一个<a href="#创建账号">CodePush 账号</a></li><li>注册你的CodePush<a href="#应用管理">应用</a>, 并<a href="#应用合作">分享</a>给你团队的其它开发者</li><li>用<a href="http://github.com/Microsoft/cordova-plugin-code-push" target="_blank" rel="noopener">Cordova插件</a> 或 <a href="http://github.com/Microsoft/react-native-code-push" target="_blank" rel="noopener">React Native插件</a>配置好CodePush并指向你希望的部署环境</li><li><a href="#发布更新">发布</a>更新</li><li>活的长而成功！<a href="https://en.wikipedia.org/wiki/Vulcan_salute" target="_blank" rel="noopener">详细资料</a></li></ol><h2 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h2><p>在你发布应用更新之前，你需要创建一个CodePush帐号。一旦你安装了Cli你就可以简单的使用如下命令来注册：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push register</span><br></pre></td></tr></table></figure><p>这将会启动浏览器，要求验证你的Github或微软帐号。一旦验证成功，它将创建一个CodePush帐号跟你的Github或MSA相连，并生成一个访问密钥(Access Key)，你可以拷贝/粘贴到CLI以便登录。</p><p><em>注意：注册成功后，你就已经自动登录了。所以除非你明确登出了，否则你不需要在此机器上再次登录。</em></p><p>如果你已有一个帐号，那你还可以把你的帐号跟另一个身份认证提供商关联起来，通过运行：</p><p>（我个人理解：CodePush提供商有Github和Mircosoft，它允许你可以把两个帐号关联起来。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push link</span><br></pre></td></tr></table></figure><p>注意：为了实现这个(关联)的目的，你在另一个身份认证供应商那边用的Email地址必须与你现存的帐号一致。</p><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><p>在CodePush CLI里大多数命令需要身份认证，所以在你开始管理你的帐号之前，你需要使用GitHub或者微软帐号注册和登录。你可以通过执行如下命令做到这些：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push login</span><br></pre></td></tr></table></figure><p>这将会启动浏览器，要求验证你的Github或微软帐号。这将生成一个访问密钥(Access Key)，然后你可以拷贝/粘贴到CLI（它会提示你这样做）。这时你就认证成功了，并且可以关掉你的浏览器了。</p><p>如果在任何时候你想确认你是否已经登录了，你可以运行如下命令来显示与你当前认证会话相关的e-mail帐号，而且这个身份提供者是连接到（如：GitHub）的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push whoami</span><br></pre></td></tr></table></figure><p>当你从CLI登录后，你的访问密钥(Access Key)就一直保存在你本地磁盘上，所以你不必每次使用帐号是都需要登录。为了终止会话或删除AccessKey，你可以简单的运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push logout</span><br></pre></td></tr></table></figure><p>如果你在一台机器上忘记注销（比如：你朋友的电脑上），你可以使用如下命令列出和删除任何“激活中”的Access Keys。Access Keys列表将显示创建Key的机器名和发生登录的时间。这让你可以简单的认出那些你不想要保存的Keys。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code-push access-key ls</span><br><span class="line">code-push access-key rm &lt;accessKey&gt;</span><br></pre></td></tr></table></figure><p>如果你需要额外的Keys，被用来验证CodePush服务而不需要给你的GitHub和/或访问微软凭证，您可以运行下面的命令来创建一个持久的Access Key(连同一个描述):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push access-key add &quot;VSTS Integration&quot;</span><br></pre></td></tr></table></figure><p>在创建新的密钥之后，您可以在<code>login</code>命令后使用<code>--accessKey</code>标志并指定其值，它允许您执行“无头”身份验证，而不是启动一个浏览器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push login --accessKey &lt;accessKey&gt;</span><br></pre></td></tr></table></figure><p>当使用这种方式登录时，密钥(Access Key)在注销时不会自动失效，它可以一直被使用，除非它从CodePush服务端明确被移除掉。然而，仍然建议一旦你完成了会话就注销掉，以便从本地磁盘移除掉你的授权证书。</p><h2 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h2><p>在你发布更新前，你需要用如下命令在CodePush服务上注册一个App：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push app add &lt;appName&gt; &lt;os&gt; &lt;platform&gt;</span><br></pre></td></tr></table></figure><p>如果你的App既有iOS又有Android，请<em>为不同平台创建单独的App</em>（详情参照下文的注解）。一个平台一个。这样你可以单独的管理和发布更新，从长远来看这会让事情更简单。大部分人的命名约定会在App名加后缀<code>-IOS</code>和<code>-Android</code>。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code-push app add MyApp-Android</span><br><span class="line">code-push app add MyApp-iOS</span><br></pre></td></tr></table></figure><p><em>注意：在iOS和Android使用相同的app可能会导致安装异常，因为CodePush在iOS和Android的更新包内容会有差异。</em></p><p>所有新的Apps自动会出现有个部署环境（<code>Staging</code>和<code>Production</code>），为了你可以开始发布更新到不同的渠道而不需要做任何其它的事（参考下面的部署指南）。你创建一个App之后，CLI将显示<code>Staging</code>和<code>Production</code>环境的开发密钥，你就可以使用不同的SDKs(详细请看<a href="http://github.com/Microsoft/cordova-plugin-code-push" target="_blank" rel="noopener">Cordova</a> 和 <a href="http://github.com/Microsoft/react-native-code-push" target="_blank" rel="noopener">React Native</a>)来配置你的手机端App了。</p><p>如果你不喜欢你之前取的名字，你还可以随时重命名它，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push app rename &lt;appName&gt; &lt;newAppName&gt;</span><br></pre></td></tr></table></figure><p>应用的名字从管理方面看只是为了能辨识，因此，必要时可以随时重命名它。它其实不会影响正在运行的应用程序，因为更新的查询都是通过部署密钥的。</p><p>如果你不想要一个App，你可以从服务端上移除它，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push app rm &lt;appName&gt;</span><br></pre></td></tr></table></figure><p>做这个移除请务必小心，因为任何配置了它的App都将停止收到更新了。</p><p>最后，如果你想列出你在CodePush服务上注册的所有Apps，你可以运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push app ls</span><br></pre></td></tr></table></figure><h2 id="应用合作"><a href="#应用合作" class="headerlink" title="应用合作"></a>应用合作</h2><p>如果你讲和其它开发者在一起合作同一个CodePush应用，你可以把他们添加为合作者，使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push collaborator add &lt;appName&gt; &lt;collaboratorEmail&gt;</span><br></pre></td></tr></table></figure><p><em>注意： 这个期待开发者已经用e-mail<a href="#创建账号">注册</a>了CodePush，所以在打算分享应用之前确保他们已经准备好了一切。</em></p><p>一旦添加了，所有的合作者将立即拥有了最新分享App的如下权限：</p><ol><li>查看App，它的合作者，<a href="#部署管理">部署管理</a>和<a href="#查看发布历史">查看发布历史</a>。</li><li><a href="#发布更新">发布</a>更新到任何应用的部署环境。</li><li><a href="#促进更新">促进</a>更新在任何应用部署环境之间。</li><li><a href="#回滚更新">回滚</a>任何应用部署。</li><li><a href="#补丁更新">打补丁</a>在任何应用部署里。</li></ol><p>相反的，这就意味着一个合作者不能做任何如下的事情：</p><ol><li>重命名或删除应用。</li><li>转让应用的所有权。</li><li>创建，重命名或删除新的部署环境。</li><li>清除一个部署历史。</li><li>添加或删除合作者。</li></ol><p><em>注意：一个合作的开发者可以移除他/她自己。</em></p><p>随着时间的推移，如果有人不再和你一起合作，那你可以解除合作者关系，使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push collaborator rm &lt;appName&gt; &lt;collaboratorEmail&gt;</span><br></pre></td></tr></table></figure><p>如果你想列出应用的所有合作者，你可以简单的运行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push collaborator ls &lt;appName&gt;</span><br></pre></td></tr></table></figure><p>最后，如果在某刻你（作为App的拥有者）将不再开发App了，你想转让给其他开发者（或客户），你可以运行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push app transfer &lt;appName&gt; &lt;newOwnerEmail&gt;</span><br></pre></td></tr></table></figure><p><em>注意：就像<code>code-push collaborator add</code>命令一样，这期望新的拥有者已经用指定的e-mail注册了CodePush。</em></p><p>一经确认，该指定的开发者成为App的拥有者，而且立即接收到该角色的相关权限。除了拥有权转移外，其它的任何都没有被修改（比如：部署环境，发布历史，合作者）。这意味着你还仍然是该App的一个合作者，所以如果你想移除你自己，那你可以在成功转让拥有全后简单的运行<code>code-push collaborator rm</code>命令。</p><h2 id="部署管理"><a href="#部署管理" class="headerlink" title="部署管理"></a>部署管理</h2><p>从CodePush的角度来看，一个应用把一个或更多的东西简单命名分组称为“部署(环境)”。</p><p>While the app represents a conceptual “namespace” or “scope” for a platform-specific version of an app (e.g. the iOS port of Foo app), its deployments represent the actual target for releasing updates (for developers) and synchronizing updates (for end-users). Deployments allow you to have multiple “environments” for each app in-flight at any given time, and help model the reality that apps typically move from a dev’s personal environment to a testing/QA/staging environment, before finally making their way into production.</p><p><em>注意: 正如你将在下面看到的<code>release</code>（发布），<code>promote</code>（提升），<code>rollback</code>（回滚）命令需要应用名字和部署名字，因为这两个组成一个独特的发布标识（例如：我想发布更新到我的IOS应用给beta环境的测试者们）。</em></p><p>当一个用CodePush服务注册的应用，它默认包含两个部署环境：<code>Staging</code>和<code>Production</code>。这让你可以理解发布更新到一个内部的环境，你可以在推送到终端用户之前彻底的测试每个更新。这个工作流是至关重要的，以确保你的版本准备好给大众，而且这是一个在Web上实践很久的惯例。</p><p>如果你的App有<code>Staging</code>和<code>Production</code>环境其实已经满足了你的需求，然后你不需要做任何事情。不过，如果你需要alpha，dev等部署环境，那你可以简单的使用如下命令创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push deployment add &lt;appName&gt; &lt;deploymentName&gt;</span><br></pre></td></tr></table></figure><p>就像Apps一样，你也可以删除或重命名部署环境，分别使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code-push deployment rm &lt;appName&gt; &lt;deploymentName&gt;</span><br><span class="line">code-push deployment rename &lt;appName&gt; &lt;deploymentName&gt; &lt;newDeploymentName&gt;</span><br></pre></td></tr></table></figure><p>你可以在任何时候查看特定应用包含的部署环境列表，你可以简单的运行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push deployment ls &lt;appName&gt; [--displayKeys|-k]</span><br></pre></td></tr></table></figure><p>这将不仅显示部署环境列表，而且还有元数据（例如：强制性属性，描述）和最新版本的安装指标：</p><p><img src="https://cloud.githubusercontent.com/assets/116461/12526883/7730991c-c127-11e5-9196-98e9ceec758f.png" alt="Deployment list"></p><p><em>注意: 因为他们很少用和需要屏幕，部署密钥默认是不显示的。如果你需要查看它们，只要在<code>deployment ls</code>命令后面加上<code>-k</code>标识即可。</em></p><p>安装指标有如下意义：</p><ul><li><p><strong>Active（激活）</strong> - 成功安装的数量目前运行这个版本。这个数字将会随着用户更新到或离开这个版本分别增加或减少。</p></li><li><p><strong>Total</strong> - 该版本更新收到的所有成功安装的总数。这个数字只会随新用户/设备安装它而增加，所以它是<strong>激活</strong>的超集。</p></li><li><p><strong>Pending</strong> - 更新被下载了但还没安装的数量。This would only apply to updates that aren’t installed immediately, and helps provide the broader picture of release adoption for apps that rely on app resume and restart to apply an update.</p></li><li><p><strong>Rollbacks</strong> - 该版本被自动回滚的次数。理想情况下这个数应该为0，而且在这种情况下这个量是不会显示的。然而，如果你发布了一个包含严重问题(Crash)的更新，CodePush插件将在安装时回滚到上一个版本，同时把问题反馈到服务端。这可以让终端用户依旧能用，不被损坏的版本阻塞住，而且能够在CLI里看到这些，你可以鉴定错误的版本并且能在服务器上做出<a href="#回滚更新">回滚</a>的响应。</p></li><li><p><strong>Rollout</strong> - 显示有资格接收更新的百分比。这个属性只会被显示在那些<code>激活的</code>的首次展示的版本，所以，首次展示百分比是小于100%。此外， 因为一个部署任何时候只能有一个激活的首次展示，这个标签只会被显示在最新的一次部署里。</p></li><li><p><strong>Disabled</strong> - 标示是否该版本被标记成失效的，因此用户是否可下载。这个属性只有在版本真实失效时才显示。</p></li></ul><p>当度量(metrics)单元格统计为<code>No installs recorded</code>（无安装记录），那是表示这个版本在服务器上没有任何活动记录。这可能要么是因为被插件阻止了，或者用户还没有跟CodePush服务器同步。一旦发生了安装，你将在CLI里看到该版本的度量。</p><h2 id="发布更新"><a href="#发布更新" class="headerlink" title="发布更新"></a>发布更新</h2><p>一旦你的App被配置了从CodePush服务器查询版本更新，你就可以向它开始发布。为了简易性和灵活性，CodePush CLI包含三种不同的发布命令：</p><ol><li><p><a href="#发布更新-general">通用</a> - 使用外部的工具或构建脚本（如：Gulp任务，<code>react-native bundle</code>命令）像CodePush服务器发布一个更新。这对装配进目前的工作流而言提供最灵活的方式，因为它严格按CodePush特性的步骤处理，而把App特性的编译过程留给你。</p></li><li><p><a href="#发布更新-react-native">React Native</a> - 跟通用发布命令一样执行相同的功能，但是还会为你生成的应用更新内容(JS包和资源)，而不需要你运行<code>react-native bundle</code>，然后执行<code>code-push release</code>。</p></li><li><p><a href="#发布更新-cordova">Cordova</a> - 跟通用发布命令一样执行相同的功能，但也会为你处理准备应用更新的任务，而不需要你运行<code>cordova prepare</code>，然后执行<code>code-push release</code>。</p></li></ol><p>你应该使用哪个命令主要是一种需求或偏好的事。然而，我们通常推荐使用相关的特定平台的命令开始(因为它大大简化了体验)，然后当有更大控制必要时用通用的<code>release</code>命令。</p><h3 id="发布更新-General"><a href="#发布更新-General" class="headerlink" title="发布更新 (General)"></a>发布更新 (General)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">code-push release &lt;appName&gt; &lt;updateContents&gt; &lt;targetBinaryVersion&gt;</span><br><span class="line">[--deploymentName &lt;deploymentName&gt;]</span><br><span class="line">[--description &lt;description&gt;]</span><br><span class="line">[--disabled &lt;disabled&gt;]</span><br><span class="line">[--mandatory]</span><br><span class="line">[--rollout &lt;rolloutPercentage&gt;]</span><br></pre></td></tr></table></figure><h4 id="App-name-应用名-参数"><a href="#App-name-应用名-参数" class="headerlink" title="App name (应用名)参数"></a>App name (应用名)参数</h4><p>指定将发布更新的CodePush 应用名。这个与最初你调用<code>code-push app add</code>（如：”MyApp-Android”）的名字保持一致。如果你想查一下，可以运行<code>code-push app ls</code>命令看看应用的列表。</p><h4 id="Update-contents-更新内容-参数"><a href="#Update-contents-更新内容-参数" class="headerlink" title="Update contents (更新内容)参数"></a>Update contents (更新内容)参数</h4><p>指定应用更新的代码和资源位置。你可以提供要么一个单独文件（如：React Native的JS bundle文件），或者一个文件夹路径（如：Cordova应用的<code>/platforms/ios/www</code>文件夹）。注意你不需要为了部署更新而对文件或文件夹进行Zip压缩，因为CLI会帮你自动ZIP压缩。</p><p>重要的是你指定的路径是跟特定平台相关的，准备/打包你的应用。下面表格概括了在发布前你应该运行哪个命令，以及你以后可以参考的<code>updateContents</code> 参数路径:</p><table><thead><tr><th>平台</th><th>准备命令（Prepare command ）</th><th>包的路径 (相对项目的根目录)</th></tr></thead><tbody><tr><td>Cordova (Android)</td><td><code>cordova prepare android</code></td><td><code>./platforms/android/assets/www</code> 目录</td></tr><tr><td>Cordova (iOS)</td><td><code>cordova prepare ios</code></td><td><code>./platforms/ios/www</code> 目录</td></tr><tr><td>React Native wo/assets (Android)</td><td><code>react-native bundle --platform android --entry-file &lt;entryFile&gt; --bundle-output &lt;bundleOutput&gt; --dev false</code></td><td><code>--bundle-output</code> 参数的值</td></tr><tr><td>React Native w/assets (Android)</td><td><code>react-native bundle --platform android --entry-file &lt;entryFile&gt; --bundle-output &lt;releaseFolder&gt;/&lt;bundleOutput&gt; --assets-dest &lt;releaseFolder&gt; --dev false</code></td><td><code>--assets-dest</code> 参数的值，应该是一个包含资源和JS bundle的新创建的目录。</td></tr><tr><td>React Native wo/assets (iOS)</td><td><code>react-native bundle --platform ios --entry-file &lt;entryFile&gt; --bundle-output &lt;bundleOutput&gt; --dev false</code></td><td><code>--bundle-output</code> 参数的值</td></tr><tr><td>React Native w/assets (iOS)</td><td><code>react-native bundle --platform ios --entry-file &lt;entryFile&gt; --bundle-output &lt;releaseFolder&gt;/&lt;bundleOutput&gt; --assets-dest &lt;releaseFolder&gt; --dev false</code></td><td><code>--assets-dest</code> 参数的值，应该是一个包含资源和JS bundle的新创建的目录。</td></tr></tbody></table><h4 id="Target-binary-version-目标二进制版本-参数"><a href="#Target-binary-version-目标二进制版本-参数" class="headerlink" title="Target binary version (目标二进制版本)参数"></a>Target binary version (目标二进制版本)参数</h4><p>这是你想发布更新的特定仓库/二进制版本，这样只有那个版本上的用户才会接收到更新，而那些运行较老/新版本用户则不会。这样很有用，原因如下：</p><ol><li><p>如果有用户运行一个很老的版本，有可能在CodePush的更新里有个破坏性的更新，这跟他们现在运行的版本不兼容。</p></li><li><p>如果用户正在运行一个新的二进制版本，那么假定，他们正在运行并更新CodePush 更新（可能不兼容）。</p></li></ol><p>如果你想更新应用商店里二进制文件的多个版本，我们允许你指定参数像这样<a href="https://github.com/npm/node-semver#advanced-range-syntax" target="_blank" rel="noopener">语义版本范围表达式</a>。这样， 任何在版本号范围内（如：<code>semver.satisfies(version, range)</code> returns <code>true</code>）的客户端设备都能获得更新。</p><p>如下是有效的版本号范围表达式的例子：</p><table><thead><tr><th>范围表达式</th><th>谁获得更新</th></tr></thead><tbody><tr><td><code>1.2.3</code></td><td>只有<code>1.2.3</code>版本</td></tr><tr><td><code>*</code></td><td>所有版本</td></tr><tr><td><code>1.2.x</code></td><td>主版本为1，小版本为2的任何版本</td></tr><tr><td><code>1.2.3 - 1.2.7</code></td><td>在 <code>1.2.3</code> (包含) 和 <code>1.2.7</code> (包含) 之间的版本</td></tr><tr><td><code>&gt;=1.2.3 &lt;1.2.7</code></td><td>在 <code>1.2.3</code> (包含) 和 <code>1.2.7</code> (不包含)之间的版本</td></tr><tr><td><code>~1.2.3</code></td><td>相当于<code>&gt;=1.2.3 &lt;1.3.0</code></td></tr><tr><td><code>^1.2.3</code></td><td>相当于<code>&gt;=1.2.3 &lt;2.0.0</code></td></tr></tbody></table><p><em>注意：如果语义表达式以特殊字符开始如<code>&gt;</code>,<code>^</code>或**</em>，如果你没有用引号括起来的话命令可能执行不对，因为shell在CLI里不支持右边的值。所以，当调用<code>release</code>命令时最好能把你的<code>targetBinaryVersion</code>参数用双引号括起来，如：<code>code-push release MyApp updateContents &quot;&gt;1.2.3&quot;</code>。*</p><p><em>注意：根据语义版本规范，版本范围仅对非预发布版本生效：(<a href="https://github.com/npm/node-semver#prerelease-tags" target="_blank" rel="noopener">https://github.com/npm/node-semver#prerelease-tags</a>) 。当你想要发布更新到一个预发布的版本上时，则需要明确指定你想要升级的版本号（比如<code>1.2.3-beta</code>）。</em></p><p>如下表格分别概括了每个应用类型的CodePush更新的语义版本范围的版本值：</p><table><thead><tr><th>平台</th><th>应用商店版本来源</th></tr></thead><tbody><tr><td>Cordova</td><td>在<code>config.xml</code>文件里的<code>&lt;widget version&gt;</code> 属性</td></tr><tr><td>React Native (Android)</td><td>在<code>build.gradle</code>文件里 <code>android.defaultConfig.versionName</code> 属性</td></tr><tr><td>React Native (iOS)</td><td>在<code>Info.plist</code>文件里的<code>CFBundleShortVersionString</code> 键</td></tr><tr><td>React Native (Windows)</td><td>在<code>Package.appxmanifest</code>文件的 <code>&lt;Identity Version&gt;</code> 键</td></tr></tbody></table><p><em>注意：如果在元数据文件里的应用版本号漏掉补丁版本值，如<code>2.0</code>，它将被当成补丁版本值为<code>0</code>，如：<code>2.0 当成 2.0.0</code>.</em></p><h4 id="Deployment-name-部署环境名-参数"><a href="#Deployment-name-部署环境名-参数" class="headerlink" title="Deployment name (部署环境名)参数"></a>Deployment name (部署环境名)参数</h4><p>这是你想发布更新到的那个指定部署环境名。默认为<code>Staging</code>(临时环境)，但是当你准备部署到<code>Production</code>(生产环境)或一个你自定义的部署环境时，你只要指明设置这个参数即可。</p><p><em>注意：这个参数可以用”–deploymentName” 或 “-d”来设置。</em></p><h4 id="Description-描述-参数"><a href="#Description-描述-参数" class="headerlink" title="Description (描述)参数"></a>Description (描述)参数</h4><p>给部署提供一个可选的”更新日志”。当被检测到有更新时这个值就会完整的传到客户端，所以你的应用可以选择显示给终端用户（如：通过一个<code>哪些新东西？</code>的对话框）。这个字符串可以接受控制字符如<code>\n</code> 和 <code>\t</code>，以便你可以包含空白格式在你的描述里来提高可读性。</p><p><em>注意：这个参数可以用”–description” 或 “–des”来设置。</em></p><h4 id="Mandatory-强制性-参数"><a href="#Mandatory-强制性-参数" class="headerlink" title="Mandatory (强制性)参数"></a>Mandatory (强制性)参数</h4><p>这个标识该更新是否是强制性的（如：包含一个严重的安全修复）。这个属性简单的传到客户端，然后客户端决定是否要强制更新。</p><p><em>注意: 这个参数是简单的一个”标记”，所以，没有该标记表示版本更新可选，如果有标记则表示版本是强制更新的。你可以给它赋值（如：<code>--mandatory true</code>)，但其实简单的<code>--mandatory</code>就已能标识强制更新了。</em></p><p>强制属性是唯一的，因为服务端必要时将动态修改它，为了确保你对终端用户的版本更新语义上的维护。例如：设想你的应用有如下3个更新：</p><table><thead><tr><th>版本</th><th>强制？</th></tr></thead><tbody><tr><td>v1</td><td>No</td></tr><tr><td>v2</td><td>Yes</td></tr><tr><td>v3</td><td>No</td></tr></tbody></table><p>如果用户当前是<code>v1</code>版本，然后从服务端查询更新，将以<code>v3</code>（因为这是最新的）响应，但是它将动态将这个版本转变成强制的，因为中间有一个强制更新的版本。这个行为很重要因为<code>v3</code>的代码是在<code>v2</code>上增加的，所以任何没有获取<code>v2</code>版本的都会不管<code>v2</code>的强制，而继续让<code>v3</code>变成强制更新版本。</p><p>如果用户当前是<code>v2</code>版本，然后从服务器查询更新，响应结果为<code>v3</code>，但会留着这个版本作为可选的。这个因为他们已经接受了强制更新，所以没有必要去修改<code>v3</code>。这样的行为就是为什么我们说服务器会”动态改变”强制标签，因为随着版本的迭代，新版本的强制属性总会保存你设置的这个值。当有一个版本更新检查要响应给用户时，它只会在相邻的版本上改变。</p><p>如果你从没发布一个强制的更新，那么上面的行为不会应用到你，因为服务器从不改变一个可选的版本为强制版本，除非有像上面阐述的那样掺杂了强制版本。此外，如果一个版本标记成强制了，它决不会被转变成可选的，因为那没有任何意义。为了尊重上面描述的语义，服务器将只会把一个可选的发布改变为强制的。</p><p><em>注意：这个参数可以用<code>--mandatory</code> 或 <code>-m</code>来设置</em></p><h4 id="Rollout-参数"><a href="#Rollout-参数" class="headerlink" title="Rollout 参数"></a>Rollout 参数</h4><p><strong>重要：为了使这个参数有效，终端用户需要运行CodePush插件的<code>1.6.0-beta+</code>版本 (Cordova) 或 <code>1.9.0-beta+</code>版本 (React Native)。如果你发布了一个指明了首次展示(Rollout)属性的更新，那么运行老版本的Cordova或ReactNative用户不会更新。因此，直到你已经采取了必要CodePush SDK的版本，否则我们不建议设置一个首次展示(rollout)版本，因为没有人会接受它。</strong></p><p>这指定了可以接收这次更新的用户百分比（在<code>1</code>到<code>100</code>之间的数字）。这会是有帮助的，假如你想在每个人广泛获取之前，”飞行”一个新版本给部分的受众（如：25%） ，并且得到异常/崩溃的反馈观察。如果没有设置这个参数，它会设置为<code>100%</code>，所以，你只需要在你想实际限制多少用户能接收时去设置它。</p><p>当借用首次展现(rollout)能力，要记住一些额外注意事项：</p><ol><li><p>你不可以在最新版本的首次展示是”有效的”（如：首次展示值非空）的部署环境上发布新更新。在你在部署环境上发布进一步更新之前，首次展示属性需要是”完全的”（如：设置<code>roullout</code>属性为<code>100</code>）。</p></li><li><p>如果你回滚部署环境，它的最新版本的首次展示是”有效的”，那首次展示的值将被清除，实际上”禁止”首次展示行为。</p></li><li><p>不像<code>mandatory</code>和<code>description</code>字段，当从一个部署环境中促进发布时，它将不会传送<code>rollout</code>属性，所以，如果你想新的发布（在目标部署环境里）有首次展示的值，那么你需要在调用<code>promote</code>命令时明确的设置它。</p></li></ol><p><em>注意：这个参数可以用 <code>--rollout</code> or <code>-r</code> 来设置</em></p><h4 id="Disabled-参数"><a href="#Disabled-参数" class="headerlink" title="Disabled 参数"></a>Disabled 参数</h4><p>这个指明一个版本更新是否可以被用户下载。如果没有指定，版本更新不会是无效的（如：用户将要下载的那一刻你的应用称为<code>同步</code>）。如果你想发布一个更新但不是立即生效，那么这个参数是有价值的，直到你明确用<a href="#补丁更新">补丁</a>发布，当你要让用户能够下载（如：公告博客上线）。</p><p><em>注意：这个参数可以用 “–disabled” or “-x”来设置</em></p><h3 id="发布更新-React-Native"><a href="#发布更新-React-Native" class="headerlink" title="发布更新 (React Native)"></a>发布更新 (React Native)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">code-push release-react &lt;appName&gt; &lt;platform&gt;</span><br><span class="line">[--bundleName &lt;bundleName&gt;]</span><br><span class="line">[--deploymentName &lt;deploymentName&gt;]</span><br><span class="line">[--description &lt;description&gt;]</span><br><span class="line">[--development &lt;development&gt;]</span><br><span class="line">[--disabled &lt;disabled&gt;]</span><br><span class="line">[--entryFile &lt;entryFile&gt;]</span><br><span class="line">[--gradleFile &lt;gradleFile&gt;]</span><br><span class="line">[--mandatory]</span><br><span class="line">[--noDuplicateReleaseError]</span><br><span class="line">[--outputDir &lt;outputDir&gt;]</span><br><span class="line">[--plistFile &lt;plistFile&gt;]</span><br><span class="line">[--plistFilePrefix &lt;plistFilePrefix&gt;]</span><br><span class="line">[--sourcemapOutput &lt;sourcemapOutput&gt;]</span><br><span class="line">[--targetBinaryVersion &lt;targetBinaryVersion&gt;]</span><br><span class="line">[--rollout &lt;rolloutPercentage&gt;]</span><br><span class="line">[--privateKeyPath &lt;pathToPrivateKey&gt;]</span><br><span class="line">[--config &lt;config&gt;]</span><br></pre></td></tr></table></figure><p><code>release-react</code>命令是React Native特有的<a href="#发布更新"><code>发布</code></a>命令，支持相同的所有参数（如：<code>--mandatory</code>,<code>--description</code>），然而通过如下额外的动作简化了发布更新过程：</p><ol><li><p>运行<code>react-native bundle</code>命令去生成将要发布到CodePush服务的<a href="#update-contents-params">更新</a>(JS Bundle和资源)。它尽可能使用合理的默认值(如：创建一个non-dev构建,假设一个iOS入口文件被命名为“index.ios.js”)，但也暴露了有关<code>react-native bundle</code>参数使得灵活（如：<code>--sourcemapOutput</code>）。</p></li><li><p>通过使用定义在项目文件<code>info.plist</code>(IOS)和<code>build.gradle</code>(Android)里的版本名，推断<a href="#target-binary-version-目标二进制版本-参数"><code>targetBinaryVersion</code></a>的值。</p></li></ol><p>为了阐述<code>release-react</code>命令产生的差异，如下的例子是你可能如何生成和发布一个React Native应用版本更新，通过使用<code>release</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir ./CodePush</span><br><span class="line"></span><br><span class="line">react-native bundle --platform ios \</span><br><span class="line">--entry-file index.ios.js \</span><br><span class="line">--bundle-output ./CodePush/main.jsbundle \</span><br><span class="line">--assets-dest ./CodePush \</span><br><span class="line">--dev false</span><br><span class="line"></span><br><span class="line">code-push release MyApp ./CodePush 1.0.0</span><br></pre></td></tr></table></figure><p>用<code>release-react</code>命令实现等效的行为只需简单的如下的命令，这个通常更,这是通常更少出错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push release-react MyApp ios</span><br></pre></td></tr></table></figure><p><em>注意：我们相信<code>release-react</code>命令对大多数React Native的开发者是有价值的，所以如果你发现它不够灵活或者缺少关键功能，不要犹豫请<a href="mailto:codepushfeed@microsoft.com" target="_blank" rel="noopener">让我们知道</a>，以便我们可以提高它。</em></p><h4 id="App-name-参数"><a href="#App-name-参数" class="headerlink" title="App name 参数"></a>App name 参数</h4><p>这个参数跟<a href="#App-name-应用名-参数">上面章节</a>描述的一样。</p><h4 id="Platform-参数"><a href="#Platform-参数" class="headerlink" title="Platform 参数"></a>Platform 参数</h4><p>指定当前的更新是哪个平台的，可以是<code>android</code>， <code>ios</code>， 或<code>windows</code>（不区分大小写）。</p><h4 id="Deployment-name-参数"><a href="#Deployment-name-参数" class="headerlink" title="Deployment name 参数"></a>Deployment name 参数</h4><p>相同的参数跟 <a href="#deployment-name-参数">上面的章节</a>描述一样。</p><h4 id="Description-参数"><a href="#Description-参数" class="headerlink" title="Description 参数"></a>Description 参数</h4><p>相同的参数跟 <a href="#description-参数">上面的章节</a>描述一样。</p><h4 id="Mandatory-参数"><a href="#Mandatory-参数" class="headerlink" title="Mandatory 参数"></a>Mandatory 参数</h4><p>相同的参数跟 <a href="#mandatory-参数">上面的章节</a>描述一样。</p><h4 id="Rollout-参数-1"><a href="#Rollout-参数-1" class="headerlink" title="Rollout 参数"></a>Rollout 参数</h4><p>相同的参数跟 <a href="#rollout-参数">上面的章节</a>描述一样。如果没有指定，版本将对所有用户有效可下载。</p><h4 id="Target-binary-version-参数"><a href="#Target-binary-version-参数" class="headerlink" title="Target binary version 参数"></a>Target binary version 参数</h4><p>相同的参数跟 <a href="#target-binary-version-参数">上面的章节</a>描述一样。如果没有指定，默认使用<code>Info.plist</code> (iOS) and <code>build.gradle</code> (Android)文件里指定的精确版本号。</p><h4 id="Disabled-参数-1"><a href="#Disabled-参数-1" class="headerlink" title="Disabled 参数"></a>Disabled 参数</h4><p>相同的参数跟 <a href="#disabled-参数">上面的章节</a>)描述一样。</p><h4 id="Development-参数"><a href="#Development-参数" class="headerlink" title="Development 参数"></a>Development 参数</h4><p>这个指明是否要生成一个非最小化，开发的JS bundle文件。如果没有指明，默认是<code>false</code>，禁用警告提示并且bundle文件是最小化的。</p><p><em>注意：这个参数可以配置成<code>--development</code> 或<code>--dev</code></em></p><h4 id="Entry-file-参数"><a href="#Entry-file-参数" class="headerlink" title="Entry file 参数"></a>Entry file 参数</h4><p>指明相对应用根目录的路径入口JavaScript 文件。如果没有指定，默认是：如果存在<code>index.ios.js</code>(IOS), <code>index.android.js</code>(Android), 或者<code>index.windows.bundle</code>(Windows)，否则<code>index.js</code>。</p><p><em>注意：参数可以配置成<code>--entryFile</code>或<code>-e</code></em></p><h4 id="Bundle-name-参数"><a href="#Bundle-name-参数" class="headerlink" title="Bundle name 参数"></a>Bundle name 参数</h4><p>指明生成JS Bundle的文件名。如果没有指定，特定平台将会用的标准bundle名字：<code>main.jsbundle</code> (iOS), <code>index.android.bundle</code> (Android) and <code>index.windows.bundle</code> (Windows).</p><p><em>注意：参数可以配置成<code>--bundleName</code>或<code>-b</code></em></p><h4 id="Sourcemap-output-参数"><a href="#Sourcemap-output-参数" class="headerlink" title="Sourcemap output 参数"></a>Sourcemap output 参数</h4><p>指明生成的JS bundle 的sourcemap写入的相对路径。如果没有指定，sourcemaps文件不会生成。</p><p><em>注意：参数可以配置成<code>--sourcemapOutput</code>或<code>-s</code></em></p><h3 id="发布更新-Cordova"><a href="#发布更新-Cordova" class="headerlink" title="发布更新 (Cordova)"></a>发布更新 (Cordova)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">code-push release-cordova &lt;appName&gt; &lt;platform&gt;</span><br><span class="line">[--deploymentName &lt;deploymentName&gt;]</span><br><span class="line">[--description &lt;description&gt;]</span><br><span class="line">[--mandatory]</span><br><span class="line">[--targetBinaryVersion &lt;targetBinaryVersion&gt;]</span><br><span class="line">[--rollout &lt;rolloutPercentage&gt;]</span><br><span class="line">[--build]</span><br></pre></td></tr></table></figure><p>这个<code>release-cordova</code> 命令是Cordova特有的<a href="#发布更新"><code>发布</code></a>命令，支持相同的所有参数（如：<code>--mandatory</code>，<code>--description</code>），然而通过如下额外的动作简化了发布更新过程：</p><ol><li><p>运行<code>cordova prepare</code>命令去生成将要发布到CodePush服务的<a href="#update-contents-更新内容-参数">更新内容</a> (<code>www</code> 文件夹) 。</p></li><li><p>通过使用定义在项目文件<code>config.xml</code>文件里的版本名，推断<a href="#target-binary-version-目标二进制版本-参数"><code>targetBinaryVersion</code></a> 的值。</p></li></ol><p>为了阐述<code>release-cordova</code>命令产生的差异，如下的例子是你可能如何生成和发布一个Cordova应用版本更新，通过使用<code>release</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cordova prepare ios</span><br><span class="line">code-push release MyApp ./platforms/ios/www 1.0.0</span><br></pre></td></tr></table></figure><p>用<code>release-cordova</code>命令实现等效的行为只需简单的如下的命令，这个通常更,这是通常更少出错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push release-cordova MyApp ios</span><br></pre></td></tr></table></figure><p>注意：我们相信<code>release-cordova</code>命令对大多数Cordova的开发者是有价值的，所以如果你发现它不够灵活或者缺少关键功能，不要犹豫请<a href="mailto:codepushfeed@microsoft.com" target="_blank" rel="noopener">让我们知道</a>，以便我们可以提高它。</p><h4 id="App-name-参数-1"><a href="#App-name-参数-1" class="headerlink" title="App name 参数"></a>App name 参数</h4><p>这个参数跟<a href="#App-name-应用名-参数">上面章节</a>描述的一样。</p><h4 id="Platform-参数-1"><a href="#Platform-参数-1" class="headerlink" title="Platform 参数"></a>Platform 参数</h4><p>指定当前的更新是哪个平台的，可以是<code>ios</code>或<code>android</code>（不区分大小写）。</p><h4 id="Deployment-name-参数-1"><a href="#Deployment-name-参数-1" class="headerlink" title="Deployment name 参数"></a>Deployment name 参数</h4><p>相同的参数跟 <a href="#deployment-name-参数">上面的章节</a>描述一样。</p><h4 id="Description-参数-1"><a href="#Description-参数-1" class="headerlink" title="Description 参数"></a>Description 参数</h4><p>相同的参数跟 <a href="#description-参数">上面的章节</a>描述一样。</p><h4 id="Mandatory-参数-1"><a href="#Mandatory-参数-1" class="headerlink" title="Mandatory 参数"></a>Mandatory 参数</h4><p>相同的参数跟 <a href="#mandatory-参数">上面的章节</a>描述一样。</p><h4 id="Rollout-参数-2"><a href="#Rollout-参数-2" class="headerlink" title="Rollout 参数"></a>Rollout 参数</h4><p>相同的参数跟 <a href="#rollout-参数">上面的章节</a>描述一样。如果没有指定，版本将对所有用户有效可下载。</p><h4 id="Target-binary-version-参数-1"><a href="#Target-binary-version-参数-1" class="headerlink" title="Target binary version 参数"></a>Target binary version 参数</h4><p>相同的参数跟 <a href="#target-binary-version-参数">上面的章节</a>描述一样。如果没有指定，默认使用项目元数据里指定的（<code>Info.plist</code> (iOS) and <code>build.gradle</code> (Android)版本号。</p><h4 id="Disabled-参数-2"><a href="#Disabled-参数-2" class="headerlink" title="Disabled 参数"></a>Disabled 参数</h4><p>相同的参数跟 <a href="#disabled-参数">上面的章节</a>)描述一样。</p><h4 id="Build-参数"><a href="#Build-参数" class="headerlink" title="Build 参数"></a>Build 参数</h4><p>当你生成版本更新的web资源时，指定是否想用<code>cordova build</code>来取代<code>cordova prepare</code>（默认行为）。这是有价值的，假设你的项目包含构建钩子（如：转换TypeScript），所以CodePush简单的运行<code>cordova prepare</code>不够充分的创建和发布更新。如果没有指定，它默认是<code>false</code>。</p><p><em>注意：这个参数可以用<code>--build</code>或<code>-b</code>来设置</em></p><h2 id="补丁更新"><a href="#补丁更新" class="headerlink" title="补丁更新"></a>补丁更新</h2><p>在发布更新之后，可能有这样的场景，你需要修改一个或多个相关的属性（如：你忘记给一个严重的Bug修复打上强制标记了，你想增加更新的首次展示百分比）。你可以很容易的用下面的命令行来实现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">code-push patch &lt;appName&gt; &lt;deploymentName&gt;</span><br><span class="line">[--label &lt;releaseLabel&gt;]</span><br><span class="line">[--mandatory &lt;isMandatory&gt;]</span><br><span class="line">[--description &lt;description&gt;]</span><br><span class="line">[--rollout &lt;rolloutPercentage&gt;]</span><br><span class="line">[--disabled &lt;isDisabled&gt;]</span><br><span class="line">[--targetBinaryVersion &lt;targetBinaryVersion&gt;]</span><br></pre></td></tr></table></figure><p>抛开<code>appName</code> 和 <code>deploymentName</code>，所有参数是可选的，所以，你可以用这个命令一次性更新单个或者所有属性。调用<code>patch</code>命令而不指定任何属性将不产生任何操作结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Mark the latest production release as mandatory</span><br><span class="line">code-push patch MyApp Production -m</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Increase the rollout for v23 to 50%</span><br><span class="line">code-push patch MyApp Production -l v23 -rollout 50%</span><br></pre></td></tr></table></figure><h3 id="Label-参数"><a href="#Label-参数" class="headerlink" title="Label 参数"></a>Label 参数</h3><p>表明你想在指定的部署环境里更新哪个发布版本（如：<code>v23</code>）。如果省略了，那要求的变化将应用到指定的部署环境的最新版本上。为了查看你想更新的版本标签，你可以运行<code>code-push deployment history</code>命令并参见<code>Label</code>列。</p><p><em>注意：这个参数可以设置成<code>--label</code>或<code>-l</code></em></p><h3 id="Mandatory-参数-2"><a href="#Mandatory-参数-2" class="headerlink" title="Mandatory 参数"></a>Mandatory 参数</h3><p>同样的参数跟<a href="#mandatory-参数">上面的章节</a>描述一致，简单的允许你更改这个版本是否考虑强制更新。注意<code>--mandatory</code>和<code>--mandatory true</code>是同等的，但是缺少这个标记不等于<code>--mandatory false</code>。所以，如果参数省略了，对目标版本的强制性属性来说不会产生任何改变。你需要设置<code>--mandatory false</code>去明确的标识版本是可选的。</p><h3 id="Description-参数-2"><a href="#Description-参数-2" class="headerlink" title="Description 参数"></a>Description 参数</h3><p>同样的参数跟<a href="#description-参数">上面的章节</a>描述一致，简单的允许你更改关联版本的描述（如：你在发布时写了个错别字，或者你完全忘记添加一个描述了）。如果参数省略掉了，那么对于目标版本的描述属性来说不会有任何改动。</p><h3 id="Disabled-参数-3"><a href="#Disabled-参数-3" class="headerlink" title="Disabled 参数"></a>Disabled 参数</h3><p>同样的参数跟<a href="#disabled-参数">上面的章节</a>描述一致，简单的允许你去更改发布的版本是否无效。注意<code>--disabled</code>和<code>--disabled true</code>是等同的，但是缺省这个标识不等于<code>--disabled false</code>。所以，如果忽略了该参数，并不会对目标版本的无效(disabled)属性有修改。你需要设置<code>--disabled false</code>去明确标识一个以前无效的版本有效。</p><h3 id="Rollout-参数-3"><a href="#Rollout-参数-3" class="headerlink" title="Rollout 参数"></a>Rollout 参数</h3><p>同样的参数跟<a href="#rollout-参数">上面的章节</a>描述一致，简单的允许你去<strong>增加</strong>目标版本首次展示的百分比。这个参数只能设成一个比当前首次展示值要大的数字。此外，如果你想”完全的”首次展示，因此，让版本对每个人有效，你可以简单的设置参数<code>--rollout 100</code>，如果省略了这个参数，目标版本的首次展示(rollout)属性不会有任何改动。</p><p>此外，上面提到的，当你发布版本时没有指定首次展示(rollout)的值时，它相当于是被设置成了<code>100</code>。因此，如果你发布一个没有首次展示的更新，那你不可以通过<code>patch</code>命令改变rollout属性，因为那样是被认为在降低首次展示(rolltout)百分比。</p><h3 id="Target-binary-version-参数-2"><a href="#Target-binary-version-参数-2" class="headerlink" title="Target binary version 参数"></a>Target binary version 参数</h3><p>同样的参数跟<a href="#target-binary-version-参数">上面的章节</a>描述一致，简单的允许你去更改语义版本范围表明兼容哪个版本版本。这个可以很有用，如果你在最初发布时犯了个错（如：你指定<code>1.0.0</code>但本意<code>1.1.0</code>）或你想增加或减少版本支持的版本范围（如：你发现一个版本总是不能在<code>1.1.2</code>版本上正常运行）。如果省略了这个参数，目标版本的版本号属性不会有任何改动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 给意境存在的版本添加一个"最大二进制版本"范围</span><br><span class="line"><span class="meta">#</span>  by scoping its eligibility to users running &gt;= 1.0.5</span><br><span class="line">code-push patch MyApp Staging -t "1.0.0 - 1.0.5"</span><br></pre></td></tr></table></figure><h2 id="促进更新"><a href="#促进更新" class="headerlink" title="促进更新"></a>促进更新</h2><p>一旦测试完指定部署环境的版本更新（如：<code>Staging</code>），你想把它向下游推进（如：dev-&gt;staging, staging-&gt;production)，你可以简单的用如下命令去从一个部署环境拷贝到另一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">code-push promote &lt;appName&gt; &lt;sourceDeploymentName&gt; &lt;destDeploymentName&gt;</span><br><span class="line">[--description &lt;description&gt;]</span><br><span class="line">[--disabled &lt;disabled&gt;]</span><br><span class="line">[--mandatory]</span><br><span class="line">[--rollout &lt;rolloutPercentage&gt;]</span><br><span class="line">[--targetBinaryVersion &lt;targetBinaryVersion]</span><br></pre></td></tr></table></figure><p>这个<code>promote</code>命令将在部署环境里创建一个新的版本，包含<strong>准确的代码和元数据</strong>（描述，强制和目标版本号）来自源部署环境的最新版本。然而你可以用<code>release</code>命令去”手动”从一个环境移植更新到另一个环境，<code>promote</code>命令有如下优势：</p><ol><li><p>它更快些，因为你不需要重新装配版本资源，那些你想发布或记住源部署环境的版本的描述/应用版本。</p></li><li><p>它更少出错，因为提升的操作确保你在源部署环境（如：<code>Staging</code>）已经测试过的那些确定的东西将在目标部署环境（如：<code>Production</code>）变成有效的。</p></li></ol><p>我们推荐所有的用户利用自动创建的<code>Staging</code>和<code>Production</code>环境的优势，把所有的版本发布到<code>Staging</code>，然后经过适当的测试后从<code>Staging</code>执行<code>promote</code>到<code>Production</code>。</p><h3 id="Description-参数-3"><a href="#Description-参数-3" class="headerlink" title="Description 参数"></a>Description 参数</h3><p>相同的参数在<a href="#description-参数">上面的章节</a>描述过，简单的允许你覆写将使用的提升版本的描述。如果没有指定，新的版本将继承被提升的版本描述。</p><h4 id="Disabled-参数-4"><a href="#Disabled-参数-4" class="headerlink" title="Disabled 参数"></a>Disabled 参数</h4><p>相同的参数在参数<a href="#disabled-参数">上面的章节</a>描述过，简单的允许你去覆写将使用的提升版本的失效标记的值。如果没有指定，新版本将继承被提升版本的失效(disabled)属性。</p><h3 id="Mandatory-参数-3"><a href="#Mandatory-参数-3" class="headerlink" title="Mandatory 参数"></a>Mandatory 参数</h3><p>相同的参数在参数<a href="#mandatory-参数">上面的章节</a>描述过，简单的允许你覆写将使用的提升版本的强制标记。如果没有指定，新版本将继承被提升版本的强制属性的值。</p><h3 id="Rollout-参数-4"><a href="#Rollout-参数-4" class="headerlink" title="Rollout 参数"></a>Rollout 参数</h3><p>相同的参数在参数<a href="#rollout-参数">上面的章节</a>描述过， 允许你指定新创建的版本是否只对部分用户有效。不像其它的元数据参数（如：<code>description</code>），版本的<code>rollout</code>属性不会做为提升的一部分而携带过来，所以，如果你不想新的版本对所有用户有效的话，你需要明确去设置它。</p><h3 id="Target-binary-version-参数-3"><a href="#Target-binary-version-参数-3" class="headerlink" title="Target binary version 参数"></a>Target binary version 参数</h3><p>相同的参数在<a href="#target-binary-version-参数">上面的章节</a>描述过，简单的允许你覆写使用的提升版本的版本号(target binary version)。如果没有指定，新的版本将继承被提升版本的版本号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Promote the release to production and make it</span><br><span class="line"><span class="meta">#</span> available to all versions using that deployment</span><br><span class="line">code-push promote MyApp Staging Production -t "*"</span><br></pre></td></tr></table></figure><h2 id="回滚更新"><a href="#回滚更新" class="headerlink" title="回滚更新"></a>回滚更新</h2><p>一个部署环境的发布历史是不可以改变的，所以一旦被发布你不能删除或移除更新。然而，如果你发布了一个坏的更新或包含计划外的功能，使用<code>rollback</code>命令很容易把它回滚：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code-push rollback &lt;appName&gt; &lt;deploymentName&gt;</span><br><span class="line">code-push rollback MyApp Production</span><br></pre></td></tr></table></figure><p>这个的影响是在部署环境里创建一个包含<strong>精确的代码和资源</strong>的新版本，比最新版本更优先的一个版本。举个例子，想象你发布了如下更新：</p><table><thead><tr><th>版本</th><th>描述</th><th>强制</th></tr></thead><tbody><tr><td>v1</td><td>初始化版本!</td><td>Yes</td></tr><tr><td>v2</td><td>添加新功能</td><td>No</td></tr><tr><td>v3</td><td>修复Bugs</td><td>Yes</td></tr></tbody></table><p>如果你在部署环境里运行<code>rollback</code>命令，一个包含<code>v2</code>版本内容的新的版本(<code>v4</code>)将会被创建。</p><table><thead><tr><th>版本</th><th>描述</th><th>强制</th></tr></thead><tbody><tr><td>v1</td><td>初始化版本!</td><td>Yes</td></tr><tr><td>v2</td><td>添加新功能</td><td>No</td></tr><tr><td>v3</td><td>修复Bugs</td><td>Yes</td></tr><tr><td>v4 (从v3回滚到v2)</td><td>添加新功能</td><td>No</td></tr></tbody></table><p>当app执行版本检查时，已经获得<code>v3</code>版本的用户现在被”回滚”到<code>v2</code>版本。此外，任何仍运行在<code>v2</code>版本的用户，因而将不会捕获到<code>v3</code>版本，因为他/她们已经在运行最新的版本（这就是为什么我们使用附加在版本标签里的包的hash来做版本检查）。</p><p>如果你想回滚部署环境到一个版本而不是前一个版本（如：<code>v3</code> -&gt; <code>v2</code>），你可以指定一个可选的<code>--targetRelease</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push rollback MyApp Production --targetRelease v34</span><br></pre></td></tr></table></figure><p><em>注意：由回滚产生的版本将会在<code>deployment history</code>命令的输出里被注释，以便助于更容易被辨识出来。</em></p><h2 id="查看发布历史"><a href="#查看发布历史" class="headerlink" title="查看发布历史"></a>查看发布历史</h2><p>你可以使用如下命令查看某个应用的部署环境里最多50条最新的发布历史：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push deployment history &lt;appName&gt; &lt;deploymentName&gt;</span><br></pre></td></tr></table></figure><p>这个历史纪录将显示每个版本的所有的属性（如：标签，强制性），也会标明任何版本是否由提升(promotion)或是回滚操作而来。</p><p><img src="https://cloud.githubusercontent.com/assets/696206/11605068/14e440d0-9aab-11e5-8837-69ab09bfb66c.PNG" alt="Deployment History"></p><p>此外，历史记录显示每个版本的安装指标。你可以在文档的上面<code>deployment ls</code>命令处查看指标数据的解释明细。</p><p>默认情况下，历史纪录不会显示各个版本的作者，但是如果你是和其它开发者合作的，而且想看每个更新是谁发布的，那你可以给历史命令传额外的<code>--displayAuthor</code>(或<code>-a</code>)标记。</p><p><em>注意：历史命令可以使用”h”别名来运行</em></p><h2 id="清除发布历史"><a href="#清除发布历史" class="headerlink" title="清除发布历史"></a>清除发布历史</h2><p>你可以用如下命令清除相关的发布历史：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push deployment clear &lt;appName&gt; &lt;deploymentName&gt;</span><br></pre></td></tr></table></figure><p>运行此命令后，那些已经配置了使用关联的部署密钥的客户端设备将不再接收被清除掉的更新。这个命令是不可逆的,因此不应该使用在生产部署。</p>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nvm使用 nvm 管理不同版本的 node 与 npm</title>
      <link href="/2018/08/13/nvm%E7%AE%A1%E7%90%86node/"/>
      <url>/2018/08/13/nvm%E7%AE%A1%E7%90%86node/</url>
      <content type="html"><![CDATA[<h5 id="卸载老版本的-node-和-nvm"><a href="#卸载老版本的-node-和-nvm" class="headerlink" title="卸载老版本的 node 和 nvm"></a>卸载老版本的 node 和 nvm</h5><ol><li>如果是从 brew 安装的, 运行 <code>brew uninstall node</code></li><li>删除~/目录下所有 node 和 node_modules</li><li>删除 /usr/local/lib 中的所有 node 和 node_modules</li><li>删除 /usr/local/lib 中的所有 node 和 node_modules 的文件夹</li><li>在 /usr/local/bin 中, 删除所有 node 的可执行文件(node 和 npm)</li></ol><a id="more"></a><h5 id="手动删除文件，整理成脚本是这个样子"><a href="#手动删除文件，整理成脚本是这个样子" class="headerlink" title="手动删除文件，整理成脚本是这个样子"></a>手动删除文件，整理成脚本是这个样子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf ~/.npm</span><br><span class="line">sudo rm -rf ~/node_modules</span><br><span class="line">sudo rm -rf ~/.node-gyp</span><br><span class="line">sudo rm /usr/local/bin/node</span><br><span class="line">sudo rm /usr/local/bin/npm</span><br><span class="line">sudo rm /usr/local/lib/dtrace/node.d</span><br></pre></td></tr></table></figure><h5 id="卸载-NVM"><a href="#卸载-NVM" class="headerlink" title="卸载 NVM"></a>卸载 NVM</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.nvm</span><br><span class="line">rm -rf ~/.npm</span><br><span class="line">rm -rf ~/.bower</span><br></pre></td></tr></table></figure><p>还需要删除下.bash_profile文件中的配置(用brew安装后还需要重新加上，但不太一样)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vim .bash_profile</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure><h3 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh|bash</span><br></pre></td></tr></table></figure><p>在.bash_profile文件最后边添加，没有这个文件 就创建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;</span><br></pre></td></tr></table></figure><p>重新启动一下配置<br>输入nvm可以看到如下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Node Version Manager</span><br><span class="line"></span><br><span class="line">Note: &lt;version&gt; refers to any version-like string nvm understands. This includes:</span><br><span class="line">  - full or partial version numbers, starting with an optional &quot;v&quot; (0.10, v0.1.2, v1)</span><br><span class="line">  - default (built-in) aliases: node, stable, unstable, iojs, system</span><br><span class="line">  - custom aliases you define with `nvm alias foo`</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  nvm help                                  Show this message</span><br><span class="line">  nvm --version                             Print out the latest released version of nvm</span><br><span class="line">  nvm install [-s] &lt;version&gt;                Download and install a &lt;version&gt;, [-s] from source. Uses .nvmrc if available</span><br><span class="line">    --reinstall-packages-from=&lt;version&gt;     When installing, reinstall packages installed in &lt;node|iojs|node version number&gt;</span><br><span class="line">  nvm uninstall &lt;version&gt;                   Uninstall a version</span><br><span class="line">  nvm use [--silent] &lt;version&gt;              Modify PATH to use &lt;version&gt;. Uses .nvmrc if available</span><br><span class="line">  nvm exec [--silent] &lt;version&gt; [&lt;command&gt;] Run &lt;command&gt; on &lt;version&gt;. Uses .nvmrc if available</span><br><span class="line">  nvm run [--silent] &lt;version&gt; [&lt;args&gt;]     Run `node` on &lt;version&gt; with &lt;args&gt; as arguments. Uses .nvmrc if available</span><br><span class="line">  nvm current                               Display currently activated version</span><br><span class="line">  nvm ls                                    List installed versions</span><br><span class="line">  nvm ls &lt;version&gt;                          List versions matching a given description</span><br><span class="line">  nvm ls-remote                             List remote versions available for install</span><br><span class="line">  nvm version &lt;version&gt;                     Resolve the given description to a single local version</span><br><span class="line">  nvm version-remote &lt;version&gt;              Resolve the given description to a single remote version</span><br><span class="line">  nvm deactivate                            Undo effects of `nvm` on current shell</span><br><span class="line">  nvm alias [&lt;pattern&gt;]                     Show all aliases beginning with &lt;pattern&gt;</span><br><span class="line">  nvm alias &lt;name&gt; &lt;version&gt;                Set an alias named &lt;name&gt; pointing to &lt;version&gt;</span><br><span class="line">  nvm unalias &lt;name&gt;                        Deletes the alias named &lt;name&gt;</span><br><span class="line">  nvm reinstall-packages &lt;version&gt;          Reinstall global `npm` packages contained in &lt;version&gt; to current version</span><br><span class="line">  nvm unload                                Unload `nvm` from shell</span><br><span class="line">  nvm which [&lt;version&gt;]                     Display path to installed node version. Uses .nvmrc if available</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">  nvm install v0.10.32                  Install a specific version number</span><br><span class="line">  nvm use 0.10                          Use the latest available 0.10.x release</span><br><span class="line">  nvm run 0.10.32 app.js                Run app.js using node v0.10.32</span><br><span class="line">  nvm exec 0.10.32 node app.js          Run `node app.js` with the PATH pointing to node v0.10.32</span><br><span class="line">  nvm alias default 0.10.32             Set default node version on a shell</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)</span><br></pre></td></tr></table></figure><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>查看Node所有版本，用<code>nvm ls-remote</code>命令，如下：(注意ls-remote 连在一起)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v0.1.14</span><br><span class="line">v0.1.15</span><br><span class="line">v0.1.16</span><br><span class="line">...</span><br><span class="line"> v7.7.1</span><br><span class="line"> v7.7.2</span><br><span class="line"> v7.7.3</span><br></pre></td></tr></table></figure><p>正常安装的话 nvm install v6.10.0会很慢，推荐使用国内镜像：(在.bash_profile文件中添加下边镜像源)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</span><br></pre></td></tr></table></figure><p>需要哪个版本，就在最后将6换成对应的版本号就行，默认下载版本中最新的版本号。</p><p>安装node</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install node (安装是最新的版本)</span><br></pre></td></tr></table></figure><h3 id="使用nvm轻松切换node版本"><a href="#使用nvm轻松切换node版本" class="headerlink" title="使用nvm轻松切换node版本"></a>使用nvm轻松切换node版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use v4.1.0  //nvm use node 默认使用最新的</span><br></pre></td></tr></table></figure><p>有时候使用nvm use node  不能正常使用，用下面命令处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use --delete-prefix  v6.14.3  --silent</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/haiyangJ/record/issues/2" target="_blank" rel="noopener">参考地址</a></p><h3 id="安装完后-出现-nvm-command-not-found"><a href="#安装完后-出现-nvm-command-not-found" class="headerlink" title="安装完后 出现 nvm: command not found"></a>安装完后 出现 nvm: command not found</h3><p>执行以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.nvm/nvm.sh</span><br></pre></td></tr></table></figure><h3 id="安装完成后-运行RN项目的时候出现-react-native-command-not-found-错误，执行以下代码"><a href="#安装完成后-运行RN项目的时候出现-react-native-command-not-found-错误，执行以下代码" class="headerlink" title="安装完成后 运行RN项目的时候出现 react-native: command not found 错误，执行以下代码"></a>安装完成后 运行RN项目的时候出现 react-native: command not found 错误，执行以下代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br><span class="line">//卸载</span><br><span class="line">npm uninstall -g react-native-cli</span><br></pre></td></tr></table></figure><h3 id="RN项目跑起来-出现No-bundle-URL-present-需要开启npm"><a href="#RN项目跑起来-出现No-bundle-URL-present-需要开启npm" class="headerlink" title="RN项目跑起来,出现No bundle URL present 需要开启npm"></a>RN项目跑起来,出现No bundle URL present 需要开启npm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">react-native link</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><h3 id="nvm默认启动一种环境"><a href="#nvm默认启动一种环境" class="headerlink" title="nvm默认启动一种环境"></a>nvm默认启动一种环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm alias default 6.9.4</span><br></pre></td></tr></table></figure><h3 id="创建react应用"><a href="#创建react应用" class="headerlink" title="创建react应用"></a>创建react应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Promise的简易实现（一）</title>
      <link href="/2018/08/02/Promise/"/>
      <url>/2018/08/02/Promise/</url>
      <content type="html"><![CDATA[<ul><li><h4 id="Promise的日常使用"><a href="#Promise的日常使用" class="headerlink" title="Promise的日常使用"></a>Promise的日常使用</h4><p>举个栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//异步请求</span></span><br><span class="line">      http.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        resolve(msg);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getMsg()</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><h4 id="做出Promise大致框架"><a href="#做出Promise大致框架" class="headerlink" title="做出Promise大致框架"></a>做出Promise大致框架</h4></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="literal">null</span>,</span><br><span class="line">        callbacks = [];<span class="comment">//callbacks为数组，因为可能同时有很多个回调  </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//执行then函数的时候，添加所有的callback方法</span></span><br><span class="line">        callbacks.push(onFulfilled);</span><br><span class="line">        <span class="comment">//return this支持链式调用 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//外部执行resolve函数时，将所有的callback方法依次执行</span></span><br><span class="line">        callbacks.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            callback(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="代码的大致逻辑："><a href="#代码的大致逻辑：" class="headerlink" title="代码的大致逻辑："></a>代码的大致逻辑：</h4></li></ul><ol><li>调用<code>then</code>方法，将想要在<code>Promise</code>异步操作成功时执行的回调放入<code>callbacks</code>队列，其实也就是注册回调函数，可以向观察者模式方向思考；</li><li>创建<code>Promise</code>实例时传入的函数会被赋予一个函数类型的参数，即<code>resolve</code>，它接收一个参数value，代表异步操作返回的结果，当一步操作执行成功后，用户会调用<code>resolve</code>方法，这时候其实真正执行的操作是将<code>callbacks</code>队列中的回调一一执行；</li></ol><ul><li><h4 id="实现Promise延迟机制"><a href="#实现Promise延迟机制" class="headerlink" title="实现Promise延迟机制"></a>实现Promise延迟机制</h4><p>细心的小明发现了一个问题，如果在<code>then</code>方法注册回调之前，<code>resolve</code>函数就执行了，怎么办？比如<code>promise</code>内部的函数是同步函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//异步请求</span></span><br><span class="line">        resolve(<span class="number">123</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Promises/A+</code>规范明确要求回调需要通过异步方式执行，用以保证一致可靠的执行顺序。因此我们要加入一些处理，保证在<code>resolve</code>执行之前，<code>then</code>方法已经注册完所有的回调。这个时候就需要我们实现<code>resolve</code>方法的延时机制，使用<code>setTimeout</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        callbacks.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            callback(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setTimeout</code>会将<code>callback</code>的异步执行队列放在下一个<code>macrotask</code>里面，等执行了<code>macrotask</code>中的所有<code>microtask</code>后再执行下一个<code>macrotask</code>。具体可查询<code>Javascript</code>的<code>event loop</code>相关知识。</p></li><li><h4 id="完整Promise实现"><a href="#完整Promise实现" class="headerlink" title="完整Promise实现"></a>完整Promise实现</h4><h5 id="1-Promise状态的引入"><a href="#1-Promise状态的引入" class="headerlink" title="1.Promise状态的引入"></a>1.Promise状态的引入</h5><p>在上述代码中，我们大致实现了<code>Promise</code>的基本功能，但小明通过敏锐的洞察力可观察到，即使在执行<code>resolve</code>会依次执行<code>callback</code>的所有注册方法，这样额外开销会非常大，这显然并不是我们想要的<code>Promise</code>，所以我们需要给<code>Promise</code>增加状态，当状态切换时，执行相应的回调方法。三种状态分别为<code>pending</code>、<code>fulfilled</code>、<code>rejected</code>，对应相应的回调方法。</p><h5 id="2-Promise状态的相互转换"><a href="#2-Promise状态的相互转换" class="headerlink" title="2.Promise状态的相互转换"></a>2.Promise状态的相互转换</h5><p><code>Promises/A+</code>规范<code>Promise States</code>中明确规定了，<code>pending</code>可以转化为<code>fulfilled</code>或<code>rejected</code>并且只能转化一次，也就是说如果<code>pending</code>转化到<code>fulfilled</code>状态，那么就不能再转化到<code>rejected</code>。也就是说在<code>Promise</code>的状态切换是不可逆的。并且<code>fulfilled</code>和<code>rejected</code>状态只能由<code>pending</code>转化而来，两者之间不能互相转换。可以看下图之前的切换：</p><p><img src="/2018/08/02/Promise/Users/30san/Downloads/promiseState.png" alt="promiseState"></p><p>代码的思路是这样的：<code>resolve</code>执行时，会将状态设置为<code>fulfilled</code>，在此之后调用<code>then</code>添加的新回调，都会立即执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> state = <span class="string">'pending'</span>,</span><br><span class="line">        value = <span class="literal">null</span>,</span><br><span class="line">        callbacks = []; <span class="comment">//callbacks为数组，因为可能同时有很多个回调</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">            callbacks.push(onFulfilled);</span><br><span class="line">            <span class="comment">//return this支持链式调用</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//假如state已经切换至其他状态，直接执行回调</span></span><br><span class="line">        onFulfilled(value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        state = <span class="string">'fulfilled'</span>;</span><br><span class="line">        value = newValue;</span><br><span class="line"></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            callbacks.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">                callback(newValue);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h5 id="3-链式Promise"><a href="#3-链式Promise" class="headerlink" title="3.链式Promise"></a>3.链式Promise</h5><p>但聪明的小明又发现了一个问题，当在<code>then</code>里面执行一个回调时，假如在这里面返回一个<code>Promise</code>，类似于这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getMsg()</span><br><span class="line">    .then(getDetailMsg)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">detailMsg</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 对detailMsg的处理</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDetailMsg</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        http.get(url + msg, <span class="function"><span class="keyword">function</span>(<span class="params">detailMsg</span>) </span>&#123;</span><br><span class="line">            resolve(detailMsg);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是传说中的链式<code>Promise</code>循环，在第二个<code>then</code>中，我们希望它能挂钩到第一个<code>Promise</code>所<code>resolve</code>的参数。要达到我们想要的效果，需要修改<code>then</code>的源码，使其返回一个新的<code>Promise</code>.作为Promise实现最大的难题，这个我们后面继续实现。</p><p>​</p></li></ul><p>​      </p>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>reactjs错误处理</title>
      <link href="/2018/08/02/reactjs%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/2018/08/02/reactjs%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="无法使用-执行任何命令都出现一下错误"><a href="#无法使用-执行任何命令都出现一下错误" class="headerlink" title="无法使用,执行任何命令都出现一下错误"></a>无法使用,执行任何命令都出现一下错误</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Error: spawn node_modules/webpack/bin/webpack.js ENOENT</span><br><span class="line">    at exports._errnoException (util.js:1022:11)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (internal/child_process.js:189:19)</span><br><span class="line">    at onErrorNT (internal/child_process.js:366:16)</span><br><span class="line">    at _combinedTickCallback (internal/process/next_tick.js:102:11)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:161:9)</span><br><span class="line">    at Function.Module.runMain (module.js:607:11)</span><br><span class="line">    at startup (bootstrap_node.js:158:16)</span><br><span class="line">    at bootstrap_node.js:575:3</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! @ development: `cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Failed at the @ development script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /home/x/.npm/_logs/2017-07-19T09_10_58_764Z-debug.log</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! @ dev: `npm run development`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Failed at the @ dev script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /home/x/.npm/_logs/2017-07-19T09_10_58_772Z-debug.log</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1 verbose cli [ &apos;/usr/local/bin/node&apos;,</span><br><span class="line">1 verbose cli   &apos;/usr/local/bin/npm&apos;,</span><br><span class="line">1 verbose cli   &apos;run&apos;,</span><br><span class="line">1 verbose cli   &apos;development&apos; ]</span><br><span class="line">2 info using npm@5.3.0</span><br><span class="line">3 info using node@v8.1.4</span><br><span class="line">4 verbose run-script [ &apos;predevelopment&apos;, &apos;development&apos;, &apos;postdevelopment&apos; ]</span><br><span class="line">5 info lifecycle @~predevelopment: @</span><br><span class="line">6 info lifecycle @~development: @</span><br><span class="line">7 verbose lifecycle @~development: unsafe-perm in lifecycle true</span><br><span class="line">8 verbose lifecycle @~development: PATH: /usr/local/lib/node_modules/npm/bin/node-gyp-bin:/Users/samsmekens/Dropbox/Teammap van S3S/VisualS3/projecten/2016/S3S/dev/Website_2016/new source/node_modules/.bin:/usr/local/lib/node_modules/npm/bin/node-gyp-bin:/Users/samsmekens/Dropbox/Teammap van S3S/VisualS3/projecten/2016/S3S/dev/Website_2016/new source/node_modules/.bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin</span><br><span class="line">9 verbose lifecycle @~development: CWD: /Users/samsmekens/Dropbox/Teammap van S3S/VisualS3/projecten/2016/S3S/dev/Website_2016/new source</span><br><span class="line">10 silly lifecycle @~development: Args: [ &apos;-c&apos;,</span><br><span class="line">10 silly lifecycle   &apos;cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&apos; ]</span><br><span class="line">11 silly lifecycle @~development: Returned: code: 2  signal: null</span><br><span class="line">12 info lifecycle @~development: Failed to exec development script</span><br><span class="line">13 verbose stack Error: @ development: `cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js`</span><br><span class="line">13 verbose stack Exit status 2</span><br><span class="line">13 verbose stack     at EventEmitter.&lt;anonymous&gt; (/usr/local/lib/node_modules/npm/lib/utils/lifecycle.js:289:16)</span><br><span class="line">13 verbose stack     at emitTwo (events.js:125:13)</span><br><span class="line">13 verbose stack     at EventEmitter.emit (events.js:213:7)</span><br><span class="line">13 verbose stack     at ChildProcess.&lt;anonymous&gt; (/usr/local/lib/node_modules/npm/lib/utils/spawn.js:40:14)</span><br><span class="line">13 verbose stack     at emitTwo (events.js:125:13)</span><br><span class="line">13 verbose stack     at ChildProcess.emit (events.js:213:7)</span><br><span class="line">13 verbose stack     at maybeClose (internal/child_process.js:897:16)</span><br><span class="line">13 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:208:5)</span><br><span class="line">14 verbose pkgid @</span><br><span class="line">15 verbose cwd /Users/samsmekens/Dropbox/Teammap van S3S/VisualS3/projecten/2016/S3S/dev/Website_2016/new source</span><br><span class="line">16 verbose Darwin 16.0.0</span><br><span class="line">17 verbose argv &quot;/usr/local/bin/node&quot; &quot;/usr/local/bin/npm&quot; &quot;run&quot; &quot;development&quot;</span><br><span class="line">18 verbose node v8.1.4</span><br><span class="line">19 verbose npm  v5.3.0</span><br><span class="line">20 error code ELIFECYCLE</span><br><span class="line">21 error errno 2</span><br><span class="line">22 error @ development: `cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js`</span><br><span class="line">22 error Exit status 2</span><br><span class="line">23 error Failed at the @ development script.</span><br><span class="line">23 error This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line">24 verbose exit [ 2, true ]</span><br></pre></td></tr></table></figure><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>先把node 降到一个可以执行npm的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n 6.9.1</span><br></pre></td></tr></table></figure><p>再升级npm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm@next</span><br></pre></td></tr></table></figure><p>node 安装一个稳定版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n stable   </span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line">n latest 最新版本  </span><br><span class="line">n 6.9.1 具体到讴歌版本</span><br><span class="line">n rm 4.4.7 删除某个版本</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>如果还是报错 依次执行以下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf node_modules</span><br><span class="line">rm package-lock.json</span><br><span class="line">npm cache clear --force</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="查看node的路径"><a href="#查看node的路径" class="headerlink" title="查看node的路径"></a>查看node的路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which node</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo + yilia +gitalk 搭建github.io博客</title>
      <link href="/2018/08/02/hexo_yilia_gitalk%E6%90%AD%E5%BB%BAgithub_page%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/08/02/hexo_yilia_gitalk%E6%90%AD%E5%BB%BAgithub_page%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>都是基于Mac os 相关的配置</p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章</p><h3 id="github-page"><a href="#github-page" class="headerlink" title="github page"></a>github page</h3><p>github Pages就是用户编写的、托管在github上的静态网页。</p><ul><li>说白了，你想整个自己不需要花钱，又懒得自己打理的个人blog，那github Page就是个不错的选择</li></ul><a id="more"></a><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><h4 id="安装-Hexo之前你得先安装"><a href="#安装-Hexo之前你得先安装" class="headerlink" title="安装 Hexo之前你得先安装"></a>安装 Hexo之前你得先安装</h4><ul><li><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3></li><li><p>通过homebrew安装<br>通过 <code>brew -v</code> 查看，如果有相关的版本号，说明安装成功，如果没有就需要安装homebrew</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><ul><li>安装homebrew成功后，就可以用brew命令来安装node</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew link node</span><br><span class="line">brew uninstall node</span><br><span class="line">brew install node</span><br></pre></td></tr></table></figure><ul><li>删除已安装的node</li></ul><p>–<br>如果之前已经手动安装过node，再次通过homebrew安装往往产生冲突，可以先删除</p><ol><li>如果是通过homebrew安装的，下发命令brew uninstall node即可</li><li>如果是通过安装包安装的，手动删除node的安装文件即可</li></ol><p>–</p><ul><li><p>配置多版本的node，安装nvm<br><a href="https://ibambooooo.github.io/2018/07/20/nvm%E7%AE%A1%E7%90%86node/" target="_blank" rel="noopener">nvm 管理不同版本的node</a></p></li><li><h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3><p>npm由于源服务器在国外，下载node包速度较慢，cnpm使用国内镜像，下载速度较快</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">Search Packages淘宝 NPM 镜像</a></p><ul><li><h3 id="安装git-（mac-系统一般已经安装好了git）"><a href="#安装git-（mac-系统一般已经安装好了git）" class="headerlink" title="安装git （mac 系统一般已经安装好了git）"></a>安装git （mac 系统一般已经安装好了git）</h3><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">安装 Git</a></li></ul><h2 id="安装-hexo-1"><a href="#安装-hexo-1" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p>进入主题安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ul><li><p>在编译时可能会遇到问题，得先安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p></li><li><h3 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>之后cd到根目下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>通过<code>localhost:4000</code>访问，就可以看到blog已经初步搭建完成</p><ul><li><h3 id="将blog和github关联"><a href="#将blog和github关联" class="headerlink" title="将blog和github关联"></a>将blog和github关联</h3><ul><li>首先得有github账号对吧，然后创建一个仓库<br><img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/001.png" alt=""></li></ul></li><li><h3 id="配置SSH-keys"><a href="#配置SSH-keys" class="headerlink" title="配置SSH keys"></a>配置SSH keys</h3></li><li><h4 id="先检查自己电脑有没有ssh-key"><a href="#先检查自己电脑有没有ssh-key" class="headerlink" title="先检查自己电脑有没有ssh key"></a>先检查自己电脑有没有ssh key</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/. ssh</span><br></pre></td></tr></table></figure></li></ul><p>   如果显示 <code>No such file or directory</code>，说明这是你第一次使用 git</p><ul><li><h4 id="生成新的-SSH-Key"><a href="#生成新的-SSH-Key" class="headerlink" title="生成新的 SSH Key"></a>生成新的 SSH Key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;注册github的邮箱地址@youremail.com&quot;</span><br></pre></td></tr></table></figure></li></ul><p>然后系统会要你输入密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):&lt;设置密码&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入密码&gt;</span><br></pre></td></tr></table></figure><p> 找到生成的key，一般在文稿里，会有两个文件 id_rsa, id_rsa.pub,打开d_rsa.pub文件就呢刚看到key了,key复制的时候，前后全部复制</p><ul><li><h4 id="添加SSH-Key到GitHub"><a href="#添加SSH-Key到GitHub" class="headerlink" title="添加SSH Key到GitHub"></a>添加SSH Key到GitHub</h4><p> <img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/002.png" alt=""></p></li><li><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li><li><p>就是这个命令，不需要做任何修改<br> 然后就是回车，选择Y，回车输入刚才设置的密码</p></li></ul><ul><li><h3 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h3>  修改hexo 根目录</li><li>见后边附件</li><li><p>配置文件所有冒号后边记得得有一个空格<br><a href="https://www.zhihu.com/question/24422335/answer/46357100" target="_blank" rel="noopener">hexo 主题 知乎</a></p></li><li><p>找到喜欢的主题，下载选来拖进hexo根目录themes<br><img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/003.png" alt=""></p></li></ul><p>然后在hexo根目录的配置文件修改主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: yilia</span><br></pre></td></tr></table></figure></p><p>启动本地服务看一下效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo  server</span><br></pre></td></tr></table></figure></p><h3 id="yilia主题的自定义"><a href="#yilia主题的自定义" class="headerlink" title="yilia主题的自定义"></a>yilia主题的自定义</h3><ul><li>个性签名 就是头像下面那就话</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subtitle: 划船不用桨 一生全靠浪</span><br></pre></td></tr></table></figure><p>如果需要修改一些自定义就到文件 yilia-&gt;layout<br>例如需改页尾就去footer.ejs文件</p><h3 id="gitalk评论"><a href="#gitalk评论" class="headerlink" title="gitalk评论"></a>gitalk评论</h3><p>yilia 支持的评论比较多，但是基本都被封了，Disqus会被墙，畅言要备案，所以选了gitalk,还有gitment，gitalk的UI好看一点</p><ul><li><h4 id="新建一个文件-gitalk-ejs"><a href="#新建一个文件-gitalk-ejs" class="headerlink" title="新建一个文件 gitalk.ejs"></a>新建一个文件 gitalk.ejs</h4>在yilia-&gt;layout-&gt;post下创建gitalk.ejs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;gitalk-container&quot; style=&quot;padding: 0px 30px 0px 30px;&quot;&gt;&lt;/div&gt; </span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">if(&lt;%=theme.gitalk.enable%&gt;)&#123;</span><br><span class="line">var gitalk = new Gitalk(&#123;</span><br><span class="line">  clientID: &apos;&lt;%=theme.gitalk.ClientID%&gt;&apos;,</span><br><span class="line">  clientSecret: &apos;&lt;%=theme.gitalk.ClientSecret%&gt;&apos;,</span><br><span class="line">  repo: &apos;&lt;%=theme.gitalk.repo%&gt;&apos;,</span><br><span class="line">  owner: &apos;&lt;%=theme.gitalk.githubID%&gt;&apos;,</span><br><span class="line">  admin: [&apos;&lt;%=theme.gitalk.adminUser%&gt;&apos;],</span><br><span class="line">   id: &apos;&lt;%=page.date%&gt;&apos;, //页面的唯一标识。长度必须小于50</span><br><span class="line">    //id: window.location.pathname,</span><br><span class="line">     //类似Facebook评论框的全屏遮罩效果.</span><br><span class="line">  distractionFreeMode: false</span><br><span class="line">&#125;)</span><br><span class="line">gitalk.render(&apos;gitalk-container&apos;) </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><h4 id="在yilia的配置文件-config-yml-的gitment后边添加"><a href="#在yilia的配置文件-config-yml-的gitment后边添加" class="headerlink" title="在yilia的配置文件_config.yml 的gitment后边添加"></a>在yilia的配置文件_config.yml 的gitment后边添加</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#6、gitalk评论</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  githubID: &apos;ibambooooo&apos;  </span><br><span class="line">  repo: &apos;ibambooooo.github.io&apos;</span><br><span class="line">  ClientID: &apos;自己的ClientID&apos;</span><br><span class="line">  ClientSecret: &apos;自己的ClientSecret&apos;</span><br><span class="line">  adminUser: &apos;ibambooooo&apos;</span><br><span class="line">  #类似Facebook评论框的全屏遮罩效果.</span><br><span class="line">  distractionFreeMode: true</span><br></pre></td></tr></table></figure><ul><li>创建 OAuth Apps<br><img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/004.png" alt=""><br><img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/005.png" alt=""></li></ul><ul><li><h4 id="在article-ejs里引用评论"><a href="#在article-ejs里引用评论" class="headerlink" title="在article.ejs里引用评论"></a>在article.ejs里引用评论</h4><p>找到yilia-&gt;layout-&gt;article.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;% if(theme.gitalk.enable)&#123; %&gt;</span><br><span class="line">   &lt;%- partial(&apos;post/gitalk&apos;, &#123;</span><br><span class="line">       key: post.slug,</span><br><span class="line">       title: post.title,</span><br><span class="line">       url: config.url+url_for(post.path)</span><br><span class="line">     &#125;) %&gt;</span><br><span class="line">   &lt;% &#125; %&gt;</span><br><span class="line"> &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li><p>把原来下面代码块的代码删了，换成上边的代码块（因为我出过bug）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123;  </span><br><span class="line">....</span><br><span class="line"> &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="hexo-常用命令"><a href="#hexo-常用命令" class="headerlink" title="hexo 常用命令"></a>hexo 常用命令</h3><ul><li><h4 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><ul><li><h4 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;博客名称&quot;  =&gt; hexo new &quot;博客名称&quot;   #这两个都是创建新文章，前者是简写模式</span><br><span class="line">hexo p  =&gt; hexo publish</span><br><span class="line">hexo g  =&gt; hexo generate  #生成静态页面至public目录</span><br><span class="line">hexo s  =&gt; hexo server  #启动本地服务预览</span><br><span class="line">hexo d  =&gt; hexo deploy  #将.deploy目录部署到GitHub</span><br><span class="line"></span><br><span class="line">hexo server  =&gt; heox s #Hexo 会监视文件变动并自动更新，无须重启服务器。</span><br><span class="line"></span><br><span class="line">//切换端口</span><br><span class="line">hexo sever -port 4001</span><br><span class="line"></span><br><span class="line">//自定义IP</span><br><span class="line">hexo server -i 192.168.1.1   </span><br><span class="line"></span><br><span class="line">#清除缓存，网页正常情况下可以忽略此条命令</span><br><span class="line">hexo clean   </span><br><span class="line"></span><br><span class="line">hexo g   #生成静态页面至public目录</span><br><span class="line">hexo d   #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure><ul><li>常用复合命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br><span class="line">hexo server -g</span><br></pre></td></tr></table></figure><ul><li><h4 id="删除分类或者啥的"><a href="#删除分类或者啥的" class="headerlink" title="删除分类或者啥的"></a>删除分类或者啥的</h4><ul><li>先删除 <code>db.json</code>文件</li><li>hexo clean</li><li>根目录配置问价 <code>category_dir:categories</code> 赋值为空</li></ul></li></ul><h3 id="hexo添加分类及标签"><a href="#hexo添加分类及标签" class="headerlink" title="hexo添加分类及标签"></a>hexo添加分类及标签</h3><ul><li><h4 id="创建分类选项"><a href="#创建分类选项" class="headerlink" title="创建分类选项"></a>创建分类选项</h4>cd到博客根目录，执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>在hexo的根目录source-&gt;categories-&gt;index.md中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: &#123;&#123;date&#125;&#125;</span><br><span class="line">type: categories</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li><h4 id="创建标签选项"><a href="#创建标签选项" class="headerlink" title="创建标签选项"></a>创建标签选项</h4>cd到博客根目录，执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>在hexo的根目录source-&gt;tags-&gt;index.md中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: &#123;&#123;date&#125;&#125;</span><br><span class="line">type: tags</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="在博文正文配置当前文章的分类、标签、评论"><a href="#在博文正文配置当前文章的分类、标签、评论" class="headerlink" title="在博文正文配置当前文章的分类、标签、评论"></a>在博文正文配置当前文章的分类、标签、评论</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 文章标题</span><br><span class="line">toc: ture  //显示目录</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">tags:</span><br><span class="line">- 算法</span><br><span class="line">comments: true //是否支持评论</span><br></pre></td></tr></table></figure><h3 id="主页显示预览"><a href="#主页显示预览" class="headerlink" title="主页显示预览"></a>主页显示预览</h3><p>在文章显示更多的地方加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!---more---&gt;</span><br></pre></td></tr></table></figure><h3 id="常用的插件"><a href="#常用的插件" class="headerlink" title="常用的插件"></a>常用的插件</h3><ul><li><h3 id="图片管理"><a href="#图片管理" class="headerlink" title="图片管理"></a>图片管理</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>把在hexo根目下的_config.yml设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>当新建的时候，会生成一个跟文章名一样的文件夹的文字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] test-img-demo</span><br></pre></td></tr></table></figure><p>现在可以看到<code>source/_posts</code>里边，除了有<code>test-img-demo.md</code>，还多一个文件夹 <code>test-img-demo</code></p><p>使用图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](test-img/img.jpg)</span><br></pre></td></tr></table></figure><ul><li>如果是手动创建的md文件，只需要在当前创建一个与md文件名一致的文件夹名即可</li></ul><h3 id="配置自己域名"><a href="#配置自己域名" class="headerlink" title="配置自己域名"></a>配置自己域名</h3><ul><li>在hexo的source创建CNAME文件，没有后缀,添加以下内容，没有http，也没有www</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">starforkwatch.xyz</span><br></pre></td></tr></table></figure><ul><li><p>修改github.io项目setting</p><p><img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/006.png" alt=""></p><ul><li>解析域名</li></ul><p><img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/007.png" alt=""><br> <img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/008.png" alt=""></p></li></ul><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><ul><li><h4 id="hexo-根目录配置文件-config-yml"><a href="#hexo-根目录配置文件-config-yml" class="headerlink" title="hexo 根目录配置文件_config.yml"></a>hexo 根目录配置文件_config.yml</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">title: ibamboo</span><br><span class="line">subtitle:</span><br><span class="line">description: 划船不用桨，一生全靠浪</span><br><span class="line">keywords:</span><br><span class="line">author: ibamboo</span><br><span class="line">language:</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line"></span><br><span class="line">#安装hexo-asset-image模块 管理博客图片</span><br><span class="line">post_asset_folder: true</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line">  </span><br><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default = &apos;&apos;)</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &apos;&apos;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line">  </span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map: /</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"></span><br><span class="line">#原来自带的主题</span><br><span class="line">#theme: landscape</span><br><span class="line">#修改主题</span><br><span class="line">theme: yilia  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">#这里记得所有的冒号后边都得加空格</span><br><span class="line"></span><br><span class="line"># 和自己的github绑定</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: http://github.com/ibambooooo/ibambooooo.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  </span><br><span class="line">archive: true</span><br></pre></td></tr></table></figure><ul><li><h4 id="yilia-主题的配置文件-config-yml"><a href="#yilia-主题的配置文件-config-yml" class="headerlink" title="yilia 主题的配置文件_config.yml"></a>yilia 主题的配置文件_config.yml</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: /.</span><br><span class="line">  目录: /archives</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#个性签名</span><br><span class="line">subtitle: 划船不用桨 一生全靠浪</span><br><span class="line"></span><br><span class="line"># SubNav</span><br><span class="line">subnav:</span><br><span class="line">  github: &quot;https://github.com/ibambooooo&quot;</span><br><span class="line">  # weibo: &quot;#&quot;</span><br><span class="line">  # rss: &quot;#&quot;</span><br><span class="line">  # zhihu: &quot;#&quot;</span><br><span class="line">  qq: &quot;http://wpa.qq.com/msgrd?v=3&amp;uin=2770123398&amp;site=qq&amp;menu=yes&quot;</span><br><span class="line">  # weixin: &quot;#&quot;</span><br><span class="line">  #jianshu: &quot;#&quot;</span><br><span class="line">  #douban: &quot;#&quot;</span><br><span class="line">  #segmentfault: &quot;#&quot;</span><br><span class="line">  #bilibili: &quot;#&quot;</span><br><span class="line">  #acfun: &quot;#&quot;</span><br><span class="line">  #mail: &quot;mailto:2770123398@qq.com&quot;</span><br><span class="line">  #facebook: &quot;#&quot;</span><br><span class="line">  #google: &quot;#&quot;</span><br><span class="line">  #twitter: &quot;#&quot;</span><br><span class="line">  #linkedin: &quot;#&quot;</span><br><span class="line"></span><br><span class="line"># rss: /atom.xml</span><br><span class="line"></span><br><span class="line"># 是否需要修改 root 路径</span><br><span class="line"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</span><br><span class="line"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span><br><span class="line">root: /</span><br><span class="line"></span><br><span class="line"># Content</span><br><span class="line"></span><br><span class="line"># 文章太长，截断按钮文字</span><br><span class="line">excerpt_link: &apos;More&apos;</span><br><span class="line"># 文章卡片右下角常驻链接，不需要请设置为false</span><br><span class="line">show_all_link: &apos;展开全文&apos;</span><br><span class="line">fancybox: false</span><br><span class="line"># 数学公式</span><br><span class="line">mathjax: false</span><br><span class="line"># 是否在新窗口打开链接</span><br><span class="line">open_in_new: false</span><br><span class="line"></span><br><span class="line"># 打赏</span><br><span class="line"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</span><br><span class="line">reward_type: 0</span><br><span class="line"># 打赏wording</span><br><span class="line">reward_wording: &apos;谢谢你请我吃糖果&apos;</span><br><span class="line"># 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</span><br><span class="line">alipay: </span><br><span class="line"># 微信二维码图片地址</span><br><span class="line">weixin: </span><br><span class="line"></span><br><span class="line"># 目录</span><br><span class="line"># 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录</span><br><span class="line">toc: 0·</span><br><span class="line"># 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为false</span><br><span class="line">toc_hide_index: true</span><br><span class="line"># 目录为空时的提示</span><br><span class="line">toc_empty_wording: &apos;目录，不存在的…&apos;</span><br><span class="line"></span><br><span class="line"># 是否有快速回到顶部的按钮</span><br><span class="line">top: true</span><br><span class="line"></span><br><span class="line"># Miscellaneous</span><br><span class="line">baidu_analytics: &apos;&apos;</span><br><span class="line">google_analytics: false</span><br><span class="line">favicon: /assets/image/竹子2.png</span><br><span class="line"></span><br><span class="line">#你的头像url</span><br><span class="line">avatar: /assets/image/header.jpg</span><br><span class="line"></span><br><span class="line">#是否开启分享</span><br><span class="line">share_jia: false</span><br><span class="line"></span><br><span class="line">#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus；5、Gitment</span><br><span class="line">#不需要使用某项，直接设置值为false，或注释掉</span><br><span class="line">#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/</span><br><span class="line"></span><br><span class="line">#1、多说</span><br><span class="line">duoshuo: false</span><br><span class="line"></span><br><span class="line">#2、网易云跟帖</span><br><span class="line">wangyiyun: false</span><br><span class="line"></span><br><span class="line">#3、畅言</span><br><span class="line">changyan_appid: false</span><br><span class="line">changyan_conf: false</span><br><span class="line"></span><br><span class="line">#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的</span><br><span class="line">#disqus: &quot;ibambooooo&quot;</span><br><span class="line"></span><br><span class="line">#5、Gitment</span><br><span class="line">#查看github id 方法  https://api.github.com/users/ibambooooo（你的用户名）</span><br><span class="line">gitment:</span><br><span class="line">  enable: false</span><br><span class="line">  gitment_owner: #&apos;ibambooooo&apos;  #你的 GitHub ID 16451695</span><br><span class="line">  gitment_repo:  #&apos;ibambooooo.github.io&apos; #存储评论的 repo ibambooooo.github.io</span><br><span class="line">  gitment_oauth:</span><br><span class="line">    client_id: #&apos;&apos;    #client ID</span><br><span class="line">    client_secret: #&apos;&apos;   #client secret</span><br><span class="line"></span><br><span class="line">#6、gitalk评论</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  githubID: &apos;ibambooooo&apos;  </span><br><span class="line">  repo: &apos;ibambooooo.github.io&apos;</span><br><span class="line">  ClientID: &apos;ClientID&apos;</span><br><span class="line">  ClientSecret: &apos;ClientSecret&apos;</span><br><span class="line">  adminUser: &apos;ibambooooo&apos;</span><br><span class="line">  #类似Facebook评论框的全屏遮罩效果.</span><br><span class="line">  distractionFreeMode: true</span><br><span class="line"></span><br><span class="line"># 样式定制 - 一般不需要修改，除非有很强的定制欲望…</span><br><span class="line">style:</span><br><span class="line">  # 头像上面的背景颜色</span><br><span class="line">  header: &apos;#4d4d4d&apos;</span><br><span class="line">  # 右滑板块背景</span><br><span class="line">  slider: &apos;linear-gradient(200deg,#a0cfe4,#e8c37e)&apos;</span><br><span class="line"></span><br><span class="line"># slider的设置</span><br><span class="line">slider:</span><br><span class="line">  # 是否默认展开tags板块</span><br><span class="line">  showTags: ture</span><br><span class="line"></span><br><span class="line"># 智能菜单</span><br><span class="line"># 如不需要，将该对应项置为false</span><br><span class="line"># 比如</span><br><span class="line">#smart_menu:</span><br><span class="line">#  friends: false</span><br><span class="line">smart_menu:</span><br><span class="line">  innerArchive: &apos;所有文章&apos;</span><br><span class="line">  friends: false</span><br><span class="line">  aboutme: false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">friends:</span><br><span class="line">  友情链接1: http://localhost:4000/</span><br><span class="line">  友情链接2: http://localhost:4000/</span><br><span class="line">  友情链接3: http://localhost:4000/</span><br><span class="line">  友情链接4: http://localhost:4000/</span><br><span class="line">  友情链接5: http://localhost:4000/</span><br><span class="line">  友情链接6: http://localhost:4000/</span><br><span class="line"></span><br><span class="line">aboutme: 很惭愧&lt;br&gt;&lt;br&gt;只做了一点微小的工作&lt;br&gt;谢谢大家</span><br></pre></td></tr></table></figure><p>致谢：<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a></p>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中的或运算与三目运算</title>
      <link href="/2018/08/02/js%E4%B8%AD%E7%9A%84%E6%88%96%E8%BF%90%E7%AE%97%E4%B8%8E%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%20/"/>
      <url>/2018/08/02/js%E4%B8%AD%E7%9A%84%E6%88%96%E8%BF%90%E7%AE%97%E4%B8%8E%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%20/</url>
      <content type="html"><![CDATA[<p>先看代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = a || &#123;&#125;;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = a ? a : &#123;&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="或运算的解释"><a href="#或运算的解释" class="headerlink" title="或运算的解释"></a>或运算的解释</h3><p>||运算左边为假，才会执行右边，而||的返回结果为最后被执行的表达式返回值</p><h3 id="或运算的运用"><a href="#或运算的运用" class="headerlink" title="或运算的运用"></a>或运算的运用</h3><h6 id="1-逻辑判断"><a href="#1-逻辑判断" class="headerlink" title="1.逻辑判断"></a>1.逻辑判断</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(a === 0 || a === &quot;&quot;) &#123;&#125;</span><br></pre></td></tr></table></figure><h6 id="2-等效于三目运算的赋值用法"><a href="#2-等效于三目运算的赋值用法" class="headerlink" title="2.等效于三目运算的赋值用法"></a>2.等效于三目运算的赋值用法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = a || b; // var a = a ? a : b;</span><br></pre></td></tr></table></figure><h6 id="3-等效于三目运算"><a href="#3-等效于三目运算" class="headerlink" title="3.等效于三目运算"></a>3.等效于三目运算</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = 10;while(1) &#123;</span><br><span class="line">  </span><br><span class="line">  a -- || break;&#125;</span><br></pre></td></tr></table></figure><h6 id="4-运算合并"><a href="#4-运算合并" class="headerlink" title="4.运算合并"></a>4.运算合并</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update(&apos;key&apos;,value) || add(&apos;key&apos;,value); </span><br><span class="line">// 更新，如果不存在则添加</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RN相关环境配置</title>
      <link href="/2018/08/02/RN%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/02/RN%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="babel-安装以及介绍"><a href="#babel-安装以及介绍" class="headerlink" title="babel 安装以及介绍"></a>babel 安装以及介绍</h3><ul><li><p><a href="https://www.babeljs.cn/" target="_blank" rel="noopener">babel中文官网</a></p></li><li><h3 id="安装-Babel-CLI-和-env-preset"><a href="#安装-Babel-CLI-和-env-preset" class="headerlink" title="安装 Babel CLI 和 env preset"></a>安装 Babel CLI 和 env preset</h3></li></ul><a id="more"></a><h3 id="ESLint-Airbnb-配置"><a href="#ESLint-Airbnb-配置" class="headerlink" title="ESLint Airbnb 配置"></a>ESLint Airbnb 配置</h3><ul><li><h3 id="安装eslint"><a href="#安装eslint" class="headerlink" title="安装eslint"></a>安装eslint</h3></li><li><p>一定要cd到创建的项目的根目录安装</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint</span><br></pre></td></tr></table></figure><ul><li><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint --init</span><br></pre></td></tr></table></figure><p>出现代码风格选项：(依次选择)<br>1.Use a popular style guide<br>2.Airbnb (<a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">https://github.com/airbnb/javascript</a>)<br>3.配置文件选JSON<br>4.是否支持React 选择 Y</p><ul><li><p>其他的没事就选Y吧<br><code>Successfully created .eslintrc.json file i XXX/XXXX</code> 说明创建成功了<br>结束后就会在根目录生成.eslintrc文件</p></li><li><h3 id="配置-eslintrc文件"><a href="#配置-eslintrc文件" class="headerlink" title="配置.eslintrc文件"></a>配置.eslintrc文件</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: &quot;airbnb&quot;,</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;react&quot;,</span><br><span class="line">    &quot;react-native&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;globals&quot;: &#123;</span><br><span class="line">    &quot;__DEV__&quot;: true,</span><br><span class="line">    &quot;fetch&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;parser&quot;: &quot;babel-eslint&quot;,</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;max-len&quot;: [&quot;error&quot;, 120],</span><br><span class="line">    &quot;no-console&quot;: 0,</span><br><span class="line">    &quot;react/forbid-prop-types&quot;: [0, &#123; &quot;forbid&quot;: [&quot;any&quot;, &quot;array&quot;, &quot;object&quot;] &#125;],</span><br><span class="line">    &quot;react/jsx-filename-extension&quot;: [1, &#123; &quot;extensions&quot;: [&quot;.js&quot;, &quot;.jsx&quot;] &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在根目录的-package-json文件下修改如下"><a href="#在根目录的-package-json文件下修改如下" class="headerlink" title="在根目录的 package.json文件下修改如下:"></a>在根目录的 package.json文件下修改如下:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;,</span><br><span class="line">  &quot;lint&quot;: &quot;eslint --ext .js ./src --fix&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Could not find a package.json file. Run &apos;npm init&apos; to create one.</span><br><span class="line">Error: Could not find a package.json file. Run &apos;npm init&apos; to create one.</span><br><span class="line">    at check (/Users/30san/.nvm/versions/node/v10.7.0/lib/node_modules/eslint/lib/util/npm-util.js:106:15)</span><br><span class="line">    at Object.checkDevDeps (/Users/30san/.nvm/versions/node/v10.7.0/lib/node_modules/eslint/lib/util/npm-util.js:160:12)</span><br><span class="line">    at getModulesList (/Users/30san/.nvm/versions/node/v10.7.0/lib/node_modules/eslint/lib/config/config-initializer.js:112:39)</span><br><span class="line">    at inquirer.prompt.then.answers (/Users/30san/.nvm/versions/node/v10.7.0/lib/node_modules/eslint/lib/config/config-initializer.js:624:33)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:68:7)</span><br></pre></td></tr></table></figure><ul><li>出现这个错，没有cd到项目根目录下</li></ul><h3 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h3>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vim常用</title>
      <link href="/2018/08/01/Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/08/01/Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul><li><code>vim</code> 直接启动vim</li><li><code>vim filename</code>打开vim并创建名为filename的文件</li></ul><h3 id="vim的模式"><a href="#vim的模式" class="headerlink" title="vim的模式"></a>vim的模式</h3><ul><li>正常模式 <code>ESC</code>或者<code>Ctrl + [</code> 左下角文件名为空</li><li>插入模式 <code>i</code> 左下角显示 – INSERT–</li></ul><a id="more"></a><h3 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a>退出命令</h3><p>:wq 保存并退出<br>ZZ 保存并退出<br>:q! 强制退出并忽略所有更改<br>:e! 放弃所有修改，并打开原来文件。</p><h3 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h3><ul><li><code>U</code> 在撤销（需要在正常模式）</li><li><code>ctrl + r</code> 重做（逆返回撤销）</li><li><code>yy</code>拷贝当前行</li><li><code>shift+p</code>在当前行前粘贴</li><li>正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切</li></ul><ul><li><code>vim file1 file2 file3 ...</code> 同时打开多个文件</li><li><code>:open file</code>在vim窗口打开一个新文件</li><li><code>:split file</code> 在新窗口中打开文件</li><li><code>:bn</code>切换到下一个文件</li><li><code>:bp</code>切换到上一个文件</li><li><code>:args</code> 查看当前打开的文件列表，当前正在编辑的文件会用[]括起来</li><li><code>:e ftp://192.168.10.76/abc.txt</code> 打开远程ftp的文件</li><li><code>:e \\qadrive\test\1.txt</code> 打开共享服务器的文件</li><li><code>^</code>移动光标到行首</li><li><code>$</code>移动光标到行尾</li></ul>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssh连接服务器常用操作</title>
      <link href="/2018/08/01/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/08/01/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>SSH是一种网络协议，用于计算机之间的加密登录</p><h3 id="登录服务器"><a href="#登录服务器" class="headerlink" title="登录服务器"></a>登录服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip地址</span><br></pre></td></tr></table></figure><p>回车 输入密码</p><a id="more"></a><h3 id="从服务器上传下载"><a href="#从服务器上传下载" class="headerlink" title="从服务器上传下载"></a>从服务器上传下载</h3><ul><li>从服务器下载文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp username@servername:/path/filename  /Users/mac/Desktop</span><br></pre></td></tr></table></figure><p> <code>scp root@172.16.1.93:/root/test.txt /Users/mac/Desktop</code><br> 就是将服务器上的/root/test.txt下载到本地的/Users/mac/Desktop目录下。两个地址之间有空格！</p><ul><li>上传文件到服务器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /Users/mac/Desktop/test.txt root@123.207.170.40:/root/</span><br></pre></td></tr></table></figure><p> <code>/Users/mac/Desktop/test.txt</code> 本地文件地址，<a href="mailto:`root@123.207.170.40" target="_blank" rel="noopener">`root@123.207.170.40</a>:/root/`服务器地址</p><ul><li>从服务器下载整个目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r root@192.168.0.101:/root/ /Users/mac/Desktop/</span><br></pre></td></tr></table></figure><p>  <code>scp -r root@192.168.0.101:/root/</code> 远程目录， <code>/Users/mac/Desktop/</code>本地目录</p><ul><li><p>上传目录到服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r test root@192.168.0.101:/root/</span><br></pre></td></tr></table></figure></li></ul><h3 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h3><ul><li>压缩某个文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -c dragonmail.plist &gt; dragonmail.plist.gz</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac使用tree生成目录结构</title>
      <link href="/2018/07/26/tree%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2018/07/26/tree%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="根据需求要生出目录结构"><a href="#根据需求要生出目录结构" class="headerlink" title="根据需求要生出目录结构"></a>根据需求要生出目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── build</span><br><span class="line">├── config</span><br><span class="line">├── docs</span><br><span class="line">│   └── static</span><br><span class="line">│       ├── css</span><br><span class="line">│       └── js</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets</span><br><span class="line">│   ├── components</span><br><span class="line">│   ├── store</span><br><span class="line">│   │   └── modules</span><br><span class="line">│   └── views</span><br><span class="line">│       ├── book</span><br><span class="line">│       └── movie</span><br><span class="line">└── static</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="bash-profile在这个文件添加"><a href="#bash-profile在这个文件添加" class="headerlink" title=".bash_profile在这个文件添加"></a>.bash_profile在这个文件添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br></pre></td></tr></table></figure><h3 id="让-bash-profile-生效"><a href="#让-bash-profile-生效" class="headerlink" title="让.bash_profile 生效"></a>让.bash_profile 生效</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><h3 id="安装tree"><a href="#安装tree" class="headerlink" title="安装tree"></a>安装tree</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tree</span><br></pre></td></tr></table></figure><h3 id="查看tree-帮助信息"><a href="#查看tree-帮助信息" class="headerlink" title="查看tree 帮助信息"></a>查看tree 帮助信息</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree --help</span><br></pre></td></tr></table></figure><h3 id="输出目录树"><a href="#输出目录树" class="headerlink" title="输出目录树"></a>输出目录树</h3><ul><li>cd 目标文件夹路径</li><li>然后 tree 一下，会将该层级下所有文件都遍历了输出，不管层级多深</li><li><p>生成的目录树.md文件一般在当前目录下</p><h3 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h3></li><li><p>指定遍历层级（首先得cd到遍历的目录中）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -L 2</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>把一个目录的结构树导出到文件 Readme.md</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ree -L 2 &gt;README.md</span><br></pre></td></tr></table></figure></li><li><p>只显示文件夹</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -d</span><br></pre></td></tr></table></figure><ul><li>显示项目的层级，n表示层级数。例：显示项目三层结构，tree -l 3；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -L n</span><br></pre></td></tr></table></figure><ul><li><code>tree -I pattern</code> 用于过滤不想要显示的文件或者文件夹。比如要过滤项目中的node_modules文件夹</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -I “node_modules”</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
