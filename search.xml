<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>RN相关环境配置</title>
      <link href="/2018/07/31/RN%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/07/31/RN%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="babel-安装以及介绍"><a href="#babel-安装以及介绍" class="headerlink" title="babel 安装以及介绍"></a>babel 安装以及介绍</h3><ul><li><p><a href="https://www.babeljs.cn/" target="_blank" rel="noopener">babel中文官网</a></p></li><li><h3 id="安装-Babel-CLI-和-env-preset"><a href="#安装-Babel-CLI-和-env-preset" class="headerlink" title="安装 Babel CLI 和 env preset"></a>安装 Babel CLI 和 env preset</h3></li></ul><a id="more"></a><h3 id="ESLint-Airbnb-配置"><a href="#ESLint-Airbnb-配置" class="headerlink" title="ESLint Airbnb 配置"></a>ESLint Airbnb 配置</h3><ul><li><h3 id="安装eslint"><a href="#安装eslint" class="headerlink" title="安装eslint"></a>安装eslint</h3></li><li><p>一定要cd到创建的项目的根目录安装</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint</span><br></pre></td></tr></table></figure><ul><li><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint --init</span><br></pre></td></tr></table></figure><p>出现代码风格选项：(依次选择)<br>1.Use a popular style guide<br>2.Airbnb (<a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">https://github.com/airbnb/javascript</a>)<br>3.配置文件选JSON<br>4.是否支持React 选择 Y</p><ul><li><p>其他的没事就选Y吧<br><code>Successfully created .eslintrc.json file i XXX/XXXX</code> 说明创建成功了<br>结束后就会在根目录生成.eslintrc文件</p></li><li><h3 id="配置-eslintrc文件"><a href="#配置-eslintrc文件" class="headerlink" title="配置.eslintrc文件"></a>配置.eslintrc文件</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: &quot;airbnb&quot;,</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;react&quot;,</span><br><span class="line">    &quot;react-native&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;globals&quot;: &#123;</span><br><span class="line">    &quot;__DEV__&quot;: true,</span><br><span class="line">    &quot;fetch&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;parser&quot;: &quot;babel-eslint&quot;,</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;max-len&quot;: [&quot;error&quot;, 120],</span><br><span class="line">    &quot;no-console&quot;: 0,</span><br><span class="line">    &quot;react/forbid-prop-types&quot;: [0, &#123; &quot;forbid&quot;: [&quot;any&quot;, &quot;array&quot;, &quot;object&quot;] &#125;],</span><br><span class="line">    &quot;react/jsx-filename-extension&quot;: [1, &#123; &quot;extensions&quot;: [&quot;.js&quot;, &quot;.jsx&quot;] &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在根目录的-package-json文件下修改如下"><a href="#在根目录的-package-json文件下修改如下" class="headerlink" title="在根目录的 package.json文件下修改如下:"></a>在根目录的 package.json文件下修改如下:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;,</span><br><span class="line">  &quot;lint&quot;: &quot;eslint --ext .js ./src --fix&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Could not find a package.json file. Run &apos;npm init&apos; to create one.</span><br><span class="line">Error: Could not find a package.json file. Run &apos;npm init&apos; to create one.</span><br><span class="line">    at check (/Users/30san/.nvm/versions/node/v10.7.0/lib/node_modules/eslint/lib/util/npm-util.js:106:15)</span><br><span class="line">    at Object.checkDevDeps (/Users/30san/.nvm/versions/node/v10.7.0/lib/node_modules/eslint/lib/util/npm-util.js:160:12)</span><br><span class="line">    at getModulesList (/Users/30san/.nvm/versions/node/v10.7.0/lib/node_modules/eslint/lib/config/config-initializer.js:112:39)</span><br><span class="line">    at inquirer.prompt.then.answers (/Users/30san/.nvm/versions/node/v10.7.0/lib/node_modules/eslint/lib/config/config-initializer.js:624:33)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:68:7)</span><br></pre></td></tr></table></figure><ul><li>出现这个错，没有cd到项目根目录下</li></ul><h3 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h3>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo + yilia +gitalk 搭建github.io博客</title>
      <link href="/2018/07/26/hexo_yilia_gitalk%E6%90%AD%E5%BB%BAgithub_page%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/07/26/hexo_yilia_gitalk%E6%90%AD%E5%BB%BAgithub_page%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>都是基于Mac os 相关的配置</p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章</p><h3 id="github-page"><a href="#github-page" class="headerlink" title="github page"></a>github page</h3><p>github Pages就是用户编写的、托管在github上的静态网页。</p><ul><li>说白了，你想整个自己不需要花钱，又懒得自己打理的个人blog，那github Page就是个不错的选择</li></ul><a id="more"></a><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><h4 id="安装-Hexo之前你得先安装"><a href="#安装-Hexo之前你得先安装" class="headerlink" title="安装 Hexo之前你得先安装"></a>安装 Hexo之前你得先安装</h4><ul><li><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3></li><li><p>通过homebrew安装<br>通过 <code>brew -v</code> 查看，如果有相关的版本号，说明安装成功，如果没有就需要安装homebrew</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><ul><li>安装homebrew成功后，就可以用brew命令来安装node</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew link node</span><br><span class="line">brew uninstall node</span><br><span class="line">brew install node</span><br></pre></td></tr></table></figure><ul><li>删除已安装的node</li></ul><p>–<br>如果之前已经手动安装过node，再次通过homebrew安装往往产生冲突，可以先删除</p><ol><li>如果是通过homebrew安装的，下发命令brew uninstall node即可</li><li>如果是通过安装包安装的，手动删除node的安装文件即可</li></ol><p>–</p><ul><li><p>配置多版本的node，安装nvm<br><a href="https://ibambooooo.github.io/2018/07/20/nvm%E7%AE%A1%E7%90%86node/" target="_blank" rel="noopener">nvm 管理不同版本的node</a></p></li><li><h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3><p>npm由于源服务器在国外，下载node包速度较慢，cnpm使用国内镜像，下载速度较快</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">Search Packages淘宝 NPM 镜像</a></p><ul><li><h3 id="安装git-（mac-系统一般已经安装好了git）"><a href="#安装git-（mac-系统一般已经安装好了git）" class="headerlink" title="安装git （mac 系统一般已经安装好了git）"></a>安装git （mac 系统一般已经安装好了git）</h3><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">安装 Git</a></li></ul><h2 id="安装-hexo-1"><a href="#安装-hexo-1" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p>进入主题安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ul><li><p>在编译时可能会遇到问题，得先安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p></li><li><h3 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>之后cd到根目下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>通过<code>localhost:4000</code>访问，就可以看到blog已经初步搭建完成</p><ul><li><h3 id="将blog和github关联"><a href="#将blog和github关联" class="headerlink" title="将blog和github关联"></a>将blog和github关联</h3><ul><li>首先得有github账号对吧，然后创建一个仓库<br><img src="/2018/07/26/hexo_yilia_gitalk搭建github_page博客/001.png" alt=""></li></ul></li><li><h3 id="配置SSH-keys"><a href="#配置SSH-keys" class="headerlink" title="配置SSH keys"></a>配置SSH keys</h3></li><li><h4 id="先检查自己电脑有没有ssh-key"><a href="#先检查自己电脑有没有ssh-key" class="headerlink" title="先检查自己电脑有没有ssh key"></a>先检查自己电脑有没有ssh key</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/. ssh</span><br></pre></td></tr></table></figure></li></ul><p>   如果显示 <code>No such file or directory</code>，说明这是你第一次使用 git</p><ul><li><h4 id="生成新的-SSH-Key"><a href="#生成新的-SSH-Key" class="headerlink" title="生成新的 SSH Key"></a>生成新的 SSH Key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;注册github的邮箱地址@youremail.com&quot;</span><br></pre></td></tr></table></figure></li></ul><p>然后系统会要你输入密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):&lt;设置密码&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入密码&gt;</span><br></pre></td></tr></table></figure><p> 找到生成的key，一般在文稿里，会有两个文件 id_rsa, id_rsa.pub,打开d_rsa.pub文件就呢刚看到key了,key复制的时候，前后全部复制</p><ul><li><h4 id="添加SSH-Key到GitHub"><a href="#添加SSH-Key到GitHub" class="headerlink" title="添加SSH Key到GitHub"></a>添加SSH Key到GitHub</h4><p> <img src="/2018/07/26/hexo_yilia_gitalk搭建github_page博客/002.png" alt=""></p></li><li><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li><li><p>就是这个命令，不需要做任何修改<br> 然后就是回车，选择Y，回车输入刚才设置的密码</p></li></ul><ul><li><h3 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h3>  修改hexo 根目录</li><li>见后边附件</li><li><p>配置文件所有冒号后边记得得有一个空格<br><a href="https://www.zhihu.com/question/24422335/answer/46357100" target="_blank" rel="noopener">hexo 主题 知乎</a></p></li><li><p>找到喜欢的主题，下载选来拖进hexo根目录themes<br><img src="/2018/07/26/hexo_yilia_gitalk搭建github_page博客/003.png" alt=""></p></li></ul><p>然后在hexo根目录的配置文件修改主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: yilia</span><br></pre></td></tr></table></figure></p><p>启动本地服务看一下效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo  server</span><br></pre></td></tr></table></figure></p><h3 id="yilia主题的自定义"><a href="#yilia主题的自定义" class="headerlink" title="yilia主题的自定义"></a>yilia主题的自定义</h3><ul><li>个性签名 就是头像下面那就话</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subtitle: 划船不用桨 一生全靠浪</span><br></pre></td></tr></table></figure><p>如果需要修改一些自定义就到文件 yilia-&gt;layout<br>例如需改页尾就去footer.ejs文件</p><h3 id="gitalk评论"><a href="#gitalk评论" class="headerlink" title="gitalk评论"></a>gitalk评论</h3><p>yilia 支持的评论比较多，但是基本都被封了，Disqus会被墙，畅言要备案，所以选了gitalk,还有gitment，gitalk的UI好看一点</p><ul><li><h4 id="新建一个文件-gitalk-ejs"><a href="#新建一个文件-gitalk-ejs" class="headerlink" title="新建一个文件 gitalk.ejs"></a>新建一个文件 gitalk.ejs</h4>在yilia-&gt;layout-&gt;post下创建gitalk.ejs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;gitalk-container&quot; style=&quot;padding: 0px 30px 0px 30px;&quot;&gt;&lt;/div&gt; </span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">if(&lt;%=theme.gitalk.enable%&gt;)&#123;</span><br><span class="line">var gitalk = new Gitalk(&#123;</span><br><span class="line">  clientID: &apos;&lt;%=theme.gitalk.ClientID%&gt;&apos;,</span><br><span class="line">  clientSecret: &apos;&lt;%=theme.gitalk.ClientSecret%&gt;&apos;,</span><br><span class="line">  repo: &apos;&lt;%=theme.gitalk.repo%&gt;&apos;,</span><br><span class="line">  owner: &apos;&lt;%=theme.gitalk.githubID%&gt;&apos;,</span><br><span class="line">  admin: [&apos;&lt;%=theme.gitalk.adminUser%&gt;&apos;],</span><br><span class="line">   id: &apos;&lt;%=page.date%&gt;&apos;, //页面的唯一标识。长度必须小于50</span><br><span class="line">    //id: window.location.pathname,</span><br><span class="line">     //类似Facebook评论框的全屏遮罩效果.</span><br><span class="line">  distractionFreeMode: false</span><br><span class="line">&#125;)</span><br><span class="line">gitalk.render(&apos;gitalk-container&apos;) </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><h4 id="在yilia的配置文件-config-yml-的gitment后边添加"><a href="#在yilia的配置文件-config-yml-的gitment后边添加" class="headerlink" title="在yilia的配置文件_config.yml 的gitment后边添加"></a>在yilia的配置文件_config.yml 的gitment后边添加</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#6、gitalk评论</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  githubID: &apos;ibambooooo&apos;  </span><br><span class="line">  repo: &apos;ibambooooo.github.io&apos;</span><br><span class="line">  ClientID: &apos;自己的ClientID&apos;</span><br><span class="line">  ClientSecret: &apos;自己的ClientSecret&apos;</span><br><span class="line">  adminUser: &apos;ibambooooo&apos;</span><br><span class="line">  #类似Facebook评论框的全屏遮罩效果.</span><br><span class="line">  distractionFreeMode: true</span><br></pre></td></tr></table></figure><ul><li>创建 OAuth Apps<br><img src="/2018/07/26/hexo_yilia_gitalk搭建github_page博客/004.png" alt=""><br><img src="/2018/07/26/hexo_yilia_gitalk搭建github_page博客/005.png" alt=""></li></ul><ul><li><h4 id="在article-ejs里引用评论"><a href="#在article-ejs里引用评论" class="headerlink" title="在article.ejs里引用评论"></a>在article.ejs里引用评论</h4><p>找到yilia-&gt;layout-&gt;article.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;% if(theme.gitalk.enable)&#123; %&gt;</span><br><span class="line">   &lt;%- partial(&apos;post/gitalk&apos;, &#123;</span><br><span class="line">       key: post.slug,</span><br><span class="line">       title: post.title,</span><br><span class="line">       url: config.url+url_for(post.path)</span><br><span class="line">     &#125;) %&gt;</span><br><span class="line">   &lt;% &#125; %&gt;</span><br><span class="line"> &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li><p>把原来下面代码块的代码删了，换成上边的代码块（因为我出过bug）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123;  </span><br><span class="line">....</span><br><span class="line"> &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="hexo-常用命令"><a href="#hexo-常用命令" class="headerlink" title="hexo 常用命令"></a>hexo 常用命令</h3><ul><li><h4 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><ul><li><h4 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;博客名称&quot;  =&gt; hexo new &quot;博客名称&quot;   #这两个都是创建新文章，前者是简写模式</span><br><span class="line">hexo p  =&gt; hexo publish</span><br><span class="line">hexo g  =&gt; hexo generate  #生成静态页面至public目录</span><br><span class="line">hexo s  =&gt; hexo server  #启动本地服务预览</span><br><span class="line">hexo d  =&gt; hexo deploy  #将.deploy目录部署到GitHub</span><br><span class="line"></span><br><span class="line">hexo server  =&gt; heox s #Hexo 会监视文件变动并自动更新，无须重启服务器。</span><br><span class="line"></span><br><span class="line">//切换端口</span><br><span class="line">hexo sever -port 4001</span><br><span class="line"></span><br><span class="line">//自定义IP</span><br><span class="line">hexo server -i 192.168.1.1   </span><br><span class="line"></span><br><span class="line">#清除缓存，网页正常情况下可以忽略此条命令</span><br><span class="line">hexo clean   </span><br><span class="line"></span><br><span class="line">hexo g   #生成静态页面至public目录</span><br><span class="line">hexo d   #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure><ul><li>常用复合命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br><span class="line">hexo server -g</span><br></pre></td></tr></table></figure><ul><li><h4 id="删除分类或者啥的"><a href="#删除分类或者啥的" class="headerlink" title="删除分类或者啥的"></a>删除分类或者啥的</h4><ul><li>先删除 <code>db.json</code>文件</li><li>hexo clean</li></ul></li></ul><h3 id="hexo添加分类及标签"><a href="#hexo添加分类及标签" class="headerlink" title="hexo添加分类及标签"></a>hexo添加分类及标签</h3><ul><li><h4 id="创建分类选项"><a href="#创建分类选项" class="headerlink" title="创建分类选项"></a>创建分类选项</h4>cd到博客根目录，执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>在hexo的根目录source-&gt;categories-&gt;index.md中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: &#123;&#123;date&#125;&#125;</span><br><span class="line">type: categories</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li><h4 id="创建标签选项"><a href="#创建标签选项" class="headerlink" title="创建标签选项"></a>创建标签选项</h4>cd到博客根目录，执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>在hexo的根目录source-&gt;tags-&gt;index.md中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: &#123;&#123;date&#125;&#125;</span><br><span class="line">type: tags</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="在博文正文配置当前文章的分类、标签、评论"><a href="#在博文正文配置当前文章的分类、标签、评论" class="headerlink" title="在博文正文配置当前文章的分类、标签、评论"></a>在博文正文配置当前文章的分类、标签、评论</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 文章标题</span><br><span class="line">toc: ture  //显示目录</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">tags:</span><br><span class="line">- 算法</span><br><span class="line">comments: true //是否支持评论</span><br></pre></td></tr></table></figure><h3 id="主页显示预览"><a href="#主页显示预览" class="headerlink" title="主页显示预览"></a>主页显示预览</h3><p>在文章显示更多的地方加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!---more---&gt;</span><br></pre></td></tr></table></figure><h3 id="常用的插件"><a href="#常用的插件" class="headerlink" title="常用的插件"></a>常用的插件</h3><ul><li><h3 id="图片管理"><a href="#图片管理" class="headerlink" title="图片管理"></a>图片管理</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>把在hexo根目下的_config.yml设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>当新建的时候，会生成一个跟文章名一样的文件夹的文字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] test-img-demo</span><br></pre></td></tr></table></figure><p>现在可以看到<code>source/_posts</code>里边，除了有<code>test-img-demo.md</code>，还多一个文件夹 <code>test-img-demo</code></p><p>使用图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](test-img/img.jpg)</span><br></pre></td></tr></table></figure><ul><li>如果是手动创建的md文件，只需要在当前创建一个与md文件名一致的文件夹名即可</li></ul><h3 id="配置自己域名"><a href="#配置自己域名" class="headerlink" title="配置自己域名"></a>配置自己域名</h3><ul><li>在hexo的source创建CNAME文件，没有后缀,添加以下内容，没有http，也没有www</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">starforkwatch.xyz</span><br></pre></td></tr></table></figure><ul><li><p>修改github.io项目setting</p><p><img src="/2018/07/26/hexo_yilia_gitalk搭建github_page博客/006.png" alt=""></p><ul><li>解析域名</li></ul><p><img src="/2018/07/26/hexo_yilia_gitalk搭建github_page博客/007.png" alt=""><br> <img src="/2018/07/26/hexo_yilia_gitalk搭建github_page博客/008.png" alt=""></p></li></ul><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><ul><li><h4 id="hexo-根目录配置文件-config-yml"><a href="#hexo-根目录配置文件-config-yml" class="headerlink" title="hexo 根目录配置文件_config.yml"></a>hexo 根目录配置文件_config.yml</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">title: ibamboo</span><br><span class="line">subtitle:</span><br><span class="line">description: 划船不用桨，一生全靠浪</span><br><span class="line">keywords:</span><br><span class="line">author: ibamboo</span><br><span class="line">language:</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line"></span><br><span class="line">#安装hexo-asset-image模块 管理博客图片</span><br><span class="line">post_asset_folder: true</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line">  </span><br><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default = &apos;&apos;)</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &apos;&apos;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line">  </span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map: /</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"></span><br><span class="line">#原来自带的主题</span><br><span class="line">#theme: landscape</span><br><span class="line">#修改主题</span><br><span class="line">theme: yilia  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">#这里记得所有的冒号后边都得加空格</span><br><span class="line"></span><br><span class="line"># 和自己的github绑定</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: http://github.com/ibambooooo/ibambooooo.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  </span><br><span class="line">archive: true</span><br></pre></td></tr></table></figure><ul><li><h4 id="yilia-主题的配置文件-config-yml"><a href="#yilia-主题的配置文件-config-yml" class="headerlink" title="yilia 主题的配置文件_config.yml"></a>yilia 主题的配置文件_config.yml</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: /.</span><br><span class="line">  目录: /archives</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#个性签名</span><br><span class="line">subtitle: 划船不用桨 一生全靠浪</span><br><span class="line"></span><br><span class="line"># SubNav</span><br><span class="line">subnav:</span><br><span class="line">  github: &quot;https://github.com/ibambooooo&quot;</span><br><span class="line">  # weibo: &quot;#&quot;</span><br><span class="line">  # rss: &quot;#&quot;</span><br><span class="line">  # zhihu: &quot;#&quot;</span><br><span class="line">  qq: &quot;http://wpa.qq.com/msgrd?v=3&amp;uin=2770123398&amp;site=qq&amp;menu=yes&quot;</span><br><span class="line">  # weixin: &quot;#&quot;</span><br><span class="line">  #jianshu: &quot;#&quot;</span><br><span class="line">  #douban: &quot;#&quot;</span><br><span class="line">  #segmentfault: &quot;#&quot;</span><br><span class="line">  #bilibili: &quot;#&quot;</span><br><span class="line">  #acfun: &quot;#&quot;</span><br><span class="line">  #mail: &quot;mailto:2770123398@qq.com&quot;</span><br><span class="line">  #facebook: &quot;#&quot;</span><br><span class="line">  #google: &quot;#&quot;</span><br><span class="line">  #twitter: &quot;#&quot;</span><br><span class="line">  #linkedin: &quot;#&quot;</span><br><span class="line"></span><br><span class="line"># rss: /atom.xml</span><br><span class="line"></span><br><span class="line"># 是否需要修改 root 路径</span><br><span class="line"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</span><br><span class="line"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span><br><span class="line">root: /</span><br><span class="line"></span><br><span class="line"># Content</span><br><span class="line"></span><br><span class="line"># 文章太长，截断按钮文字</span><br><span class="line">excerpt_link: &apos;More&apos;</span><br><span class="line"># 文章卡片右下角常驻链接，不需要请设置为false</span><br><span class="line">show_all_link: &apos;展开全文&apos;</span><br><span class="line">fancybox: false</span><br><span class="line"># 数学公式</span><br><span class="line">mathjax: false</span><br><span class="line"># 是否在新窗口打开链接</span><br><span class="line">open_in_new: false</span><br><span class="line"></span><br><span class="line"># 打赏</span><br><span class="line"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</span><br><span class="line">reward_type: 0</span><br><span class="line"># 打赏wording</span><br><span class="line">reward_wording: &apos;谢谢你请我吃糖果&apos;</span><br><span class="line"># 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</span><br><span class="line">alipay: </span><br><span class="line"># 微信二维码图片地址</span><br><span class="line">weixin: </span><br><span class="line"></span><br><span class="line"># 目录</span><br><span class="line"># 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录</span><br><span class="line">toc: 0·</span><br><span class="line"># 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为false</span><br><span class="line">toc_hide_index: true</span><br><span class="line"># 目录为空时的提示</span><br><span class="line">toc_empty_wording: &apos;目录，不存在的…&apos;</span><br><span class="line"></span><br><span class="line"># 是否有快速回到顶部的按钮</span><br><span class="line">top: true</span><br><span class="line"></span><br><span class="line"># Miscellaneous</span><br><span class="line">baidu_analytics: &apos;&apos;</span><br><span class="line">google_analytics: false</span><br><span class="line">favicon: /assets/image/竹子2.png</span><br><span class="line"></span><br><span class="line">#你的头像url</span><br><span class="line">avatar: /assets/image/header.jpg</span><br><span class="line"></span><br><span class="line">#是否开启分享</span><br><span class="line">share_jia: false</span><br><span class="line"></span><br><span class="line">#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus；5、Gitment</span><br><span class="line">#不需要使用某项，直接设置值为false，或注释掉</span><br><span class="line">#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/</span><br><span class="line"></span><br><span class="line">#1、多说</span><br><span class="line">duoshuo: false</span><br><span class="line"></span><br><span class="line">#2、网易云跟帖</span><br><span class="line">wangyiyun: false</span><br><span class="line"></span><br><span class="line">#3、畅言</span><br><span class="line">changyan_appid: false</span><br><span class="line">changyan_conf: false</span><br><span class="line"></span><br><span class="line">#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的</span><br><span class="line">#disqus: &quot;ibambooooo&quot;</span><br><span class="line"></span><br><span class="line">#5、Gitment</span><br><span class="line">#查看github id 方法  https://api.github.com/users/ibambooooo（你的用户名）</span><br><span class="line">gitment:</span><br><span class="line">  enable: false</span><br><span class="line">  gitment_owner: #&apos;ibambooooo&apos;  #你的 GitHub ID 16451695</span><br><span class="line">  gitment_repo:  #&apos;ibambooooo.github.io&apos; #存储评论的 repo ibambooooo.github.io</span><br><span class="line">  gitment_oauth:</span><br><span class="line">    client_id: #&apos;&apos;    #client ID</span><br><span class="line">    client_secret: #&apos;&apos;   #client secret</span><br><span class="line"></span><br><span class="line">#6、gitalk评论</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  githubID: &apos;ibambooooo&apos;  </span><br><span class="line">  repo: &apos;ibambooooo.github.io&apos;</span><br><span class="line">  ClientID: &apos;ClientID&apos;</span><br><span class="line">  ClientSecret: &apos;ClientSecret&apos;</span><br><span class="line">  adminUser: &apos;ibambooooo&apos;</span><br><span class="line">  #类似Facebook评论框的全屏遮罩效果.</span><br><span class="line">  distractionFreeMode: true</span><br><span class="line"></span><br><span class="line"># 样式定制 - 一般不需要修改，除非有很强的定制欲望…</span><br><span class="line">style:</span><br><span class="line">  # 头像上面的背景颜色</span><br><span class="line">  header: &apos;#4d4d4d&apos;</span><br><span class="line">  # 右滑板块背景</span><br><span class="line">  slider: &apos;linear-gradient(200deg,#a0cfe4,#e8c37e)&apos;</span><br><span class="line"></span><br><span class="line"># slider的设置</span><br><span class="line">slider:</span><br><span class="line">  # 是否默认展开tags板块</span><br><span class="line">  showTags: ture</span><br><span class="line"></span><br><span class="line"># 智能菜单</span><br><span class="line"># 如不需要，将该对应项置为false</span><br><span class="line"># 比如</span><br><span class="line">#smart_menu:</span><br><span class="line">#  friends: false</span><br><span class="line">smart_menu:</span><br><span class="line">  innerArchive: &apos;所有文章&apos;</span><br><span class="line">  friends: false</span><br><span class="line">  aboutme: false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">friends:</span><br><span class="line">  友情链接1: http://localhost:4000/</span><br><span class="line">  友情链接2: http://localhost:4000/</span><br><span class="line">  友情链接3: http://localhost:4000/</span><br><span class="line">  友情链接4: http://localhost:4000/</span><br><span class="line">  友情链接5: http://localhost:4000/</span><br><span class="line">  友情链接6: http://localhost:4000/</span><br><span class="line"></span><br><span class="line">aboutme: 很惭愧&lt;br&gt;&lt;br&gt;只做了一点微小的工作&lt;br&gt;谢谢大家</span><br></pre></td></tr></table></figure><p>致谢：<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a></p>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中的或运算与三目运算</title>
      <link href="/2018/07/20/js%E4%B8%AD%E7%9A%84%E6%88%96%E8%BF%90%E7%AE%97%E4%B8%8E%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%20/"/>
      <url>/2018/07/20/js%E4%B8%AD%E7%9A%84%E6%88%96%E8%BF%90%E7%AE%97%E4%B8%8E%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%20/</url>
      <content type="html"><![CDATA[<p>先看代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = a || &#123;&#125;;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = a ? a : &#123;&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="或运算的解释"><a href="#或运算的解释" class="headerlink" title="或运算的解释"></a>或运算的解释</h3><p>||运算左边为假，才会执行右边，而||的返回结果为最后被执行的表达式返回值</p><h3 id="或运算的运用"><a href="#或运算的运用" class="headerlink" title="或运算的运用"></a>或运算的运用</h3><h6 id="1-逻辑判断"><a href="#1-逻辑判断" class="headerlink" title="1.逻辑判断"></a>1.逻辑判断</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(a === 0 || a === &quot;&quot;) &#123;&#125;</span><br></pre></td></tr></table></figure><h6 id="2-等效于三目运算的赋值用法"><a href="#2-等效于三目运算的赋值用法" class="headerlink" title="2.等效于三目运算的赋值用法"></a>2.等效于三目运算的赋值用法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = a || b; // var a = a ? a : b;</span><br></pre></td></tr></table></figure><h6 id="3-等效于三目运算"><a href="#3-等效于三目运算" class="headerlink" title="3.等效于三目运算"></a>3.等效于三目运算</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = 10;while(1) &#123;</span><br><span class="line">  </span><br><span class="line">  a -- || break;&#125;</span><br></pre></td></tr></table></figure><h6 id="4-运算合并"><a href="#4-运算合并" class="headerlink" title="4.运算合并"></a>4.运算合并</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update(&apos;key&apos;,value) || add(&apos;key&apos;,value); </span><br><span class="line">// 更新，如果不存在则添加</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nvm使用 nvm 管理不同版本的 node 与 npm</title>
      <link href="/2018/07/20/nvm%E7%AE%A1%E7%90%86node/"/>
      <url>/2018/07/20/nvm%E7%AE%A1%E7%90%86node/</url>
      <content type="html"><![CDATA[<h5 id="卸载老版本的-node-和-nvm"><a href="#卸载老版本的-node-和-nvm" class="headerlink" title="卸载老版本的 node 和 nvm"></a>卸载老版本的 node 和 nvm</h5><ol><li>如果是从 brew 安装的, 运行 <code>brew uninstall node</code></li><li>删除~/目录下所有 node 和 node_modules</li><li>删除 /usr/local/lib 中的所有 node 和 node_modules</li><li>删除 /usr/local/lib 中的所有 node 和 node_modules 的文件夹</li><li>在 /usr/local/bin 中, 删除所有 node 的可执行文件(node 和 npm)</li></ol><a id="more"></a><h5 id="手动删除文件，整理成脚本是这个样子"><a href="#手动删除文件，整理成脚本是这个样子" class="headerlink" title="手动删除文件，整理成脚本是这个样子"></a>手动删除文件，整理成脚本是这个样子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf ~/.npm</span><br><span class="line">sudo rm -rf ~/node_modules</span><br><span class="line">sudo rm -rf ~/.node-gyp</span><br><span class="line">sudo rm /usr/local/bin/node</span><br><span class="line">sudo rm /usr/local/bin/npm</span><br><span class="line">sudo rm /usr/local/lib/dtrace/node.d</span><br></pre></td></tr></table></figure><h5 id="卸载-NVM"><a href="#卸载-NVM" class="headerlink" title="卸载 NVM"></a>卸载 NVM</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.nvm</span><br><span class="line">rm -rf ~/.npm</span><br><span class="line">rm -rf ~/.bower</span><br></pre></td></tr></table></figure><p>还需要删除下.bash_profile文件中的配置(用brew安装后还需要重新加上，但不太一样)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vim .bash_profile</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure><h3 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure><p>在.bash_profile文件最后边添加，没有这个文件 就创建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;</span><br></pre></td></tr></table></figure><p>重新启动一下配置<br>输入nvm可以看到如下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Node Version Manager</span><br><span class="line"></span><br><span class="line">Note: &lt;version&gt; refers to any version-like string nvm understands. This includes:</span><br><span class="line">  - full or partial version numbers, starting with an optional &quot;v&quot; (0.10, v0.1.2, v1)</span><br><span class="line">  - default (built-in) aliases: node, stable, unstable, iojs, system</span><br><span class="line">  - custom aliases you define with `nvm alias foo`</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  nvm help                                  Show this message</span><br><span class="line">  nvm --version                             Print out the latest released version of nvm</span><br><span class="line">  nvm install [-s] &lt;version&gt;                Download and install a &lt;version&gt;, [-s] from source. Uses .nvmrc if available</span><br><span class="line">    --reinstall-packages-from=&lt;version&gt;     When installing, reinstall packages installed in &lt;node|iojs|node version number&gt;</span><br><span class="line">  nvm uninstall &lt;version&gt;                   Uninstall a version</span><br><span class="line">  nvm use [--silent] &lt;version&gt;              Modify PATH to use &lt;version&gt;. Uses .nvmrc if available</span><br><span class="line">  nvm exec [--silent] &lt;version&gt; [&lt;command&gt;] Run &lt;command&gt; on &lt;version&gt;. Uses .nvmrc if available</span><br><span class="line">  nvm run [--silent] &lt;version&gt; [&lt;args&gt;]     Run `node` on &lt;version&gt; with &lt;args&gt; as arguments. Uses .nvmrc if available</span><br><span class="line">  nvm current                               Display currently activated version</span><br><span class="line">  nvm ls                                    List installed versions</span><br><span class="line">  nvm ls &lt;version&gt;                          List versions matching a given description</span><br><span class="line">  nvm ls-remote                             List remote versions available for install</span><br><span class="line">  nvm version &lt;version&gt;                     Resolve the given description to a single local version</span><br><span class="line">  nvm version-remote &lt;version&gt;              Resolve the given description to a single remote version</span><br><span class="line">  nvm deactivate                            Undo effects of `nvm` on current shell</span><br><span class="line">  nvm alias [&lt;pattern&gt;]                     Show all aliases beginning with &lt;pattern&gt;</span><br><span class="line">  nvm alias &lt;name&gt; &lt;version&gt;                Set an alias named &lt;name&gt; pointing to &lt;version&gt;</span><br><span class="line">  nvm unalias &lt;name&gt;                        Deletes the alias named &lt;name&gt;</span><br><span class="line">  nvm reinstall-packages &lt;version&gt;          Reinstall global `npm` packages contained in &lt;version&gt; to current version</span><br><span class="line">  nvm unload                                Unload `nvm` from shell</span><br><span class="line">  nvm which [&lt;version&gt;]                     Display path to installed node version. Uses .nvmrc if available</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">  nvm install v0.10.32                  Install a specific version number</span><br><span class="line">  nvm use 0.10                          Use the latest available 0.10.x release</span><br><span class="line">  nvm run 0.10.32 app.js                Run app.js using node v0.10.32</span><br><span class="line">  nvm exec 0.10.32 node app.js          Run `node app.js` with the PATH pointing to node v0.10.32</span><br><span class="line">  nvm alias default 0.10.32             Set default node version on a shell</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)</span><br></pre></td></tr></table></figure><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>查看Node所有版本，用<code>nvm ls-remote</code>命令，如下：(注意ls-remote 连在一起)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v0.1.14</span><br><span class="line">v0.1.15</span><br><span class="line">v0.1.16</span><br><span class="line">...</span><br><span class="line"> v7.7.1</span><br><span class="line"> v7.7.2</span><br><span class="line"> v7.7.3</span><br></pre></td></tr></table></figure><p>正常安装的话 nvm install v6.10.0会很慢，推荐使用国内镜像：(在.bash_profile文件中添加下边镜像源)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</span><br></pre></td></tr></table></figure><p>需要哪个版本，就在最后将6换成对应的版本号就行，默认下载版本中最新的版本号。</p><p>安装node</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install node (安装是最新的版本)</span><br></pre></td></tr></table></figure><h3 id="使用nvm轻松切换node版本"><a href="#使用nvm轻松切换node版本" class="headerlink" title="使用nvm轻松切换node版本"></a>使用nvm轻松切换node版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use v4.1.0  //nvm use node 默认使用最新的</span><br></pre></td></tr></table></figure><p>有时候使用nvm use node  不能正常使用，用下面命令处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use --delete-prefix  v6.14.3  --silent</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/haiyangJ/record/issues/2" target="_blank" rel="noopener">参考地址</a></p><h3 id="安装完后-出现-nvm-command-not-found"><a href="#安装完后-出现-nvm-command-not-found" class="headerlink" title="安装完后 出现 nvm: command not found"></a>安装完后 出现 nvm: command not found</h3><p>执行以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.nvm/nvm.sh</span><br></pre></td></tr></table></figure><h3 id="安装完成后-运行RN项目的时候出现-react-native-command-not-found-错误，执行以下代码"><a href="#安装完成后-运行RN项目的时候出现-react-native-command-not-found-错误，执行以下代码" class="headerlink" title="安装完成后 运行RN项目的时候出现 react-native: command not found 错误，执行以下代码"></a>安装完成后 运行RN项目的时候出现 react-native: command not found 错误，执行以下代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br><span class="line">//卸载</span><br><span class="line">npm uninstall -g react-native-cli</span><br></pre></td></tr></table></figure><h3 id="RN项目跑起来-出现No-bundle-URL-present-需要开启npm"><a href="#RN项目跑起来-出现No-bundle-URL-present-需要开启npm" class="headerlink" title="RN项目跑起来,出现No bundle URL present 需要开启npm"></a>RN项目跑起来,出现No bundle URL present 需要开启npm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">react-native link</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><h3 id="nvm默认启动一种环境"><a href="#nvm默认启动一种环境" class="headerlink" title="nvm默认启动一种环境"></a>nvm默认启动一种环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm alias default 6.9.4</span><br></pre></td></tr></table></figure><h3 id="创建react应用"><a href="#创建react应用" class="headerlink" title="创建react应用"></a>创建react应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Promise的简易实现（一）</title>
      <link href="/2018/07/16/Promise/"/>
      <url>/2018/07/16/Promise/</url>
      <content type="html"><![CDATA[<ul><li><h4 id="Promise的日常使用"><a href="#Promise的日常使用" class="headerlink" title="Promise的日常使用"></a>Promise的日常使用</h4><p>举个栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//异步请求</span></span><br><span class="line">      http.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        resolve(msg);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getMsg()</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><h4 id="做出Promise大致框架"><a href="#做出Promise大致框架" class="headerlink" title="做出Promise大致框架"></a>做出Promise大致框架</h4></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="literal">null</span>,</span><br><span class="line">        callbacks = [];<span class="comment">//callbacks为数组，因为可能同时有很多个回调  </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//执行then函数的时候，添加所有的callback方法</span></span><br><span class="line">        callbacks.push(onFulfilled);</span><br><span class="line">        <span class="comment">//return this支持链式调用 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//外部执行resolve函数时，将所有的callback方法依次执行</span></span><br><span class="line">        callbacks.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            callback(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="代码的大致逻辑："><a href="#代码的大致逻辑：" class="headerlink" title="代码的大致逻辑："></a>代码的大致逻辑：</h4></li></ul><ol><li>调用<code>then</code>方法，将想要在<code>Promise</code>异步操作成功时执行的回调放入<code>callbacks</code>队列，其实也就是注册回调函数，可以向观察者模式方向思考；</li><li>创建<code>Promise</code>实例时传入的函数会被赋予一个函数类型的参数，即<code>resolve</code>，它接收一个参数value，代表异步操作返回的结果，当一步操作执行成功后，用户会调用<code>resolve</code>方法，这时候其实真正执行的操作是将<code>callbacks</code>队列中的回调一一执行；</li></ol><ul><li><h4 id="实现Promise延迟机制"><a href="#实现Promise延迟机制" class="headerlink" title="实现Promise延迟机制"></a>实现Promise延迟机制</h4><p>细心的小明发现了一个问题，如果在<code>then</code>方法注册回调之前，<code>resolve</code>函数就执行了，怎么办？比如<code>promise</code>内部的函数是同步函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//异步请求</span></span><br><span class="line">        resolve(<span class="number">123</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Promises/A+</code>规范明确要求回调需要通过异步方式执行，用以保证一致可靠的执行顺序。因此我们要加入一些处理，保证在<code>resolve</code>执行之前，<code>then</code>方法已经注册完所有的回调。这个时候就需要我们实现<code>resolve</code>方法的延时机制，使用<code>setTimeout</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        callbacks.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            callback(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setTimeout</code>会将<code>callback</code>的异步执行队列放在下一个<code>macrotask</code>里面，等执行了<code>macrotask</code>中的所有<code>microtask</code>后再执行下一个<code>macrotask</code>。具体可查询<code>Javascript</code>的<code>event loop</code>相关知识。</p></li><li><h4 id="完整Promise实现"><a href="#完整Promise实现" class="headerlink" title="完整Promise实现"></a>完整Promise实现</h4><h5 id="1-Promise状态的引入"><a href="#1-Promise状态的引入" class="headerlink" title="1.Promise状态的引入"></a>1.Promise状态的引入</h5><p>在上述代码中，我们大致实现了<code>Promise</code>的基本功能，但小明通过敏锐的洞察力可观察到，即使在执行<code>resolve</code>会依次执行<code>callback</code>的所有注册方法，这样额外开销会非常大，这显然并不是我们想要的<code>Promise</code>，所以我们需要给<code>Promise</code>增加状态，当状态切换时，执行相应的回调方法。三种状态分别为<code>pending</code>、<code>fulfilled</code>、<code>rejected</code>，对应相应的回调方法。</p><h5 id="2-Promise状态的相互转换"><a href="#2-Promise状态的相互转换" class="headerlink" title="2.Promise状态的相互转换"></a>2.Promise状态的相互转换</h5><p><code>Promises/A+</code>规范<code>Promise States</code>中明确规定了，<code>pending</code>可以转化为<code>fulfilled</code>或<code>rejected</code>并且只能转化一次，也就是说如果<code>pending</code>转化到<code>fulfilled</code>状态，那么就不能再转化到<code>rejected</code>。也就是说在<code>Promise</code>的状态切换是不可逆的。并且<code>fulfilled</code>和<code>rejected</code>状态只能由<code>pending</code>转化而来，两者之间不能互相转换。可以看下图之前的切换：</p><p><img src="/2018/07/16/Promise/Users/30san/Downloads/promiseState.png" alt="promiseState"></p><p>代码的思路是这样的：<code>resolve</code>执行时，会将状态设置为<code>fulfilled</code>，在此之后调用<code>then</code>添加的新回调，都会立即执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> state = <span class="string">'pending'</span>,</span><br><span class="line">        value = <span class="literal">null</span>,</span><br><span class="line">        callbacks = []; <span class="comment">//callbacks为数组，因为可能同时有很多个回调</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">            callbacks.push(onFulfilled);</span><br><span class="line">            <span class="comment">//return this支持链式调用</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//假如state已经切换至其他状态，直接执行回调</span></span><br><span class="line">        onFulfilled(value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        state = <span class="string">'fulfilled'</span>;</span><br><span class="line">        value = newValue;</span><br><span class="line"></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            callbacks.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">                callback(newValue);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h5 id="3-链式Promise"><a href="#3-链式Promise" class="headerlink" title="3.链式Promise"></a>3.链式Promise</h5><p>但聪明的小明又发现了一个问题，当在<code>then</code>里面执行一个回调时，假如在这里面返回一个<code>Promise</code>，类似于这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getMsg()</span><br><span class="line">    .then(getDetailMsg)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">detailMsg</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 对detailMsg的处理</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDetailMsg</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        http.get(url + msg, <span class="function"><span class="keyword">function</span>(<span class="params">detailMsg</span>) </span>&#123;</span><br><span class="line">            resolve(detailMsg);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是传说中的链式<code>Promise</code>循环，在第二个<code>then</code>中，我们希望它能挂钩到第一个<code>Promise</code>所<code>resolve</code>的参数。要达到我们想要的效果，需要修改<code>then</code>的源码，使其返回一个新的<code>Promise</code>.作为Promise实现最大的难题，这个我们后面继续实现。</p><p>​</p></li></ul><p>​      </p>]]></content>
      
      
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>reactjs错误处理</title>
      <link href="/2018/07/16/reactjs%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/2018/07/16/reactjs%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="无法使用-执行任何命令都出现一下错误"><a href="#无法使用-执行任何命令都出现一下错误" class="headerlink" title="无法使用,执行任何命令都出现一下错误"></a>无法使用,执行任何命令都出现一下错误</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Error: spawn node_modules/webpack/bin/webpack.js ENOENT</span><br><span class="line">    at exports._errnoException (util.js:1022:11)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (internal/child_process.js:189:19)</span><br><span class="line">    at onErrorNT (internal/child_process.js:366:16)</span><br><span class="line">    at _combinedTickCallback (internal/process/next_tick.js:102:11)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:161:9)</span><br><span class="line">    at Function.Module.runMain (module.js:607:11)</span><br><span class="line">    at startup (bootstrap_node.js:158:16)</span><br><span class="line">    at bootstrap_node.js:575:3</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! @ development: `cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Failed at the @ development script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /home/x/.npm/_logs/2017-07-19T09_10_58_764Z-debug.log</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! @ dev: `npm run development`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Failed at the @ dev script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /home/x/.npm/_logs/2017-07-19T09_10_58_772Z-debug.log</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1 verbose cli [ &apos;/usr/local/bin/node&apos;,</span><br><span class="line">1 verbose cli   &apos;/usr/local/bin/npm&apos;,</span><br><span class="line">1 verbose cli   &apos;run&apos;,</span><br><span class="line">1 verbose cli   &apos;development&apos; ]</span><br><span class="line">2 info using npm@5.3.0</span><br><span class="line">3 info using node@v8.1.4</span><br><span class="line">4 verbose run-script [ &apos;predevelopment&apos;, &apos;development&apos;, &apos;postdevelopment&apos; ]</span><br><span class="line">5 info lifecycle @~predevelopment: @</span><br><span class="line">6 info lifecycle @~development: @</span><br><span class="line">7 verbose lifecycle @~development: unsafe-perm in lifecycle true</span><br><span class="line">8 verbose lifecycle @~development: PATH: /usr/local/lib/node_modules/npm/bin/node-gyp-bin:/Users/samsmekens/Dropbox/Teammap van S3S/VisualS3/projecten/2016/S3S/dev/Website_2016/new source/node_modules/.bin:/usr/local/lib/node_modules/npm/bin/node-gyp-bin:/Users/samsmekens/Dropbox/Teammap van S3S/VisualS3/projecten/2016/S3S/dev/Website_2016/new source/node_modules/.bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin</span><br><span class="line">9 verbose lifecycle @~development: CWD: /Users/samsmekens/Dropbox/Teammap van S3S/VisualS3/projecten/2016/S3S/dev/Website_2016/new source</span><br><span class="line">10 silly lifecycle @~development: Args: [ &apos;-c&apos;,</span><br><span class="line">10 silly lifecycle   &apos;cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&apos; ]</span><br><span class="line">11 silly lifecycle @~development: Returned: code: 2  signal: null</span><br><span class="line">12 info lifecycle @~development: Failed to exec development script</span><br><span class="line">13 verbose stack Error: @ development: `cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js`</span><br><span class="line">13 verbose stack Exit status 2</span><br><span class="line">13 verbose stack     at EventEmitter.&lt;anonymous&gt; (/usr/local/lib/node_modules/npm/lib/utils/lifecycle.js:289:16)</span><br><span class="line">13 verbose stack     at emitTwo (events.js:125:13)</span><br><span class="line">13 verbose stack     at EventEmitter.emit (events.js:213:7)</span><br><span class="line">13 verbose stack     at ChildProcess.&lt;anonymous&gt; (/usr/local/lib/node_modules/npm/lib/utils/spawn.js:40:14)</span><br><span class="line">13 verbose stack     at emitTwo (events.js:125:13)</span><br><span class="line">13 verbose stack     at ChildProcess.emit (events.js:213:7)</span><br><span class="line">13 verbose stack     at maybeClose (internal/child_process.js:897:16)</span><br><span class="line">13 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:208:5)</span><br><span class="line">14 verbose pkgid @</span><br><span class="line">15 verbose cwd /Users/samsmekens/Dropbox/Teammap van S3S/VisualS3/projecten/2016/S3S/dev/Website_2016/new source</span><br><span class="line">16 verbose Darwin 16.0.0</span><br><span class="line">17 verbose argv &quot;/usr/local/bin/node&quot; &quot;/usr/local/bin/npm&quot; &quot;run&quot; &quot;development&quot;</span><br><span class="line">18 verbose node v8.1.4</span><br><span class="line">19 verbose npm  v5.3.0</span><br><span class="line">20 error code ELIFECYCLE</span><br><span class="line">21 error errno 2</span><br><span class="line">22 error @ development: `cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js`</span><br><span class="line">22 error Exit status 2</span><br><span class="line">23 error Failed at the @ development script.</span><br><span class="line">23 error This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line">24 verbose exit [ 2, true ]</span><br></pre></td></tr></table></figure><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>先把node 降到一个可以执行npm的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n 6.9.1</span><br></pre></td></tr></table></figure><p>再升级npm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm@next</span><br></pre></td></tr></table></figure><p>node 安装一个稳定版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n stable   </span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line">n latest 最新版本  </span><br><span class="line">n 6.9.1 具体到讴歌版本</span><br><span class="line">n rm 4.4.7 删除某个版本</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>如果还是报错 依次执行以下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf node_modules</span><br><span class="line">rm package-lock.json</span><br><span class="line">npm cache clear --force</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="查看node的路径"><a href="#查看node的路径" class="headerlink" title="查看node的路径"></a>查看node的路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which node</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
