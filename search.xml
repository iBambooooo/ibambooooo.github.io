<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>百度云盘下载工具</title>
      <link href="/2018/11/22/%E7%99%BE%E5%BA%A6%E4%BA%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/11/22/%E7%99%BE%E5%BA%A6%E4%BA%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h2 id="大神的工具"><a href="#大神的工具" class="headerlink" title="大神的工具"></a>大神的工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://pandownload.com/</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>npm/yarn使用</title>
      <link href="/2018/11/15/npm:yarn%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/11/15/npm:yarn%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><ul><li>临时使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure><ul><li>持久使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ul><li>通过cnpm</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>使用官方镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><ul><li>查看npm源地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><ul><li><p>查看yarn源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config get registry</span><br></pre></td></tr></table></figure></li><li><p>修改源</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set registry &apos;https://registry.npm.taobao.org&apos;</span><br></pre></td></tr></table></figure><h2 id="npm和yarn-命令对比"><a href="#npm和yarn-命令对比" class="headerlink" title="npm和yarn 命令对比"></a>npm和yarn 命令对比</h2><table><thead><tr><th>npm 命令</th><th>Yarn 命令</th><th>备注</th></tr></thead><tbody><tr><td>npm install</td><td>yarn install</td><td>安装所有依赖包（依据package.json中的依赖配置参数）</td></tr><tr><td>(N/A)</td><td>yarn install –flat</td><td>单版本模式</td></tr><tr><td>(N/A)</td><td>yarn install –har</td><td>生成har文件，记录安装时网络请求性能</td></tr><tr><td>(N/A)</td><td>yarn install –no-lockfile</td><td>不读写lockfile方式</td></tr><tr><td>(N/A)</td><td>yarn install –pure-lockfile</td><td>不生成yarn.lock文件</td></tr><tr><td>npm install [package]</td><td>(N/A)</td><td>安装依赖</td></tr><tr><td>npm install –save [package]</td><td>yarn add [package]</td><td>添加生产模式依赖到项目</td></tr><tr><td>npm install –save-dev [package]</td><td>yarn add [package] [–dev/-D]</td><td>添加开发模式的依赖</td></tr><tr><td>(N/A)</td><td>yarn add [package] [–peer/-P]</td><td>对等模式添加依赖，发布/分享项目时的依赖</td></tr><tr><td>npm install –save-optional [package]</td><td>yarn add [package] [–optional/-O]</td><td>添加可选依赖包</td></tr><tr><td>npm install –save-exact [package]</td><td>yarn add [package] [–exact/-E]</td><td>精准添加某版本的包</td></tr><tr><td>(N/A)</td><td>yarn add [package] [–tilde/-T]</td><td>添加同一次版本的包，如指定版本为1.2.3，可接受1.2.x的其他版本，但不接受1.3.x的版本</td></tr><tr><td>npm install –global [package]</td><td>yarn global add [package]</td><td>添加全局包</td></tr><tr><td>npm rebuild</td><td>yarn install –force</td><td>重建</td></tr><tr><td>npm uninstall [package]</td><td>(N/A)</td><td>删除本地依赖包</td></tr><tr><td>npm uninstall –save [package]</td><td>yarn remove [package]</td><td>删除正式依赖包</td></tr><tr><td>npm uninstall –save-dev [package]</td><td>yarn remove [package]</td><td>删除开发依赖包</td></tr><tr><td>npm uninstall –save-optional [package]</td><td>yarn remove [package]</td><td>删除可选依赖包</td></tr><tr><td>npm cache clean</td><td>yarn cache clean</td><td>清除缓存</td></tr><tr><td>rm -rf node_modules &amp;&amp; npm install</td><td>yarn upgrade</td><td>更新包管理器自身</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git指定用户进行Clone</title>
      <link href="/2018/11/14/Git%E6%8C%87%E5%AE%9A%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8CClone/"/>
      <url>/2018/11/14/Git%E6%8C%87%E5%AE%9A%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8CClone/</url>
      <content type="html"><![CDATA[<h2 id="使用HTTPS协议"><a href="#使用HTTPS协议" class="headerlink" title="使用HTTPS协议"></a>使用HTTPS协议</h2><ul><li>指定用户名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://yourname @gitlab.dev/project/Project.git</span><br><span class="line"></span><br><span class="line">yourname - 指的是git的名字 不是邮箱 是用户名</span><br><span class="line">gitlab.dev/project/Project.git  - 克隆的http协议的仓库地址</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>指定用户名+密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone &apos;https://name:password@gitlab.dev/project/Project.git&apos;</span><br><span class="line"></span><br><span class="line">这种方式密码时明文 不安全</span><br></pre></td></tr></table></figure><hr><p>如果密码中有@需要编码 %40</p><hr>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mac使用homebrew安装指定版本的node</title>
      <link href="/2018/11/06/mac%E4%BD%BF%E7%94%A8homebrew%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACnode%20/"/>
      <url>/2018/11/06/mac%E4%BD%BF%E7%94%A8homebrew%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACnode%20/</url>
      <content type="html"><![CDATA[<p>选择这种安装方式，主要针对的是只安装了单一版本的node，没有通过nvm管理node，所以采取以下安装方式，虽然有点麻烦</p><h2 id="homebrew安装"><a href="#homebrew安装" class="headerlink" title="homebrew安装"></a>homebrew安装</h2><p>通过 brew -v 查看，如果有相关的版本号，说明安装成功，如果没有就需要安装homebrew</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="查找Homebrew中可安装的node版本"><a href="#查找Homebrew中可安装的node版本" class="headerlink" title="查找Homebrew中可安装的node版本"></a>查找Homebrew中可安装的node版本</h2><p>通过命令查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search node</span><br></pre></td></tr></table></figure></p><p>得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leafnode     node         node@0.10    node@4       node@6      nodeenv</span><br><span class="line">llnode       node-build   node@0.12    node@5       nodebrew     nodenv</span><br><span class="line"></span><br><span class="line">//@4 @5是版本号</span><br></pre></td></tr></table></figure></p><h2 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h2><p>安装之前必须先卸载之前的版本，以免发生冲突</p><p>卸载命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall node</span><br></pre></td></tr></table></figure></p><p>安装命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node@6</span><br></pre></td></tr></table></figure></p><h2 id="brew-link"><a href="#brew-link" class="headerlink" title="brew link"></a>brew link</h2><p>执行之前执行之前先unlink下,如果后边不跟版本号，默认安装的是最新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew link node</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew link node@6</span><br></pre></td></tr></table></figure><p>如果不错执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew link --overwrite --force node@6</span><br></pre></td></tr></table></figure><h2 id="查看node-版本"><a href="#查看node-版本" class="headerlink" title="查看node 版本"></a>查看node 版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>如果出现 <code>node command not fond</code>,打开<code>.bash_profile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export  PATH = &quot;/usr/local/opt/node/bin:$PATH&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android 签名</title>
      <link href="/2018/11/05/android%20APK%E5%8C%85%E8%BF%9B%E8%A1%8C%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8D%20/"/>
      <url>/2018/11/05/android%20APK%E5%8C%85%E8%BF%9B%E8%A1%8C%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8D%20/</url>
      <content type="html"><![CDATA[<h2 id="加固app"><a href="#加固app" class="headerlink" title="加固app"></a>加固app</h2><ul><li>加固地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dev.bangcle.com</span><br></pre></td></tr></table></figure><h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -keystore 证书名.keystore -signedjar 签名之后的文件.apk 需要签名的文件.apk  证书名</span><br></pre></td></tr></table></figure><p>另外需要注意的是，如果你的jdk版本在1.7以上，你在对apk签名时，需要加上这个参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-digestalg SHA1 -sigalg MD5withRSA</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入密钥库的密码短语: </span><br><span class="line">******</span><br><span class="line">生成keystore时设置的密码</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="查看签名信息"><a href="#查看签名信息" class="headerlink" title="查看签名信息"></a>查看签名信息</h4><ul><li>查看keystore的信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -keystore demo.keystore -alias mykey -v</span><br></pre></td></tr></table></figure><ul><li>查看keystore的公钥证书信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -keystore demo.keystore -alias mykey -rfc</span><br></pre></td></tr></table></figure><p>注：获取Base64格式的公钥证书，RFC 1421）</p><ul><li>查看apk的签名信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verify -verbose -certs &lt;your_apk_path.apk&gt;</span><br></pre></td></tr></table></figure><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Android签名机制：生成keystore、签名、查看签名信息。Android独有的安全机制，除了权限机制外，另外一个就是签名机制了。签名机制主要用在以下两个主要场合起到其作用：升级App和权限检查。</p><ul><li>升级App<br>用户在升级一款已经安装过的App时，如果程序的修改来自于同一来源，则允许升级安装，否则会提示签名不一致无法安装的提示。</li></ul><h2 id="生成keystore"><a href="#生成keystore" class="headerlink" title="生成keystore"></a>生成keystore</h2><p>mac可以用keytool命令生成一个私有密钥。在 Windows 上keytool命令放在 JDK 的 bin 目录中（比如C:\Program Files\Java\jdkx.x.x_x\bin），你可能需要在命令行中先进入那个目录才能执行此命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000</span><br></pre></td></tr></table></figure><p>生成的keystore在用户根目录下<br>my-release-key -证书名<br>10000  -有效期为10000天</p><p>这条命令会要求你输入密钥库（keystore）和对应密钥的密码，然后设置一些发行相关的信息。最后它会生成一个叫做my-release-key.keystore的密钥库文件。</p><p>在运行上面这条语句之后，密钥库里应该已经生成了一个单独的密钥，有效期为 10000 天。–alias 参数后面的别名是你将来为应用签名时所需要用到的，所以记得记录这个别名。</p><p>注意：请记得妥善地保管好你的密钥库文件，一般不要上传到版本库或者其它的地方。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ keytool -genkey -v -alias android -keyalg RSA -validity 20000 -keystore /Users/czq/android.keystore</span><br><span class="line">输入密钥库口令:</span><br><span class="line">再次输入新口令:</span><br><span class="line">您的名字与姓氏是什么?</span><br><span class="line">  [Unknown]:  Tester</span><br><span class="line">您的组织单位名称是什么?</span><br><span class="line">  [Unknown]:  DCloud</span><br><span class="line">您的组织名称是什么?</span><br><span class="line">  [Unknown]:  Development</span><br><span class="line">您所在的城市或区域名称是什么?</span><br><span class="line">  [Unknown]:  广州</span><br><span class="line">您所在的省/市/自治区名称是什么?</span><br><span class="line">  [Unknown]:  广东</span><br><span class="line">该单位的双字母国家/地区代码是什么?</span><br><span class="line">  [Unknown]:  CN</span><br><span class="line">CN=Tester, OU=DCloud, O=Development, L=广州, ST=广东, C=CN是否正确?</span><br><span class="line">  [否]:  是</span><br><span class="line"></span><br><span class="line">正在为以下对象生成 2,048 位RSA密钥对和自签名证书 (SHA256withRSA) (有效期为 20,000 天):</span><br><span class="line">     CN=Tester, OU=DCloud, O=Development, L=广州, ST=广东, C=CN</span><br><span class="line">输入 &lt;android&gt; 的密钥口令</span><br><span class="line">    (如果和密钥库口令相同, 按回车):</span><br><span class="line">[正在存储/Users/czq/android.keystore]</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React Native项目升级与降级</title>
      <link href="/2018/11/01/React%20Native%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7%E4%B8%8E%E9%99%8D%E7%BA%A7/"/>
      <url>/2018/11/01/React%20Native%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7%E4%B8%8E%E9%99%8D%E7%BA%A7/</url>
      <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/7a365c142a23" target="_blank" rel="noopener">https://www.jianshu.com/p/7a365c142a23</a></p>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 模拟网络环境测试的方法</title>
      <link href="/2018/10/31/iOS%20%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E6%B5%8B%E8%AF%95%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2018/10/31/iOS%20%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E6%B5%8B%E8%AF%95%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/99611d342fa1" target="_blank" rel="noopener">https://www.jianshu.com/p/99611d342fa1</a></p><p>//iOS开发-调试网络限速（真机和模拟器）<br><a href="https://blog.csdn.net/Zhai19931004/article/details/52127685" target="_blank" rel="noopener">https://blog.csdn.net/Zhai19931004/article/details/52127685</a></p><p>100%Loss是全丢包,</p><p>3G这个就不用说了吧</p><p>DSL是电话线上网,</p><p>Edge是2G网络，</p><p>High Latency DNS是高延迟，</p><p>Very Bad Network是网络状况不稳定。</p>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WireShark抓包</title>
      <link href="/2018/10/31/WireShark%E6%8A%93%E5%8C%85/"/>
      <url>/2018/10/31/WireShark%E6%8A%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>rvictl -s<br><a href="http://ios.jobbole.com/93159/" target="_blank" rel="noopener">http://ios.jobbole.com/93159/</a><br><a href="https://testerhome.com/topics/4714" target="_blank" rel="noopener">https://testerhome.com/topics/4714</a><br><a href="https://www.cnblogs.com/TankXiao/archive/2012/10/10/2711777.html" target="_blank" rel="noopener">https://www.cnblogs.com/TankXiao/archive/2012/10/10/2711777.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-native 打包apk</title>
      <link href="/2018/10/30/react-native%E6%89%93%E5%8C%85apk/"/>
      <url>/2018/10/30/react-native%E6%89%93%E5%8C%85apk/</url>
      <content type="html"><![CDATA[<p> react-native bundle –entry-file index.js –platform android –dev false –bundle-output ./android/app/src/main/assets/index.android.jsbundle –assets-dest ./android/app/src/main/res/</p><hr><p>React-native bundle –entry-file index.js –bundle-output ./android/app/src/main/assets/index.android.jsbundle –platform android –assets-dest ./android/app/src/main/res/ –dev false</p><hr><p>android.enableAapt2=false</p><p>How to resolve bug of:uncompiled PNG file passed as argument. Must be compiled first into .flat file.</p><p>android.enableAapt2=false</p><p>Original is here. The version qualifier may be implied.<br>这个报错<br><a href="https://www.jianshu.com/p/acebc6b14d16" target="_blank" rel="noopener">https://www.jianshu.com/p/acebc6b14d16</a></p>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mac 相关操作</title>
      <link href="/2018/10/29/mac%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/10/29/mac%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>[toc]</p><h2 id="安装任何来源的文件"><a href="#安装任何来源的文件" class="headerlink" title="安装任何来源的文件"></a>安装任何来源的文件</h2><p>「xxx.app已损坏,打不开.你应该将它移到废纸篓」，并非你安装的软件已损坏，而是Mac系统的安全设置问题，因为这些应用都是破解或者汉化的,那么解决方法就是临时改变Mac系统安全设置。<br>出现这个问题的解决方法：</p><p>修改系统配置：系统偏好设置… -&gt; 安全性与隐私。修改为任何来源</p><p>如果没有这个选项的话（macOS Sierra 10.12）,打开终端执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="dock-隐藏模式下弹出的时间调整-弹出前延时速度"><a href="#dock-隐藏模式下弹出的时间调整-弹出前延时速度" class="headerlink" title="dock 隐藏模式下弹出的时间调整  弹出前延时速度"></a>dock 隐藏模式下弹出的时间调整  弹出前延时速度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.Dock autohide-delay -int 0 &amp;&amp; killall Dock</span><br></pre></td></tr></table></figure><ul><li>弹出及隐藏的过程的动画的速度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock autohide-time-modifier -int 0; killall Dock</span><br></pre></td></tr></table></figure><p>以上命令将时间设置为0，将无动画效果，瞬间显示Dock栏。</p><ul><li>若使用动画过渡时间（这里0.3s）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock autohide-time-modifier -float 0.3;killall Dock</span><br></pre></td></tr></table></figure><p>总结一下就是当要设置为0值时，需要用int，用小数时需要用<code>float</code>。<br><code>autohide-delay</code>和<code>autohide-time-modifier</code>分别控制弹出前的延时和弹出动画的时间。</p><h2 id="mac-常用快捷键"><a href="#mac-常用快捷键" class="headerlink" title="mac 常用快捷键"></a>mac 常用快捷键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">* 按 Command + shift + . 可以显示隐藏系统文件</span><br><span class="line"></span><br><span class="line">* 按住 ⌘ 键，可以拖动非焦点窗口同时不激活她</span><br><span class="line"></span><br><span class="line">* 创建文件快捷方式：按住Command+option拖动文件或者程序到桌面</span><br><span class="line"></span><br><span class="line">* Shift-Command-C 打开“电脑”窗口。</span><br><span class="line"></span><br><span class="line">* Shift-Command-D 打开“桌面”文件夹。</span><br><span class="line"></span><br><span class="line">* Command + control + F   最大化  最小化</span><br><span class="line"></span><br><span class="line">* ⌃ ＋ ⌘ ＋ space 可以输入emoji，图片字符，特殊符号（使用率较高）</span><br><span class="line"></span><br><span class="line">* Command + k 连接服务器</span><br></pre></td></tr></table></figure><p>注：<code>按 Command + shift + . 可以显示隐藏系统文件</code> 这个在高版本适用，os低版本可以使用<br>显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder</span><br></pre></td></tr></table></figure></p><p>隐藏<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder</span><br></pre></td></tr></table></figure></p><h2 id="Mac-OS-Linux命令查询网络端口占用情况"><a href="#Mac-OS-Linux命令查询网络端口占用情况" class="headerlink" title="Mac OS/Linux命令查询网络端口占用情况"></a>Mac OS/Linux命令查询网络端口占用情况</h2><ul><li>netstat命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep 3306</span><br></pre></td></tr></table></figure><p>3306替换成需要grep的端口号</p><ul><li>lsof命令<br>通过list open file命令可以查看到当前打开文件，在linux中所有事物都是以文件形式存在，包括网络连接及硬件设备。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:80</span><br></pre></td></tr></table></figure></li></ul><p>-i参数表示网络链接，:80指明端口号，该命令会同时列出PID，方便kill<br>查看所有进程监听的端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i -P | grep -i “listen”</span><br></pre></td></tr></table></figure></p><ul><li>查看端口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8001</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">node 1577 relign 24u IPv4 0xf4c52151f2395907 0t0 TCP *:vcom-tunnel (LISTEN)</span><br></pre></td></tr></table></figure></p><p>输出各列信息的意义如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">COMMAND 进程的名称,也就是启动的程序名</span><br><span class="line">PID 进程的ID</span><br><span class="line">USER 进程属主的名字</span><br><span class="line">FD 文件描述符,应用程序通过文件描述符识别该文件.如CWD,txt等</span><br><span class="line">TYPE 文件的类型,如DIR、REG等</span><br><span class="line">DEVICE 指定磁盘的名称</span><br><span class="line">SIZE 文件的大小</span><br><span class="line">NODE 索引节点(文件在磁盘上的标识)</span><br><span class="line">NAME 打开文件的确切名称</span><br></pre></td></tr></table></figure></p><ul><li>关闭进程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 1577 [PID]</span><br></pre></td></tr></table></figure><p>终止一个进程或终止一个正在运行的程序,一般是通过kill、killall、pkill、xkill等进行.比如一个程序已经死掉,但又不能退出,这时就应该考虑应用这些</p><ul><li>killall</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall通过程序的名字,直接杀死所有进程.</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FlatList数据源更新问题</title>
      <link href="/2018/10/24/Flastlist%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0UI%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/24/Flastlist%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0UI%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<ul><li>PureComponent 浅对比</li></ul><p>如果FlatList组件继承自PureComponent，当数据源更新的时候，flatlist UI不会刷新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [];</span><br><span class="line">list = list.concat(data);</span><br><span class="line">list.push(newdata);  blacklists.push(newData);</span><br><span class="line">this.setState(&#123;</span><br><span class="line">    listViewData:list,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>realm</title>
      <link href="/2018/09/19/realm/"/>
      <url>/2018/09/19/realm/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>realm 安装对node版本有限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Node: 4.0 &lt;= version &lt; 7.0</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="安装realm报错"><a href="#安装realm报错" class="headerlink" title="安装realm报错"></a>安装realm报错</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">make: *** [Release/obj.target/realm/src/node/node_init.o] Error 1</span><br><span class="line">gyp ERR! build error</span><br><span class="line">gyp ERR! stack Error: `make` failed with exit code: 2</span><br><span class="line">gyp ERR! stack     at ChildProcess.onExit (/Users/30san/.nvm/versions/node/v10.9.0/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:262:23)</span><br><span class="line">gyp ERR! stack     at ChildProcess.emit (events.js:182:13)</span><br><span class="line">gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:239:12)</span><br><span class="line">gyp ERR! System Darwin 17.7.0</span><br><span class="line">gyp ERR! command &quot;/Users/30san/.nvm/versions/node/v10.9.0/bin/node&quot; &quot;/Users/30san/.nvm/versions/node/v10.9.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;build&quot; &quot;--fallback-to-build&quot; &quot;--module=/Users/30san/Desktop/DragonMail/node_modules/realm/compiled/node-v64_darwin_x64/realm.node&quot; &quot;--module_name=realm&quot; &quot;--module_path=/Users/30san/Desktop/DragonMail/node_modules/realm/compiled/node-v64_darwin_x64&quot; &quot;--napi_version=3&quot; &quot;--node_abi_napi=napi&quot; &quot;--napi_build_version=0&quot; &quot;--node_napi_label=node-v64&quot;</span><br><span class="line">gyp ERR! cwd /Users/30san/Desktop/DragonMail/node_modules/realm</span><br><span class="line">gyp ERR! node -v v10.9.0</span><br><span class="line">gyp ERR! node-gyp -v v3.8.0</span><br><span class="line">gyp ERR! not ok</span><br><span class="line">node-pre-gyp ERR! build error</span><br><span class="line">node-pre-gyp ERR! stack Error: Failed to execute &apos;/Users/30san/.nvm/versions/node/v10.9.0/bin/node /Users/30san/.nvm/versions/node/v10.9.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/Users/30san/Desktop/DragonMail/node_modules/realm/compiled/node-v64_darwin_x64/realm.node --module_name=realm --module_path=/Users/30san/Desktop/DragonMail/node_modules/realm/compiled/node-v64_darwin_x64 --napi_version=3 --node_abi_napi=napi --napi_build_version=0 --node_napi_label=node-v64&apos; (1)</span><br><span class="line">node-pre-gyp ERR! stack     at ChildProcess.&lt;anonymous&gt; (/Users/30san/Desktop/DragonMail/node_modules/node-pre-gyp/lib/util/compile.js:83:29)</span><br><span class="line">node-pre-gyp ERR! stack     at ChildProcess.emit (events.js:182:13)</span><br><span class="line">node-pre-gyp ERR! stack     at maybeClose (internal/child_process.js:961:16)</span><br><span class="line">node-pre-gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:250:5)</span><br><span class="line">node-pre-gyp ERR! System Darwin 17.7.0</span><br><span class="line">node-pre-gyp ERR! command &quot;/Users/30san/.nvm/versions/node/v10.9.0/bin/node&quot; &quot;/Users/30san/Desktop/DragonMail/node_modules/.bin/node-pre-gyp&quot; &quot;install&quot; &quot;--fallback-to-build&quot;</span><br><span class="line">node-pre-gyp ERR! cwd /Users/30san/Desktop/DragonMail/node_modules/realm</span><br><span class="line">node-pre-gyp ERR! node -v v10.9.0</span><br><span class="line">node-pre-gyp ERR! node-pre-gyp -v v0.11.0</span><br><span class="line">node-pre-gyp ERR! not ok</span><br><span class="line">Failed to execute &apos;/Users/30san/.nvm/versions/node/v10.9.0/bin/node /Users/30san/.nvm/versions/node/v10.9.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js build--fallback-to-build --module=/Users/30san/Desktop/DragonMail/node_modules/realm/compiled/node-v64_darwin_x64/realm.node --module_name=realm --module_path=/Users/30san/Desktop/DragonMail/node_modules/realm/compiled/node-v64_darwin_x64 --napi_version=3 --node_abi_napi=napi --napi_build_version=0 --node_napi_label=node-v64&apos; (1)</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! realm@2.15.3 install: `node-pre-gyp install --fallback-to-build`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the realm@2.15.3 install script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /Users/30san/.npm/_logs/2018-09-19T07_20_05_725Z-debug.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React Native 性能优化</title>
      <link href="/2018/09/10/React%20Native%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2018/09/10/React%20Native%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="render-优化"><a href="#render-优化" class="headerlink" title="render 优化"></a>render 优化</h3><h4 id="使用-PureComponent"><a href="#使用-PureComponent" class="headerlink" title="使用 PureComponent"></a>使用 PureComponent</h4><p>React Native 0.43.0 以上版本，使用了 React 16.x，自带优化光环，所以推荐使用 PureComponent。</p><p>如：<code>export default class NewsView extends PureComponent { }</code></p><p>见 <a href="https://github.com/Kennytian/learning-react-native/blob/master/advanced/custom-components.md#4-组件开发优化" target="_blank" rel="noopener">PureComponent vs Component</a></p><a id="more"></a><h4 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h4><p>如果 React Native 项目相对较早，也有优化方法：</p><ol><li>shouldComponentUpdate 默认返回 true，就是触发该方法，每次都重新渲染页面。想要优化，就要想办法尽可能的返回 false。那么怎么计算得出 false 呢，请看如下代码：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; is &#125; <span class="keyword">from</span> <span class="string">"immutable"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deepCompare</span>(<span class="params">instance, nextProps, nextState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> thisProps = instance.props || &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> thisState = instance.state || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  nextProps = nextProps || &#123;&#125;;</span><br><span class="line">  nextState = nextState || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="built_in">Object</span>.keys(thisProps).length !== <span class="built_in">Object</span>.keys(nextProps).length ||</span><br><span class="line">    <span class="built_in">Object</span>.keys(thisState).length !== <span class="built_in">Object</span>.keys(nextState).length</span><br><span class="line">  ) &#123;</span><br><span class="line">    __DEV__ &amp;&amp; <span class="built_in">console</span>.debug(<span class="string">"deepCompare length diff"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      thisProps[key] !== nextProps[key] ||</span><br><span class="line">      !is(thisProps[key], nextProps[key])</span><br><span class="line">    ) &#123;</span><br><span class="line">      __DEV__ &amp;&amp; <span class="built_in">console</span>.debug(<span class="string">"deepCompare props diff(key):"</span>, key);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      thisState[key] !== nextState[key] ||</span><br><span class="line">      !is(thisState[key], nextState[key])</span><br><span class="line">    ) &#123;</span><br><span class="line">      __DEV__ &amp;&amp; <span class="built_in">console</span>.debug(<span class="string">"deepCompare state diff(key):"</span>, key);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面中调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">  <span class="keyword">return</span> deepCompare(<span class="keyword">this</span>, nextProps, nextState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="列表优化"><a href="#列表优化" class="headerlink" title="列表优化"></a>列表优化</h4><ul><li>在列表的 item 上设置一个 key，这个 key 必须是唯一，最后不要用 index（用数据库里的 ID）, 因为你如果删除一条记录，index 就都变了。</li></ul><h4 id="JSX-代码优化"><a href="#JSX-代码优化" class="headerlink" title="JSX 代码优化"></a>JSX 代码优化</h4><ul><li><p>推荐</p><ul><li>在 render() 里， 将一些三元运算符，条件运算等计算的逻辑抽离到 render 最上面。一是可以复用，二是这类代码比较多了，更方便抽象到独立的方法中。</li><li>如：<code>const prizePoolMoneyText = this.props.prizePoolMoney &gt; 0 ?</code>奖池${formatMoneyText(this.props.prizePoolMoney)}<code>: &#39;奖池过亿&#39;;</code> ，使用时 <code>&lt;Text&gt;{prizePoolMoneyText}&lt;/Text&gt;</code></li></ul></li><li><p>不推荐</p><ul><li>正好与上面相反，即：将一些三元运算符，条件运算等计算写在 JSX 代码里。</li><li>如：<code>&lt;Text&gt;{this.props.prizePoolMoney &gt; 0 ?</code>奖池${formatMoneyText(this.props.prizePoolMoney)}<code>: &#39;奖池过亿&#39;}&lt;/Text&gt;</code></li></ul></li></ul><h3 id="事件优化"><a href="#事件优化" class="headerlink" title="事件优化"></a>事件优化</h3><ul><li><p>推荐使用：</p><ul><li>在构造函数里 <code>this.handleChange = this.handleChange.bind(this);</code></li><li>在类里 <code>handleChange = () =&gt; { };</code></li><li>柯里化事件绑定 <code>onRouteToPress = name =&gt; () =&gt; this.props.routeTo(name, { a: &#39;1&#39;, b: &#39;2&#39; }); // 柯里化事件绑定</code>，使用方法<code>this.onRouteToPress(&#39;HowToJoin&#39;)</code></li></ul></li><li><p>不推荐使用：</p><ul><li>属性里 <code>onChange={this.handleChange.bind(this)}</code></li><li>属性里 <code>onChange={e =&gt; this.handleChange(e)}</code></li></ul><p><em>原因：不推荐的两种方式，会在每次执行 render 方法时重新分配资源</em></p></li></ul><h3 id="安装包大小优化"><a href="#安装包大小优化" class="headerlink" title="安装包大小优化"></a>安装包大小优化</h3><ol><li>如果 APP 里的小图标没有阴影和渐变，建议用 iconfont 来代替图片 icon。</li><li>如果 APP 不用考虑 x86 的 Android 设备，包会缩小 40%左右。以我们 100 万+用户后台统计数据，x86 用户不到 0.1%，所以可以忽略不计。</li><li>尽可能复用 React Native 项目自带的 lib，少重复添加 lib。</li><li>图片可以转成 WebP 格式，它既支持有损压缩又支持无损压缩的图片文件格式。根据官方介绍其无损压缩后的 WebP 比 PNG 文件少了 45％的文件大小，即使 PNG 文件经过压缩工具压缩之后，WebP 还可以减少 28％的文件大小，这可以大大提高移动端的图片加载速度。</li></ol><h3 id="UI-响应优化"><a href="#UI-响应优化" class="headerlink" title="UI 响应优化"></a>UI 响应优化</h3><ul><li>在对动画中途无取消要求或者其他中途回调要求的，比如局部组件特定显示隐藏动画等。我们可以在调用 setState 之前，调用 LayoutAnimation 方法。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  showDetail: !<span class="keyword">this</span>.state.showDetail</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>InteractionManager 可以将一些耗时较长的工作安排到所有互动或动画完成之后再进行。这样可以保证 JavaScript 动画的流畅运行，应用这样可以安排一个任务在交互和动画完成之后执行。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InteractionManager.runAfterInteractions(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>._doSearch(tab.i);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>而对于某些状态更新，<code>setNativeProps</code> 方法可以让我们直接修改原生视图组件的属性，而不用通过 setState 来重新渲染结构，这样能使整个组件响应速度变快</li></ul><h3 id="请求时机优化"><a href="#请求时机优化" class="headerlink" title="请求时机优化"></a>请求时机优化</h3><blockquote><p>网络数据请求，建议放在 <code>componentDidMount</code> 里，因为这时的页面已经渲染结束，至少让用户可以看点内容(<code>componentWillMount</code> -&gt; <code>render</code>)，然后再去请求数据。注意：网络请求回来的数据 setState 或 mapStateToProps，会触发一系列事件：<code>shouldComponentUpdate</code> -&gt; <code>componentWillUpdate</code> -&gt; <code>render</code> -&gt; <code>componentDidUpdate</code>。</p></blockquote><blockquote><p>更多官方说明：<a href="https://facebook.github.io/react/docs/react-component.html#componentdidmount" target="_blank" rel="noopener">https://facebook.github.io/react/docs/react-component.html#componentdidmount</a></p></blockquote><h3 id="样式优化："><a href="#样式优化：" class="headerlink" title="样式优化："></a>样式优化：</h3><p>尽量使用单个样式，减少使用数组样式</p><ul><li>推荐：<br><code>const textStyle = StyleSheet.flatten([styles.baseText, extraTextStyle]); &lt;Text style={textStyle}&gt;</code></li></ul><p>如果有多个样式（数组），建议使用 StyleSheet.flatten 将样式「打平」，然后赋给控件的 style 里。</p><ul><li>可以：<ul><li><code>&lt;Text style={[styles.baseText, extraTextStyle]}&gt;</code></li><li><code>&lt;Text style={styles.baseText}&gt;</code></li></ul></li></ul><p>以上两种写法都是允许</p><ul><li>禁止：<br><code>&lt;View style={[styles.rowWrapper]}&gt;</code><br>如果只有一个格式，禁止放到数组里，因为这会生成一个多余的数组对象。下面是用 Jest 生成的控件解析快照(Jest Snapshot)，见：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Text</span><br><span class="line">    accessible=&#123;true&#125;</span><br><span class="line">    allowFontScaling=&#123;false&#125;</span><br><span class="line">    ellipsizeMode=&quot;tail&quot;</span><br><span class="line">    style=&#123;</span><br><span class="line">      Array [</span><br><span class="line">        Object &#123;</span><br><span class="line">          &quot;marginTop&quot;: 15,</span><br><span class="line">          &quot;textAlign&quot;: &quot;center&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &gt;</span><br></pre></td></tr></table></figure><h3 id="禁止这么做"><a href="#禁止这么做" class="headerlink" title="禁止这么做"></a>禁止这么做</h3><ol><li>禁止在 <code>shouldComponentUpdate</code>、<code>componentWillUpdate</code>、<code>render</code>、<code>componentDidUpdate</code> 修改 <code>state</code> 或修改 <code>props</code> ，原因是这样会循环触发，最后 APP 会报错或崩溃。</li></ol>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-native-vector-icons自定义图库</title>
      <link href="/2018/09/07/react-native-vector-icons/"/>
      <url>/2018/09/07/react-native-vector-icons/</url>
      <content type="html"><![CDATA[<h2 id="react-native-vector-icons安装"><a href="#react-native-vector-icons安装" class="headerlink" title="react-native-vector-icons安装"></a>react-native-vector-icons安装</h2><p> react-native图标库，使用起来简单高效，其中内置市面上大部分开源的图标库。<a href="https://github.com/oblador/react-native-vector-icons" target="_blank" rel="noopener">react-native-vector-icons地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//安装</span><br><span class="line">npm install --save react-native-vector-icons</span><br><span class="line"></span><br><span class="line">//link到原生</span><br><span class="line">react-native link react-native-vector-icons</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="使用阿里矢量图标库iconfont的使用"><a href="#使用阿里矢量图标库iconfont的使用" class="headerlink" title="使用阿里矢量图标库iconfont的使用"></a>使用阿里矢量图标库iconfont的使用</h2><p>字体图库的优点:</p><ol><li>基于Text组件来显示，加载速度快</li><li>可以设置字体样式来改变图标的大小，颜色</li><li>矢量图标，放大缩小不失真</li><li>兼容性好，适用于各式浏览器</li><li>设计简单，图标库丰富，如FontAwesome，iconfont</li><li>最重要的一点，不会像图片那样由于一点小小的改动就换来换去，我们直接修改字体样式就行了</li></ol><ul><li><h3 id="上传或者寻找icon"><a href="#上传或者寻找icon" class="headerlink" title="上传或者寻找icon"></a>上传或者寻找icon</h3></li></ul><p>使用阿里的图标库<a href="http://iconfont.cn/" target="_blank" rel="noopener">http://iconfont.cn/</a><br>选好自己的icon，添加到项目，下载至本地<br><img src="/2018/09/07/react-native-vector-icons/01.png" alt=""></p><blockquote><p>这里有一点要注意，必须是svg图</p></blockquote><p>下载后的文件目录，包含这些文件</p><p><img src="/2018/09/07/react-native-vector-icons/02.png" alt=""></p><p>  iconfont.ttf 是要使用的字体图库<br>  iconfont.svg 用来生成json</p><p>由于使用的时候，iconfont的字体都是16进制的，为了使用方便，我们把16进制的转成10进制，映射生成json或者js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Icon  name = &quot;图片名&quot; /&gt;</span><br></pre></td></tr></table></figure><p>这里采用脚本生成js<br> <code>iconfont_mapper.sh</code>脚本源码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> if [ $# != 1 ] ; then</span><br><span class="line"></span><br><span class="line">echo &quot;usage: $0 iconfont.svg(your svg file name)  &quot;</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#OutputFile path,you can customize your path</span><br><span class="line">OutputFileName=`echo iconfont.json`</span><br><span class="line"></span><br><span class="line">mapper=` awk &apos;&#123; if($0 ~ /glyph-name/) print $0;  if($0 ~ /unicode/)  print $0&quot;|split|&quot; &#125;&apos;  $1| tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;| awk &apos;&#123;print $0&#125;&apos;  RS=&apos;\=&apos;| tr &quot;\n\&quot;&amp;#;&quot; &quot; &quot;| awk  &apos;&#123; if ($1!=&quot;split&quot;&amp;&amp;$1!=&quot;&quot;)&#123; printf (&quot;\&quot;&quot;$3&quot;\&quot;:&quot;); printf ($5&quot;,&quot;); print &quot;\r &quot; &#125;&#125;&apos; RS=&quot;|split|&quot; | sed &quot;s/-/_/g&quot;`</span><br><span class="line"></span><br><span class="line">rm $OutputFileName</span><br><span class="line">echo &quot;&#123;&quot; &gt;&gt; $OutputFileName</span><br><span class="line">echo $mapper &gt;&gt; $OutputFileName</span><br><span class="line">echo &quot;&#125;&quot; &gt;&gt; $OutputFileName</span><br></pre></td></tr></table></figure><blockquote><p>只需要拷贝下来脚本源码，后缀为.sh<br>使用的时候，你想要json生成在什么地方就cd到什么地方，比如<code>cd desktop</code>，然后在终端先拖进脚本文件然后再拖进上面生成的svg文件,就会在桌面生成json文件</p></blockquote><p><img src="/2018/09/07/react-native-vector-icons/03.png" alt=""></p><ul><li><h3 id="mac下如果报错Permission-denied就先修改文件权限"><a href="#mac下如果报错Permission-denied就先修改文件权限" class="headerlink" title="mac下如果报错Permission denied就先修改文件权限"></a>mac下如果报错Permission denied就先修改文件权限</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 iconfont_mapper.sh</span><br></pre></td></tr></table></figure><p>生成的json文件是这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &quot;fasong&quot;:58908,  </span><br><span class="line">     &quot;jinlingyingcaiwangtubiao97&quot;:59270,</span><br><span class="line">     &quot;xiaojiantou&quot;:58904,</span><br><span class="line">     &quot;xiaojiantou1&quot;:58892,</span><br><span class="line">     &quot;cha&quot;:58917,</span><br><span class="line">     &quot;iconset0121&quot;:58900,</span><br><span class="line">     &quot;lajixiang_copy&quot;:58991,</span><br><span class="line">     &quot;cha1&quot;:58973,</span><br><span class="line">     &quot;youjian&quot;:58952,</span><br><span class="line">     &quot;caogaoxiang&quot;:58881,</span><br><span class="line">     &quot;yidong&quot;:58920</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p><p>数字就是图片16进制转成对应的10进制，图片名不太好对应就去网站，选择<code>Font class</code>复制代码后，去调<code>icon-</code>前缀<br><img src="/2018/09/07/react-native-vector-icons/04.png" alt=""></p><p>使用就是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Icon name = &apos;caogaoxiang&apos;&gt;</span><br></pre></td></tr></table></figure><h2 id="项目中使用"><a href="#项目中使用" class="headerlink" title="项目中使用"></a>项目中使用</h2><h3 id="android端的配置"><a href="#android端的配置" class="headerlink" title="android端的配置"></a>android端的配置</h3><ul><li><h3 id="执行react-native-link命令后-Android目录下这个库已经自动为把字体文件引入到app-src-main中并创建了assets-fonts的目录"><a href="#执行react-native-link命令后-Android目录下这个库已经自动为把字体文件引入到app-src-main中并创建了assets-fonts的目录" class="headerlink" title="执行react-native link命令后,Android目录下这个库已经自动为把字体文件引入到app/src/main中并创建了assets/fonts的目录"></a>执行<code>react-native link</code>命令后,Android目录下这个库已经自动为把字体文件引入到<code>app/src/main</code>中并创建了<code>assets/fonts</code>的目录</h3></li></ul><p><img src="/2018/09/07/react-native-vector-icons/05.png" alt=""></p><blockquote><p>如果不小心手动改过，一定要记得安卓的目录必须是小写的<code>font</code>，不然会出现图片找不到<br><img src="/2018/09/07/react-native-vector-icons/10.png" alt=""></p></blockquote><ul><li><h3 id="在android-app-build-gradle文件添加"><a href="#在android-app-build-gradle文件添加" class="headerlink" title="在android/app/build.gradle文件添加"></a>在<code>android/app/build.gradle</code>文件添加</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//图标引入 Iconfont.ttf 就是在iconfont.cn站生成的字体图库文件</span><br><span class="line"></span><br><span class="line">project.ext.vectoricons = [</span><br><span class="line">    iconFontNames: [ &apos;Iconfont.ttf&apos; ] // Name of the font files you want to copy</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">// 如果只是使用react-native-vector-icons中自带的图库，只添加下面这行就行了，上面那段配置可以不写</span><br><span class="line">apply from: &quot;../../node_modules/react-native-vector-icons/fonts.gradle&quot;</span><br></pre></td></tr></table></figure><ul><li><h3 id="配置-android-settings-gradle"><a href="#配置-android-settings-gradle" class="headerlink" title="配置 android/settings.gradle"></a>配置 android/settings.gradle</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &apos;:react-native-vector-icons&apos;</span><br><span class="line">project(&apos;:react-native-vector-icons&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/react-native-vector-icons/android&apos;)</span><br></pre></td></tr></table></figure><ul><li><h3 id="配置android-app-build-gradle"><a href="#配置android-app-build-gradle" class="headerlink" title="配置android/app/build.gradle"></a>配置android/app/build.gradle</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ependencies &#123;</span><br><span class="line">    compile project(&apos;:react-native-vector-icons&apos;) //添加</span><br><span class="line">    compile fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])</span><br><span class="line">    compile &quot;com.android.support:appcompat-v7:23.0.1&quot;</span><br><span class="line">    compile &quot;com.facebook.react:react-native:+&quot;  // From node_modules</span><br><span class="line">    compile project(&apos;:react-native-navigation&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="配置-android-app-src-main-java-com-xxxx-MainApplication-java"><a href="#配置-android-app-src-main-java-com-xxxx-MainApplication-java" class="headerlink" title="配置 android/app/src/main/java/com/xxxx/MainApplication.java"></a>配置 android/app/src/main/java/com/xxxx/MainApplication.java</h3><img src="/2018/09/07/react-native-vector-icons/14.png" alt=""></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"> protected List&lt;ReactPackage&gt; getPackages() &#123;</span><br><span class="line">   return Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">       new MainReactPackage(),</span><br><span class="line">         new VectorIconsPackage(),</span><br><span class="line">         new SplashScreenReactPackage(),</span><br><span class="line">       // 国际化</span><br><span class="line">       new RNI18nPackage()</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如果多次操作会有导入的库重复，android会报如下类似的错<br><img src="/2018/09/07/react-native-vector-icons/15.png" alt=""></p><h3 id="iOS端的配置"><a href="#iOS端的配置" class="headerlink" title="iOS端的配置"></a>iOS端的配置</h3><ul><li><h3 id="xcode检查有没有把库链接进去"><a href="#xcode检查有没有把库链接进去" class="headerlink" title="xcode检查有没有把库链接进去"></a>xcode检查有没有把库链接进去</h3><p><img src="/2018/09/07/react-native-vector-icons/11.png" alt=""><br><img src="/2018/09/07/react-native-vector-icons/12.png" alt=""></p></li><li><h3 id="运行react-native-link命令后iOS工程目录下info-plist文件中多了一行Fonts-provided-by-application，也可以手动配置，需要手动把react-native-vector-icons中所有字体全部加进来，如下："><a href="#运行react-native-link命令后iOS工程目录下info-plist文件中多了一行Fonts-provided-by-application，也可以手动配置，需要手动把react-native-vector-icons中所有字体全部加进来，如下：" class="headerlink" title="运行react-native link命令后iOS工程目录下info.plist文件中多了一行Fonts provided by application，也可以手动配置，需要手动把react-native-vector-icons中所有字体全部加进来，如下："></a>运行<code>react-native link</code>命令后iOS工程目录下<code>info.plist</code>文件中多了一行<code>Fonts provided by application</code>，也可以手动配置，需要手动把<code>react-native-vector-icons</code>中所有字体全部加进来，如下：</h3><p><img src="/2018/09/07/react-native-vector-icons/06.png" alt=""></p></li><li><h3 id="需要把自己生成的iconfont-ttf拖进项目不然会报这个错"><a href="#需要把自己生成的iconfont-ttf拖进项目不然会报这个错" class="headerlink" title="需要把自己生成的iconfont.ttf拖进项目不然会报这个错"></a>需要把自己生成的iconfont.ttf拖进项目不然会报这个错</h3><p><img src="/2018/09/07/react-native-vector-icons/07.png" alt=""><br>在项目根目录下把iconfont.ttf拖进来，必须是项目真实的font文件夹，在xcode中<code>new group</code>建的文件夹不得行（new group夹的文件夹在finder中不会生成对应的文件夹，只是xcode的文件目录形式,<br><img src="/2018/09/07/react-native-vector-icons/08.png" alt=""><br><img src="/2018/09/07/react-native-vector-icons/09.png" alt=""></p></li><li><h3 id="RN代码实现"><a href="#RN代码实现" class="headerlink" title="RN代码实现"></a>RN代码实现</h3><p>创建代码实现文件<br><img src="/2018/09/07/react-native-vector-icons/13.png" alt=""></p></li></ul><p><code>index.js</code> 实现的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import createIconSet from &apos;react-native-vector-icons/lib/create-icon-set&apos;;</span><br><span class="line">import glyphMap from &apos;./Iconfont.json&apos;;</span><br><span class="line"></span><br><span class="line">// glyphMap, fontFamily, fontFile三个参数，注意看react-native-vector-icons官方文档中方法注释，</span><br><span class="line">// Android中fontFamily可以随便写，iOS必须是正确的名字否则运行报错，iOS可以直接双击iconfont.ttf打开看字体实际叫什么名字</span><br><span class="line">const iconSet = createIconSet(glyphMap, &apos;iconfont&apos;, &apos;Iconfont.ttf&apos;);</span><br><span class="line"></span><br><span class="line">export default iconSet;</span><br><span class="line"></span><br><span class="line">export const Button = iconSet.Button;</span><br><span class="line">export const TabBarItem = iconSet.TabBarItem;</span><br><span class="line">export const TabBarItemIOS = iconSet.TabBarItemIOS;</span><br><span class="line">export const ToolbarAndroid = iconSet.ToolbarAndroid;</span><br><span class="line">export const getImageSource = iconSet.getImageSource;</span><br></pre></td></tr></table></figure><ul><li><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3></li><li><h3 id="自动的字体图库"><a href="#自动的字体图库" class="headerlink" title="自动的字体图库"></a>自动的字体图库</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Icon from &apos;../utils/Icon&apos;;</span><br><span class="line">       </span><br><span class="line">&lt;Icon name=&quot;youjianxinxi&quot;   size = &#123;30&#125;/&gt;</span><br></pre></td></tr></table></figure><ul><li><h3 id="使用组件自带的库"><a href="#使用组件自带的库" class="headerlink" title="使用组件自带的库"></a>使用组件自带的库</h3>如果同时使用几个资源库图标如FontAwesome、Ionicons、Feather等作为Icon组件引用，为了避免Icon组件名称混淆，在import的时候可以起不同的名字，使用的时候组件名对应import的名称就行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import FontAwesomeIcon from &apos;react-native-vector-icons/FontAwesome&apos;;</span><br><span class="line">import Icon from &apos;react-native-vector-icons/Ionicons&apos;;</span><br><span class="line"></span><br><span class="line">&lt;FontAwesomeIcon name=&#123;&apos;angle-right&apos;&#125; size=&#123;24&#125; color=&#123;&apos;#999&apos;&#125;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;Icon name=&#123;&apos;ios-sad&apos;&#125; size=&#123;100&#125; color=&#123;&apos;#999999&apos;&#125;/&gt;</span><br></pre></td></tr></table></figure><ul><li><h3 id="用作Button组件"><a href="#用作Button组件" class="headerlink" title="用作Button组件"></a>用作Button组件</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Icon from &apos;react-native-vector-icons/FontAwesome&apos;;</span><br><span class="line"></span><br><span class="line">&lt;Icon.Button name=&quot;star&quot; backgroundColor=&quot;#999999&quot; onPress=&#123;this.press&#125;&gt;</span><br><span class="line">button的名字</span><br><span class="line">&lt;/Icon.Button&gt;</span><br></pre></td></tr></table></figure><ul><li><h3 id="用作静态的图片资源"><a href="#用作静态的图片资源" class="headerlink" title="用作静态的图片资源"></a>用作静态的图片资源</h3></li><li><h3 id="有时候我们可能不想用图标组件，而想使用Image组件来显示这些字体图标："><a href="#有时候我们可能不想用图标组件，而想使用Image组件来显示这些字体图标：" class="headerlink" title="有时候我们可能不想用图标组件，而想使用Image组件来显示这些字体图标："></a>有时候我们可能不想用图标组件，而想使用Image组件来显示这些字体图标：</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import Icon from &apos;react-native-vector-icons/FontAwesome&apos;;</span><br><span class="line"></span><br><span class="line">constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      userIcon: null,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentWillMount() &#123;</span><br><span class="line">//获取字体图库的ttf中的icon资源，名字是user，大小50</span><br><span class="line">    Icon.getImageSource(&apos;user&apos;, 50, &apos;#999&apos;).then((source) =&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        userIcon: source</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>先在state中声明一个userIcon，然后使用Icon组件的getImageSource方法获取图标资源赋值给userIcon，接着在render函数中需要用到Image组件的地方设置这个userIcon。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Image source=&#123;this.state.userIcon&#125;/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>以下觉得写得不错，无脑复制</p></blockquote><ul><li><h3 id="配合TabBarIOS组件使用"><a href="#配合TabBarIOS组件使用" class="headerlink" title="配合TabBarIOS组件使用"></a>配合TabBarIOS组件使用</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import Icon from &apos;react-native-vector-icons/Ionicons&apos;;</span><br><span class="line"></span><br><span class="line">&lt;Icon.TabBarItemIOS</span><br><span class="line">    title=&#123;&apos;Home&apos;&#125;</span><br><span class="line">    iconName=&#123;&apos;ios-home-outline&apos;&#125;</span><br><span class="line">    selectedIconName=&#123;&apos;ios-home&apos;&#125;</span><br><span class="line">    iconColor=&#123;&apos;#888&apos;&#125;</span><br><span class="line">    selectedIconColor=&#123;&apos;#ff0098&apos;&#125;</span><br><span class="line">    selected=&#123;this.state.selectedTabIndex === 0&#125;</span><br><span class="line">    renderAsOriginal</span><br><span class="line">    onPress=&#123;() =&gt; &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            selectedTabIndex: 0</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><ul><li><h3 id="在NavigatorIOS组件中使用"><a href="#在NavigatorIOS组件中使用" class="headerlink" title="在NavigatorIOS组件中使用"></a>在NavigatorIOS组件中使用</h3>NavigatorIOS是iOS专属组件，字体图标在这里主要是使用在NavigationBar上，使用方式与上面说到的第3点静态图片资源的使用是一样的，这里不多作赘述。有一点需要注意的是NavigatorIOS不会随着state中属性值改变而重新渲染，所以可能导致getImageSource之后NavigationBar上的图标不显示，这里请看看react-native-vector-icons的官方文档，很贴心的说明了避坑指南：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Note: Since NavigatorIOS doesn&apos;t rerender with new state and the async nature of getImageSource you must not use it with initialRoute until the icon is rendered, but any view added by push should be fine. Easiest way is to simple add an if statment at the beginning of you render method like this:</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">    if (!this.state.myIcon) &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return (&lt;NavigatorIOS ... /&gt;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>简而言之，就是取值之前加个判断…</p><ul><li><h3 id="在ToolbarAndroid组件中使用"><a href="#在ToolbarAndroid组件中使用" class="headerlink" title="在ToolbarAndroid组件中使用"></a>在ToolbarAndroid组件中使用</h3>两种方式，一种是获取Icon组件的静态图片资源，用在原生的ToolbarAndroid组件中，一种是使用Icon.ToolbarAndroid组件。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import Icon from &apos;react-native-vector-icons/FontAwesome&apos;;</span><br><span class="line"></span><br><span class="line">constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      appLogo: null,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">componentWillMount() &#123;</span><br><span class="line">    Icon.getImageSource(&apos;android&apos;, 36, &apos;#92c029&apos;).then((source) =&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        appLogo: source</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;ToolbarAndroid</span><br><span class="line">          style=&#123;styles.toolbar_system&#125;</span><br><span class="line">          logo=&#123;this.state.appLogo&#125;</span><br><span class="line">          title=&#123;&apos;This is an android toolbar&apos;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;Icon.ToolbarAndroid</span><br><span class="line">          navIconName=&#123;&apos;amazon&apos;&#125;</span><br><span class="line">          style=&#123;styles.toolbar_iconfont&#125;</span><br><span class="line">          titleColor=&quot;white&quot;</span><br><span class="line">          title=&#123;&apos;This is an Icon toolbar&apos;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )  &#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://juejin.im/post/5ae1685bf265da0b8a675199" target="_blank" rel="noopener">ReactNative干货分享——自定义iconfont图标的使用</a><br><a href="https://blog.csdn.net/qq_34057640/article/details/71082605" target="_blank" rel="noopener">eact-native 填坑之canOverrideExistingModule=true</a><br><a href="https://www.jianshu.com/p/332198bf46a7" target="_blank" rel="noopener">react-native-vector-icons进阶教程（自定义iconfont使用)</a><br><a href="https://blog.csdn.net/weixin_38713540/article/details/71474462" target="_blank" rel="noopener">React Native 开发报错： unrecognized font family 字体包名字</a></p>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>npm管理本地修改的库</title>
      <link href="/2018/09/05/npm%E7%AE%A1%E7%90%86%E6%9C%AC%E5%9C%B0%E4%BF%AE%E6%94%B9%E7%9A%84%E5%BA%93/"/>
      <url>/2018/09/05/npm%E7%AE%A1%E7%90%86%E6%9C%AC%E5%9C%B0%E4%BF%AE%E6%94%B9%E7%9A%84%E5%BA%93/</url>
      <content type="html"><![CDATA[<ul><li>npm管理本地修改的三方库<br>在项目的根目录添加<code>node_modules_local</code>文件夹，存放修改的三方组件，这个组件需要添加本身的<code>node_modules</code>,然后在<code>package.json</code>文件中添加</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;react-native-vector-icons&quot;: &quot;file:node_modules_local/react-native-vector-icons&quot;,</span><br></pre></td></tr></table></figure><p>运行<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p><img src="/2018/09/05/npm管理本地修改的库/001.png" alt=""><br><img src="/2018/09/05/npm管理本地修改的库/002.png" alt=""></p><ul><li>需要修改的代码，从源码的fork出来，修改上传，<code>package.json</code>这样添加<br>git+自己fork后的仓库地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;react-native-version-number&quot;: &quot;git+https://github.com/CarSmallGuo/react-native-version-number.git&quot;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mac关闭指定端口</title>
      <link href="/2018/09/03/mac%E5%85%B3%E9%97%AD%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3/"/>
      <url>/2018/09/03/mac%E5%85%B3%E9%97%AD%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3/</url>
      <content type="html"><![CDATA[<ul><li>查看端口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:端口号</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2018/09/03/mac关闭指定端口/001.png" alt=""></p><a id="more"></a><ul><li>关闭端口最近的进程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9  pid号</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux</title>
      <link href="/2018/09/01/redux/"/>
      <url>/2018/09/01/redux/</url>
      <content type="html"><![CDATA[<h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><h2 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h2><p>改变dom</p><h2 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h2><p>在初始化时，createStore会主动触发一次dispach，它的action.type是系统内置的INIT，所以在reducer中不会匹配到任何开发者自定义的action.type，它走的是switch中default的逻辑，目的是为了得到初始化的状态。<br>当然我们也可以手动指定initialState，笔者在这里做了一层判断，当initialState没有定义时，我们才会dispatch，而在源码中是都会执行一次dispatch，笔者认为没有必要，这是一次多余的操作。因为这个时候，监听流中没有注册函数，走了一遍reducer中的default逻辑，得到新的state和initialState是一样的。</p>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cocoapods</title>
      <link href="/2018/08/31/Cocoapods/"/>
      <url>/2018/08/31/Cocoapods/</url>
      <content type="html"><![CDATA[<ul><li>查看源(如果不是<a href="https://gems.ruby-china.org源，移除现有源" target="_blank" rel="noopener">https://gems.ruby-china.org源，移除现有源</a>)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><ul><li>移除现有源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove http://ruby.taobao.org/（http://ruby.taobao.org/</span><br><span class="line">指的是源）</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>添加新源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -a https://gems.ruby-china.org</span><br></pre></td></tr></table></figure><ul><li>查看新镜像是否添加成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><ul><li>安装CocoaPods</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure><hr><ul><li>注意：苹果系统升级 OS X EL Capitan 后改为  sudo gem install -n /usr/local/bin cocoapods</li></ul><hr><ul><li>设置pod ,这里可能需要等几秒钟</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure><ul><li>更新gem</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem update --system</span><br></pre></td></tr></table></figure><ul><li><p>在项目中添加cocopod管理<br>在项目根目录创建Podfile文件</p><hr><h2 id="文件直接叫Podfile-没有后缀"><a href="#文件直接叫Podfile-没有后缀" class="headerlink" title="文件直接叫Podfile 没有后缀"></a>文件直接叫Podfile 没有后缀</h2><ul><li>编辑 <code>Podfile</code> 添加需要的库,然后cd到项目根目录</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><ul><li>更新库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod update</span><br></pre></td></tr></table></figure><ul><li>Podfile 文件格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, &apos;8.0&apos;</span><br><span class="line"></span><br><span class="line">target &apos;UniversalApp&apos; do</span><br><span class="line"></span><br><span class="line">pod &apos;MJRefresh&apos;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>android</title>
      <link href="/2018/08/31/RN_android%20%E7%9B%B8%E5%85%B3/"/>
      <url>/2018/08/31/RN_android%20%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h2 id="android模拟器"><a href="#android模拟器" class="headerlink" title="android模拟器"></a>android模拟器</h2><ul><li>android 设备连接不上</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server</span><br><span class="line">adb start-server</span><br><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">emulator-5554device (这里是device说明设备正常)</span><br></pre></td></tr></table></figure><ul><li>网易mumu 获取root权限</li></ul>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bash_profile文件定义</title>
      <link href="/2018/08/30/bash_profile%E6%96%87%E4%BB%B6/"/>
      <url>/2018/08/30/bash_profile%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">source ~/.profile</span><br><span class="line"> </span><br><span class="line">alias ls=&apos;ls -G&apos;</span><br><span class="line">alias ll=&apos;ls -l&apos;</span><br><span class="line">alias grep=&apos;grep --color&apos;</span><br><span class="line">alias trashCoap=&apos;react-native run-android&apos;</span><br><span class="line">alias start-rn=&apos;react-native run-android&apos;</span><br><span class="line"></span><br><span class="line"># rn debug</span><br><span class="line">#alias run-android=&apos;react-native run-android --variant generaldebug&apos;</span><br><span class="line">alias  randroid=&apos;react-native run-android&apos;</span><br><span class="line">alias  rios=&apos;react-native run-ios&apos;</span><br><span class="line">alias  rstart=&apos;react-native start&apos;</span><br><span class="line">alias  rlink=&apos;react-native link&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alias build-ge=&apos;./gradlew assembleGeneralRelease&apos;</span><br><span class="line">alias install-ge=&apos;./gradlew assembleGeneralRelease &amp;&amp; ./gradlew installRelease&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#gradle</span><br><span class="line">GRADLE_HOME=/Applications/Android\Studio.app/Contents/gradle/gradle-4.4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export GRADLE_HOME</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:$GRADLE_HOME/bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</span><br><span class="line"></span><br><span class="line">#node</span><br><span class="line">export PATH=/Users/30san/.nvm/versions/node/v6.14.3/lib/node_modules/npm/bin:$PATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export PATH=&quot;/usr/local/opt/openssl/bin:$PATH&quot;</span><br><span class="line">export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;</span><br><span class="line">if which rbenv &gt; /dev/null; then eval &quot;$(rbenv init -)&quot;; fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home</span><br><span class="line">#PATH=$JAVA_HOME/bin:$PATH:.</span><br><span class="line">#CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.</span><br><span class="line"></span><br><span class="line">#JAVA</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASS_PATH=$JAVA_HOME/lib:$CLASS_PATH</span><br><span class="line"></span><br><span class="line">#android </span><br><span class="line">export ANDROID_HOME=/opt/android-sdk-macosx</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br><span class="line"></span><br><span class="line">#export PATH=$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/23.0.2:$PATH</span><br><span class="line"></span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;</span><br><span class="line">./node_modules/react-native/packager/react-native-xcode.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#tree</span><br><span class="line">#alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br><span class="line"></span><br><span class="line">#[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm #bash_completion</span><br><span class="line">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iTerm2使用</title>
      <link href="/2018/08/30/iTerm2%20%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/30/iTerm2%20%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="光标控制"><a href="#光标控制" class="headerlink" title="光标控制"></a>光标控制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ctrl + a: 到行首</span><br><span class="line">ctrl + e: 行末</span><br><span class="line">ctrl + f/b: 前进后退，相当于左右方向键，但是显然比移开手按方向键更快</span><br><span class="line">ctrl + p: 上一条命令，相当于方向键上</span><br><span class="line">ctrl + r: 搜索命令历史，这个大家都应该很熟悉了</span><br><span class="line">ctrl + d: 删除当前字符</span><br><span class="line">ctrl + h: 删除之前的字符</span><br><span class="line">ctrl + w: 删除光标前的单词</span><br><span class="line">ctrl + k: 删除到文本末尾</span><br><span class="line">ctrl + t: 交换光标处文本</span><br><span class="line">ctrl + u: 删除一行</span><br><span class="line">⌘ + —/+/0: 调整字体大小</span><br><span class="line">⌘ + r:清屏，其实是滚到新的一屏，并没有清空。ctrl + l 也可以做到。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新建窗口：shift + command + d（横向）command + d（竖向）</span><br><span class="line">关闭窗口：shift + command + w</span><br><span class="line">前一个窗口：command + `</span><br><span class="line">后一个窗口：command + ~</span><br><span class="line">进入窗口 1,2,3：option + command + 编号</span><br></pre></td></tr></table></figure><h3 id="标签页操作"><a href="#标签页操作" class="headerlink" title="标签页操作"></a>标签页操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">新建标签页: Command + T</span><br><span class="line">关闭标签页: Command + W</span><br><span class="line">前一个标签页: Command + 左方向键，Shift + Command + [</span><br><span class="line">后一个标签页: Command + 右方向键，Shitf + Command + ]</span><br><span class="line">进入标签页1，2，3…: Command + 标签页编号</span><br><span class="line">Expose 标签页: Option + Command + E（将标签页打撒到全屏，并可以全局搜索所有的标签页）</span><br></pre></td></tr></table></figure><h3 id="面板操作"><a href="#面板操作" class="headerlink" title="面板操作"></a>面板操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">垂直分割: Command + D</span><br><span class="line">水平分割: Shift + Command + D</span><br><span class="line">前一个面板: Command + [</span><br><span class="line">后一个面板: Command + ]</span><br><span class="line">切换到上/下/左/右面板: Option + Command + 上下左右方向键</span><br></pre></td></tr></table></figure><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">支持自定义全局快捷键用于显示和隐藏iTerm2 Preference -&gt; Keys －&gt; Show/hide iTerm2 with a system-wide hotkey 打上勾之后</span><br><span class="line">进入和退出全屏: Command + Enter</span><br><span class="line">查看当前终端中光标的位置: Command + /</span><br><span class="line">命令自动补全: Command + ;（很少用这个，还是感觉Zsh的补全更好用）</span><br><span class="line">开启和关闭背景半透明: Command + u</span><br><span class="line">清屏（重置当前终端）: Command + r</span><br></pre></td></tr></table></figure><h3 id="文本选取"><a href="#文本选取" class="headerlink" title="文本选取"></a>文本选取</h3><p>文本选取有使用鼠标和不使用鼠标两种方式。</p><p>使用鼠标</p><p>默认情况下，选取的文字会自动复制到剪切板，可以使用以下方式进行文本选取：</p><p>常见的点击并拖拽方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">双击选取整个单词</span><br><span class="line">三击选取整行</span><br><span class="line">选取某一部分，按住Shift，再点击某处，可以选取整个矩形内的文本（类似Windows下按住Shift可以批量选取图标）</span><br><span class="line">按住Command + Option，可以用鼠标画出一个矩形，用类似截图的方式选取文本 另外，还可以使用鼠标完成以下操作： 按住Command然后点击某个URL，会在浏览器中打开这个URL，点击某个文件夹，会在Finder里打开这个文件夹（再也不用open . 啦），点击某个文件名，会打开这个文件（文本文件支持MacVim，TextMate和BBEdit，如果后面跟随一个冒号和行号，文件会在行号处打开，其它格式的文件似乎不能调用默认程序打开） 选取文本之后，按住Command 同时拖动文本，可以将文本粘贴到目标位置（Drag and Drop） 鼠标中键粘贴（这个太感人了，一下子找回Linux的感觉了）</span><br><span class="line">不使用鼠标</span><br><span class="line"></span><br><span class="line">(这种方式最多只能选取一行文本) 使用 Command + f，会呼出一个搜索框，可以在当前面板中进行搜索，输入想要选取的部分内容，输入过程中，按Tab可以将选取部分向右扩展，按Shift + Tab向左扩展，按回车转到下一个匹配位置。使用Tab或Shift+Tab扩展得到想要的内容之后，选取内容会自动复制到剪切板，再次按Command + f隐藏搜索框。</span><br><span class="line"></span><br><span class="line">位置书签</span><br><span class="line">在当前会话中按Command + Shift + m可以保存当前位置，之后可以按Command + Shift + j跳回这个位置。</span><br></pre></td></tr></table></figure><p>粘贴历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用Command + Shift + h 可以呼出粘贴历史，支持模糊检索。还可以设置将粘贴历史保存在磁盘上（Preferences -&gt; General）</span><br></pre></td></tr></table></figure><p>即时回放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用Command + Opt + b 打开即时回放，按Esc退出。即时回放可以记录终端输出的状态，让你“穿越时间”查看终端内容。默认每个会话最多储存4MB的内容，可以在设置中更改（Preferences -&gt; Genernal -&gt; Instant Replay）。</span><br></pre></td></tr></table></figure><p>窗口状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过 Window -&gt; Save Window Arrangement 可以保存当前窗口状态的快照，包括打开的窗口，标签页和面板。通过 Window -&gt; Restore Window Arrangement 还原。还可以在 Preferences -&gt; General -&gt; Open saved window arrangement 中设置在启动iTerm2时自动恢复窗口状态</span><br></pre></td></tr></table></figure><h3 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">command+; 根据上下文呼出自动完成窗口，上下键选择</span><br><span class="line">全屏 command+enter</span><br><span class="line">光标去哪了？command+/</span><br><span class="line">用鼠标选中某个路径或者某个词汇就自动复制</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Airbnb JavaScript编码规范指南(ES6)中文版</title>
      <link href="/2018/08/29/Airbnb%20JavaScript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%8C%87%E5%8D%97(ES6)%E4%B8%AD%E6%96%87%E7%89%88/"/>
      <url>/2018/08/29/Airbnb%20JavaScript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%8C%87%E5%8D%97(ES6)%E4%B8%AD%E6%96%87%E7%89%88/</url>
      <content type="html"><![CDATA[<p>原版:<a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">Airbnb JavaScript Style Guide</a></p><ul><li><p>其他翻译:</p><ul><li><p><a href="https://github.com/libertyAlone/airbnb-javascript-style-guide-cn/tree/master/css" target="_blank" rel="noopener">Airbnb CSS/Sass规范</a></p></li><li><p><a href="https://github.com/libertyAlone/airbnb-javascript-style-guide-cn/tree/master/css-in-javascript" target="_blank" rel="noopener">Airbnb css-in-javascript规范</a></p></li></ul></li></ul><a id="more"></a><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ol><li><a href="#类型">类型</a></li><li><a href="#引用">引用</a></li><li><a href="#对象">对象</a></li><li><a href="#数组">数组</a></li><li><a href="#解构">解构</a></li><li><a href="#字符串">字符串</a></li><li><a href="#函数">函数</a></li><li><a href="#箭头函数">箭头函数</a></li><li><a href="#类&amp;构造函数">类 &amp; 构造函数</a></li><li><a href="#模块">模块</a></li><li><a href="#迭代器和生成器">迭代器和生成器</a></li><li><a href="#属性">属性</a></li><li><a href="#变量">变量</a></li><li><a href="#变量提升">变量提升</a></li><li><a href="#比较运算符&amp;相等">比较运算符 &amp; 相等</a></li><li><a href="#块">块</a></li><li><a href="#控制语句">控制语句</a></li><li><a href="#注释">注释</a></li><li><a href="#空格">空格</a></li><li><a href="#逗号">逗号</a></li><li><a href="#分号">分号</a></li><li><a href="#类型转换">类型转换</a></li><li><a href="#命名规则">命名规则</a></li><li><a href="#存取器">存取器</a></li><li><a href="#事件">事件</a></li><li><a href="#jquery">jQuery</a></li><li><a href="#ECMAScript5兼容性">ECMAScript 5 兼容性</a></li><li><a href="#ECMAScript6+(ES2015+">ECMAScript 6+ (ES 2015+) 风格</a>风格)</li><li><a href="#标准库">标准库</a></li><li><a href="#测试">测试</a></li><li><a href="#性能">性能</a></li><li><a href="#资源">资源</a></li><li><a href="#谁在使用?">谁在使用?</a></li><li><a href="#翻译">翻译</a></li><li><a href="#JavaScript编码规范指南">JavaScript编码规范指南</a></li><li><a href="#和我们聊聊JavaScript">和我们聊聊JavaScript</a></li><li><a href="#贡献者">贡献者</a></li><li><a href="#许可">许可</a></li><li><a href="#修改">修改</a></li></ol><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>  <a name="types--primitives"></a><a name="1.1"></a></p><ul><li><p><a href="#types--primitives">1.1</a> <strong>原始类型</strong>: 存取原始类型直接作用于值本身.</p><ul><li><code>string</code></li><li><code>number</code></li><li><code>boolean</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>symbol</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// =&gt; 1, 9</span></span><br></pre></td></tr></table></figure><ul><li>Symbols不能被完全polyfill,所以不能用于无法被本地支持该特性的浏览器/环境.</li></ul><p><a name="types--complex"></a><a name="1.2"></a></p></li><li><p><a href="#types--complex">1.2</a>  <strong>复杂类型</strong>: 存取复杂类型作用于值的引用.</p><ul><li><code>object</code></li><li><code>array</code></li><li><code>function</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>  <a name="references--prefer-const"></a><a name="2.1"></a></p><ul><li><p><a href="#references--prefer-const">2.1</a> 对引用使用<code>const</code>;避免使用<code>var</code>.eslint: <a href="http://eslint.org/docs/rules/prefer-const.html" target="_blank" rel="noopener"><code>prefer-const</code></a>, <a href="http://eslint.org/docs/rules/no-const-assign.html" target="_blank" rel="noopener"><code>no-const-assign</code></a></p><blockquote><p>原因：会确保你不会改变引用的指向，否则可能会产生bug并且使代码难以理解</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><a name="references--disallow-var"></a><a name="2.2"></a></p></li><li><p><a href="#references--disallow-var">2.2</a> 如果一定要改变引用的指向，使用 <code>let</code> 而非 <code>var</code>.eslint: <a href="http://eslint.org/docs/rules/no-var.html" target="_blank" rel="noopener"><code>no-var</code></a> jscs: <a href="http://jscs.info/rule/disallowVar" target="_blank" rel="noopener"><code>disallowVar</code></a></p><blockquote><p>原因：<code>let</code>是块级作用域而<code>var</code>是函数作用域.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good, use the let.</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="references--block-scope"></a><a name="2.3"></a></p></li><li><p><a href="#references--block-scope">2.3</a> 注意<code>let</code>和<code>const</code>都是块级作用域.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const and let only exist in the blocks they are defined in.</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>  <a name="objects--no-new"></a><a name="3.1"></a></p><ul><li><p><a href="#objects--no-new">3.1</a> 使用字面语法创建对象. eslint: <a href="http://eslint.org/docs/rules/no-new-object.html" target="_blank" rel="noopener"><code>no-new-object</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure><p><a name="es6-computed-properties"></a><a name="3.2"></a></p></li><li><p><a href="#es6-computed-properties">3.2</a> 创建动态属性名字的对象时使用计算后的属性名.</p><blockquote><p>Why? 原因：允许你在一个地方定义一个对象的全部属性.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKey</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`a key named <span class="subst">$&#123;k&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">  [getKey(<span class="string">'enabled'</span>)]: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="es6-object-shorthand"></a><a name="3.3"></a></p></li><li><p><a href="#es6-object-shorthand">3.3</a> 使用对象方法的简写形式. eslint: <a href="http://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="noopener"><code>object-shorthand</code></a> jscs: <a href="http://jscs.info/rule/requireEnhancedObjectLiterals" target="_blank" rel="noopener"><code>requireEnhancedObjectLiterals</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="es6-object-concise"></a><a name="3.4"></a></p></li><li><p><a href="#es6-object-concise">3.4</a> 使用简写属性值. eslint: <a href="http://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="noopener"><code>object-shorthand</code></a> jscs: <a href="http://jscs.info/rule/requireEnhancedObjectLiterals" target="_blank" rel="noopener"><code>requireEnhancedObjectLiterals</code></a></p><blockquote><p>原因：书写描述更简短.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker: lukeSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="objects--grouped-shorthand"></a><a name="3.5"></a></p></li><li><p><a href="#objects--grouped-shorthand">3.5</a> 将简写的属性统一放到对象声明开头.</p><blockquote><p>原因：容易区分使用简写的属性.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anakinSkywalker = <span class="string">'Anakin Skywalker'</span>;</span><br><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJediWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJediWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="objects--quoted-props"></a><a name="3.6"></a></p></li><li><p><a href="#objects--quoted-props">3.6</a> 只对非法标识符的属性使用引号. eslint: <a href="http://eslint.org/docs/rules/quote-props.html" target="_blank" rel="noopener"><code>quote-props</code></a> jscs: <a href="http://jscs.info/rule/disallowQuotedKeysInObjects" target="_blank" rel="noopener"><code>disallowQuotedKeysInObjects</code></a></p><blockquote><p>原因：通常我们主观上认为更易读.有利于语法高亮，更容易被许多JS引擎优化.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> bad = &#123;</span><br><span class="line">  <span class="string">'foo'</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">'bar'</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> good = &#123;</span><br><span class="line">  foo: <span class="number">3</span>,</span><br><span class="line">  bar: <span class="number">4</span>,</span><br><span class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="objects--prototype-builtins"></a></p></li><li><p><a href="#objects--prototype-builtins">3.7</a> 不要直接使用<code>Object.prototype</code>,<code>hasOwnProperty</code>, <code>propertyIsEnumerable</code>和 <code>isPrototypeOf</code>方法.</p><blockquote><p> 原因：这些方法可能会被对象自身的同名属性覆盖 - 比如<code>{ hasOwnProperty: false }</code>或者对象是null(<code>Object.create(null)</code>).</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">console</span>.log(object.hasOwnProperty(key));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, key));</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> has = <span class="built_in">Object</span>.prototype.hasOwnProperty; <span class="comment">// cache the lookup once, in module scope.</span></span><br><span class="line"><span class="comment">/* or */</span></span><br><span class="line"><span class="keyword">import</span> has <span class="keyword">from</span> <span class="string">'has'</span>; <span class="comment">// https://www.npmjs.com/package/has</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">console</span>.log(has.call(object, key));</span><br></pre></td></tr></table></figure><p><a name="objects--rest-spread"></a></p></li><li><p><a href="#objects--rest-spread">3.8</a> 优先使用对象展开运算符而不是对象浅拷贝<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener"><code>Object.assign</code></a>. 使用对象剩余运算符来获得新的有具体省略的对象.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// very bad</span></span><br><span class="line">    <span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> copy = <span class="built_in">Object</span>.assign(original, &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;); <span class="comment">// this mutates `original` ಠ_ಠ</span></span><br><span class="line">    <span class="keyword">delete</span> copy.a; <span class="comment">// so does this</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// bad</span></span><br><span class="line">    <span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, original, &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;); <span class="comment">// copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// good</span></span><br><span class="line">    <span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> copy = &#123; ...original, <span class="attr">c</span>: <span class="number">3</span> &#125;; <span class="comment">// copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; a, ...noA &#125; = copy; <span class="comment">// noA =&gt; &#123; b: 2, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line">**[⬆ back to top](#table-of-contents)**</span><br><span class="line"></span><br><span class="line">## 数组</span><br><span class="line"></span><br><span class="line">  &lt;a name=<span class="string">"arrays--literals"</span>&gt;&lt;/a&gt;&lt;a name="4.1"&gt;&lt;/a&gt;</span><br><span class="line">  - [4.1](#arrays--literals) 使用字面量语法创建数组. eslint: [`no-array-constructor`](http://eslint.org/docs/rules/no-array-constructor.html)</span><br><span class="line"></span><br><span class="line">    <span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">    // bad</span></span><br><span class="line"><span class="string">    const items = new Array();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // good</span></span><br><span class="line"><span class="string">    const items = [];</span></span><br></pre></td></tr></table></figure><p><a name="arrays--push"></a><a name="4.2"></a></p></li><li><p><a href="#arrays--push">4.2</a> 使用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">Array#push</a> 而不是直接给数组赋值.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">someStack.push(<span class="string">'abracadabra'</span>);</span><br></pre></td></tr></table></figure><p><a name="es6-array-spreads"></a><a name="4.3"></a></p></li><li><p><a href="#es6-array-spreads">4.3</a> 使用数组扩展运算符 <code>...</code> 拷贝数组.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure><p><a name="arrays--from"></a><a name="4.4"></a></p></li><li><p><a href="#arrays--from">4.4</a> 将可迭代对象转换成数组使用扩展运算符<code>...</code>代替<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener">Array.from</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> nodes = [...foo];</span><br></pre></td></tr></table></figure><p><a name="arrays--from-array-like"></a></p></li><li><p><a href="#arrays--from-array-like">4.5</a> 使用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener"><code>Array.from</code></a> 方法将类数组对象转化成数组.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrLike = &#123; <span class="number">0</span>: <span class="string">'foo'</span>, <span class="number">1</span>: <span class="string">'bar'</span>, <span class="number">2</span>: <span class="string">'baz'</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.prototype.slice.call(arrLike);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.from(arrLike);</span><br></pre></td></tr></table></figure><p><a name="arrays--mapping"></a></p></li><li><p><a href="#arrays--mapping">4.6</a> 遍历迭代器进行映射时使用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener">Array.from</a> 代替扩展运算符 <code>...</code>, 因为这可以避免创建中间数组.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> baz = [...foo].map(bar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="built_in">Array</span>.from(foo, bar);</span><br></pre></td></tr></table></figure><p><a name="arrays--callback-return"></a><a name="4.7"></a></p></li><li><p><a href="#arrays--callback-return">4.7</a> 在数组方法的回调函数中使用return.如果函数体只有一条返回没有副作用的声明则可以省略return, 遵循 <a href="#arrows--implicit-return">8.2</a>. eslint: <a href="http://eslint.org/docs/rules/array-callback-return" target="_blank" rel="noopener"><code>array-callback-return</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - no returned value means `acc` becomes undefined after the first iteration</span></span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">acc, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = acc.concat(item);</span><br><span class="line">  acc[index] = flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">acc, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = acc.concat(item);</span><br><span class="line">  acc[index] = flatten;</span><br><span class="line">  <span class="keyword">return</span> flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">inbox.filter(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">'Mockingbird'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">'Harper Lee'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">inbox.filter(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">'Mockingbird'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">'Harper Lee'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="arrays--bracket-newline"></a></p></li><li><a href="#arrays--bracket-newline">4.8</a> 如果一个数组有多行则要在数组的开括号后和闭括号前使用新行</li></ul><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectInArray = [&#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  id: <span class="number">2</span>,</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberInArray = [</span><br><span class="line">  <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> arr = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectInArray = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberInArray = [</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></code></pre><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><p>  <a name="destructuring--object"></a><a name="5.1"></a></p><ul><li><p><a href="#destructuring--object">5.1</a> 访问对象的多个属性时使用对象解构. eslint: <a href="https://eslint.org/docs/rules/prefer-destructuring" target="_blank" rel="noopener"><code>prefer-destructuring</code></a></p><blockquote><p>原因：解构可以避免创建属性的临时引用.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = user;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="destructuring--array"></a><a name="5.2"></a></p></li><li><p><a href="#destructuring--array">5.2</a> 使用数组解构. eslint: <a href="https://eslint.org/docs/rules/prefer-destructuring" target="_blank" rel="noopener"><code>prefer-destructuring</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br></pre></td></tr></table></figure><p><a name="destructuring--object-over-array"></a><a name="5.3"></a></p></li><li><p><a href="#destructuring--object-over-array">5.3</a> 对于多个返回值使用对象解构而不是数组解构.</p><blockquote><p>原因：可以非破坏性地随时增加或者改变属性顺序.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the caller needs to think about the order of return data</span></span><br><span class="line"><span class="keyword">const</span> [left, __, top] = processInput(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the caller selects only the data they need</span></span><br><span class="line"><span class="keyword">const</span> &#123; left, top &#125; = processInput(input);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>  <a name="strings--quotes"></a><a name="6.1"></a></p><ul><li><p><a href="#strings--quotes">6.1</a> 字符串使用单引号 <code>&#39;&#39;</code> . eslint: <a href="http://eslint.org/docs/rules/quotes.html" target="_blank" rel="noopener"><code>quotes</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"Capt. Janeway"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - template literals should contain interpolation or newlines</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">`Capt. Janeway`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Capt. Janeway'</span>;</span><br></pre></td></tr></table></figure><p><a name="strings--line-length"></a><a name="6.2"></a></p></li><li><p><a href="#strings--line-length">6.2</a> 单行超过100个字符的字符串不应该使用字符串连接符来跨行书写.</p><blockquote><p>原因：截断的字符串很难维护并且代码不易被搜索查找.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because \</span></span><br><span class="line"><span class="string">of Batman. When you stop to think about how Batman had anything to do \</span></span><br><span class="line"><span class="string">with this, you would get nowhere \</span></span><br><span class="line"><span class="string">fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because '</span> +</span><br><span class="line">  <span class="string">'of Batman. When you stop to think about how Batman had anything to do '</span> +</span><br><span class="line">  <span class="string">'with this, you would get nowhere fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span>;</span><br></pre></td></tr></table></figure><p><a name="es6-template-literals"></a><a name="6.3"></a></p></li><li><p><a href="#es6-template-literals">6.3</a> 动态构建字符串时使用模板字符串而不是拼接. eslint: <a href="http://eslint.org/docs/rules/prefer-template.html" target="_blank" rel="noopener"><code>prefer-template</code></a> <a href="http://eslint.org/docs/rules/template-curly-spacing" target="_blank" rel="noopener"><code>template-curly-spacing</code></a></p><blockquote><p>原因：模板字符串有可读性强，语法明确，换行合理和字符串插值的特点.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'How are you, '</span> + name + <span class="string">'?'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">'How are you, '</span>, name, <span class="string">'?'</span>].join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123; name &#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123;name&#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="strings--eval"></a><a name="6.4"></a></p></li><li><p><a href="#strings--eval">6.4</a> 不要对字符串使用<code>eval()</code>，漏洞太多. eslint: <a href="https://eslint.org/docs/rules/no-eval" target="_blank" rel="noopener"><code>no-eval</code></a></p><p><a name="strings--escaping"></a></p></li><li><p><a href="#strings--escaping">6.5</a> 不要在字符串中使用不必要的转义字符. eslint: <a href="http://eslint.org/docs/rules/no-useless-escape" target="_blank" rel="noopener"><code>no-useless-escape</code></a></p><blockquote><p>原因：反斜线不利于阅读，应该只在必要的时候出现.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'\'this\' \i\s \"quoted\"'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'\'this\' is "quoted"'</span>;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">`my name is '<span class="subst">$&#123;name&#125;</span>'`</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>  <a name="functions--declarations"></a><a name="7.1"></a></p><ul><li><p><a href="#functions--declarations">7.1</a> 使用具名函数表达式而非函数声明. eslint: <a href="http://eslint.org/docs/rules/func-style" target="_blank" rel="noopener"><code>func-style</code></a></p><blockquote><p>原因：函数声明被提升了，意味着很容易在文件中定义此函数之前引用它。不利于可读性和可维护性.如果你发现函数定义既庞大又复杂以至于不能理解文件的其他部分，或许你应该将它拆分成模块。别忘记要显式命名表达式，不用管名字是否是从包含的变量中推断的(通常出现在使用Babel编译器的现代浏览器中).这样会消除Error调用栈中的猜想. (<a href="https://github.com/airbnb/javascript/issues/794" target="_blank" rel="noopener">讨论</a>)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// lexical name distinguished from the variable-referenced invocation(s)</span></span><br><span class="line"><span class="keyword">const</span> short = <span class="function"><span class="keyword">function</span> <span class="title">longUniqueMoreDescriptiveLexicalFoo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="functions--iife"></a><a name="7.2"></a></p></li><li><p><a href="#functions--iife">7.2</a> 用圆括号包裹自执行匿名函数. eslint: <a href="http://eslint.org/docs/rules/wrap-iife.html" target="_blank" rel="noopener"><code>wrap-iife</code></a></p><blockquote><p>原因：一个立即执行匿名函数表达式是一个单一的单元-括号清楚地表达了它包含函数自身和调用括号的意思.注意,在到处倒是模块的世界中几乎不需要IIFE.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// immediately-invoked function expression (IIFE)</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p><a name="functions--in-blocks"></a><a name="7.3"></a></p></li><li><p><a href="#functions--in-blocks">7.3</a> 不要在非函数块（<code>if</code> , <code>while</code> 等）中声明函数.要将函数赋给变量.浏览器允许你这么做，但是处理方式不同，这不是好消息. eslint: <a href="http://eslint.org/docs/rules/no-loop-func.html" target="_blank" rel="noopener"><code>no-loop-func</code></a></p><p><a name="functions--note-on-blocks"></a><a name="7.4"></a></p></li><li><p><a href="#functions--note-on-blocks">7.4</a> <strong>注意:</strong> ECMA-262定义了<code>block</code>作为一组语句的块. 函数声明不是语句. <a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97" target="_blank" rel="noopener">Read ECMA-262’s note on this issue</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> test;</span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  test = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="functions--arguments-shadow"></a><a name="7.5"></a></p></li><li><p><a href="#functions--arguments-shadow">7.5</a> 不要将参数命名为 <code>arguments</code>. 会导致该参数的优先级高于每个函数作用域内原先存在的<code>arguments</code>对象.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name, options, arguments</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name, options, args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="es6-rest"></a><a name="7.6"></a></p></li><li><p><a href="#es6-rest">7.6</a> 不要使用 <code>arguments</code>, 使用扩展语法 <code>...</code> . eslint: <a href="http://eslint.org/docs/rules/prefer-rest-params" target="_blank" rel="noopener"><code>prefer-rest-params</code></a></p><blockquote><p>原因：<code>...</code>是你想获得的参数列表，因此，扩展语法的参数是真正的数组，而<code>arguments</code>是类数组.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="es6-default-parameters"></a><a name="7.7"></a></p></li><li><p><a href="#es6-default-parameters">7.7</a> 使用参数默认值语法而不是修改函数参数.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// really bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// No! We shouldn't mutate function arguments.</span></span><br><span class="line">  <span class="comment">// Double bad: if opts is falsy it'll be set to an object which may</span></span><br><span class="line">  <span class="comment">// be what you want but it can introduce subtle bugs.</span></span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (opts === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    opts = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="functions--default-side-effects"></a><a name="7.8"></a></p></li><li><p><a href="#functions--default-side-effects">7.8</a> 避免参数默认值的副作用.</p><blockquote><p>原因：难以理解.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">a = b++</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">count();  <span class="comment">// 1</span></span><br><span class="line">count();  <span class="comment">// 2</span></span><br><span class="line">count(<span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line">count();  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><a name="functions--defaults-last"></a><a name="7.9"></a></p></li><li><p><a href="#functions--defaults-last">7.9</a> 将参数默认值放在最后.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;, name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">name, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="functions--constructor"></a><a name="7.10"></a></p></li><li><p><a href="#functions--constructor">7.10</a> 不要使用Function构造函数创建函数. eslint: <a href="http://eslint.org/docs/rules/no-new-func" target="_blank" rel="noopener"><code>no-new-func</code></a></p><blockquote><p>原因：此方式创建函数和对字符串使用eval()一样会产生漏洞.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a + b'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="keyword">var</span> subtract = <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a - b'</span>);</span><br></pre></td></tr></table></figure><p><a name="functions--signature-spacing"></a><a name="7.11"></a></p></li><li><p><a href="#functions--signature-spacing">7.11</a> 在函数签名中使用空格. eslint: <a href="http://eslint.org/docs/rules/space-before-function-paren" target="_blank" rel="noopener"><code>space-before-function-paren</code></a> <a href="http://eslint.org/docs/rules/space-before-blocks" target="_blank" rel="noopener"><code>space-before-blocks</code></a></p><blockquote><p>原因：统一为先，不应该在增删名字的同时增删空格.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> y = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p><a name="functions--mutate-params"></a><a name="7.12"></a></p></li><li><p><a href="#functions--mutate-params">7.12</a> 不要改变参数. eslint: <a href="http://eslint.org/docs/rules/no-param-reassign.html" target="_blank" rel="noopener"><code>no-param-reassign</code></a></p><blockquote><p>原因：操作作为参数传入的对象可能在原始调用中造成意想不到的变量副作用.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.key = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, <span class="string">'key'</span>) ? obj.key : <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="functions--reassign-params"></a><a name="7.13"></a></p></li><li><p><a href="#functions--reassign-params">7.13</a> 不要给参数重新赋值. eslint: <a href="http://eslint.org/docs/rules/no-param-reassign.html" target="_blank" rel="noopener"><code>no-param-reassign</code></a></p><blockquote><p>原因：参数重新赋值可能会导致无法预期的行为，尤其是当操作<code>arguments</code>对象时.也可能导致优化问题，尤其是在V8引擎中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!a) &#123; a = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> b = a || <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params">a = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="functions--spread-vs-apply"></a><a name="7.14"></a></p></li><li><p><a href="#functions--spread-vs-apply">7.14</a> 调用可变参数函数时建议使用扩展运算符<code>...</code>. eslint: <a href="http://eslint.org/docs/rules/prefer-spread" target="_blank" rel="noopener"><code>prefer-spread</code></a></p><blockquote><p>原因：显然你无需使用上下文，很难结合<code>new</code>和<code>apply</code>.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(...x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">new</span> (<span class="built_in">Function</span>.prototype.bind.apply(<span class="built_in">Date</span>, [<span class="literal">null</span>, <span class="number">2016</span>, <span class="number">8</span>, <span class="number">5</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(...[<span class="number">2016</span>, <span class="number">8</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure><p><a name="functions--signature-invocation-indentation"></a></p></li><li><p><a href="#functions--signature-invocation-indentation">7.15</a> 多行签名或调用的函数应该像此指南中其他多行列表一样被缩进:每一个独占一行,最后一个加一个逗号. eslint: <a href="https://eslint.org/docs/rules/function-paren-newline" target="_blank" rel="noopener"><code>function-paren-newline</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar,</span></span></span><br><span class="line"><span class="function"><span class="params">             baz,</span></span></span><br><span class="line"><span class="function"><span class="params">             quux</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  bar,</span></span></span><br><span class="line"><span class="function"><span class="params">  baz,</span></span></span><br><span class="line"><span class="function"><span class="params">  quux,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">console</span>.log(foo,</span><br><span class="line">  bar,</span><br><span class="line">  baz);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  foo,</span><br><span class="line">  bar,</span><br><span class="line">  baz,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>  <a name="arrows--use-them"></a><a name="8.1"></a></p><ul><li><p><a href="#arrows--use-them">8.1</a> 当你必须使用函数表达式（传递匿名函数）时，使用箭头函数标记. eslint: <a href="http://eslint.org/docs/rules/prefer-arrow-callback.html" target="_blank" rel="noopener"><code>prefer-arrow-callback</code></a>, <a href="http://eslint.org/docs/rules/arrow-spacing.html" target="_blank" rel="noopener"><code>arrow-spacing</code></a> jscs: <a href="http://jscs.info/rule/requireArrowFunctions" target="_blank" rel="noopener"><code>requireArrowFunctions</code></a></p><blockquote><p>原因：这会创建一个能在其中使用<code>this</code>上下文的函数，这是你想要的，语法也更明确.</p></blockquote><blockquote><p>不适用的地方：如果有一个相当复杂的函数，应该把逻辑放到自己的函数声明里.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="arrows--implicit-return"></a><a name="8.2"></a></p></li><li><p><a href="#arrows--implicit-return">8.2</a> 如果函数体只包含一条返回<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions" target="_blank" rel="noopener">表达式</a>的语句，可以省略花括号并使用隐式的return. 否则保留花括号并使用<code>return</code>语句. eslint: <a href="http://eslint.org/docs/rules/arrow-parens.html" target="_blank" rel="noopener"><code>arrow-parens</code></a>, <a href="http://eslint.org/docs/rules/arrow-body-style.html" target="_blank" rel="noopener"><code>arrow-body-style</code></a></p><blockquote><p>原因：语法糖.当进行多个函数的链式操作时可读性好.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = number + <span class="number">1</span>;</span><br><span class="line">  <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> <span class="string">`A string containing the <span class="subst">$&#123;number&#125;</span>.`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = number + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">number, index</span>) =&gt;</span> (&#123;</span><br><span class="line">  index: number</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// No implicit return with side effects</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> val = callback();</span><br><span class="line">  <span class="keyword">if</span> (val === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something if callback returns true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bool = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">foo(<span class="function"><span class="params">()</span> =&gt;</span> bool = <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">foo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  bool = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="arrows--paren-wrap"></a><a name="8.3"></a></p></li><li><p><a href="#arrows--paren-wrap">8.3</a> 一旦表达式跨多行，使用圆括号包裹以便更好阅读.</p><blockquote><p>原因：清晰展示了函数的开始和结束.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="string">'get'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>].map(<span class="function"><span class="params">httpMethod</span> =&gt;</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(</span><br><span class="line">    httpMagicObjectWithAVeryLongName,</span><br><span class="line">    httpMethod,</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="string">'get'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>].map(<span class="function"><span class="params">httpMethod</span> =&gt;</span> (</span><br><span class="line">  <span class="built_in">Object</span>.prototype.hasOwnProperty.call(</span><br><span class="line">    httpMagicObjectWithAVeryLongName,</span><br><span class="line">    httpMethod,</span><br><span class="line">  )</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p><a name="arrows--one-arg-parens"></a><a name="8.4"></a></p></li><li><p><a href="#arrows--one-arg-parens">8.4</a> 函数如果只有一个参数并且没用花括号，则省略圆括号. 否则为了清晰明确总是使用圆括号包裹参数.注意:总是使用圆括号也是可以接受的，eslint中的<a href="http://eslint.org/docs/rules/arrow-parens#always" target="_blank" rel="noopener">“always”选项</a>.eslint: <a href="http://eslint.org/docs/rules/arrow-parens.html" target="_blank" rel="noopener"><code>arrow-parens</code></a></p><blockquote><p>原因：看上去不混乱.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> (</span><br><span class="line">  <span class="string">`A long string with the <span class="subst">$&#123;number&#125;</span>. It’s so long that we’ve broken it `</span> +</span><br><span class="line">  <span class="string">'over multiple lines!'</span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="arrows--confusing"></a><a name="8.5"></a></p></li><li><p><a href="#arrows--confusing">8.5</a> 避免把箭头函数语法 (<code>=&gt;</code>) 和比较运算符 (<code>&lt;=</code>, <code>&gt;=</code>)弄混. eslint: <a href="http://eslint.org/docs/rules/no-confusing-arrow" target="_blank" rel="noopener"><code>no-confusing-arrow</code></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = <span class="function"><span class="params">item</span> =&gt;</span> item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = <span class="function">(<span class="params">item</span>) =&gt;</span> item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = <span class="function"><span class="params">item</span> =&gt;</span> (item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; height, largeSize, smallSize &#125; = item;</span><br><span class="line">  <span class="keyword">return</span> height &gt; <span class="number">256</span> ? largeSize : smallSize;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="whitespace--implicit-arrow-linebreak"></a></p></li><li><p><a href="#whitespace--implicit-arrow-linebreak">8.6</a> 注意有隐式返回函数体的箭头函数的位置. eslint: <a href="https://eslint.org/docs/rules/implicit-arrow-linebreak" target="_blank" rel="noopener"><code>implicit-arrow-linebreak</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(foo) =&gt;</span><br><span class="line">  bar;</span><br><span class="line"></span><br><span class="line">(foo) =&gt;</span><br><span class="line">  (bar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(foo) =&gt; bar;</span><br><span class="line">(foo) =&gt; (bar);</span><br><span class="line">(foo) =&gt; (</span><br><span class="line">   bar</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="类-amp-构造函数"><a href="#类-amp-构造函数" class="headerlink" title="类&amp;构造函数"></a>类&amp;构造函数</h2><p>  <a name="constructors--use-class"></a><a name="9.1"></a></p><ul><li><p><a href="#constructors--use-class">9.1</a> 总是使用 <code>class</code>. 避免直接操作 <code>prototype</code> .</p><blockquote><p>原因：<code>class</code>语法更明确和合理.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.queue = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(contents = []) &#123;</span><br><span class="line">    <span class="keyword">this</span>.queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="constructors--extends"></a><a name="9.2"></a></p></li><li><p><a href="#constructors--extends">9.2</a> 使用 <code>extends</code> 继承.</p><blockquote><p>原因：是实现继承功能而不会破坏<code>instanceof</code>的内置方法.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> inherits = <span class="built_in">require</span>(<span class="string">'inherits'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PeekableQueue</span>(<span class="params">contents</span>) </span>&#123;</span><br><span class="line">  Queue.apply(<span class="keyword">this</span>, contents);</span><br><span class="line">&#125;</span><br><span class="line">inherits(PeekableQueue, Queue);</span><br><span class="line">PeekableQueue.prototype.peek = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="constructors--chaining"></a><a name="9.3"></a></p></li><li><p><a href="#constructors--chaining">9.3</a> 方法可以返回<code>this</code>来进行链式调用.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> (<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line">luke.jump(); <span class="comment">// =&gt; true</span></span><br><span class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  jump() &#123;</span><br><span class="line">    <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line"></span><br><span class="line">luke.jump()</span><br><span class="line">  .setHeight(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><a name="constructors--tostring"></a><a name="9.4"></a></p></li><li><p><a href="#constructors--tostring">9.4</a> 在确保表现正常没有副作用的情况下可以实现自定义的toString()方法.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Jedi - <span class="subst">$&#123;<span class="keyword">this</span>.getName()&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="constructors--no-useless"></a><a name="9.5"></a></p></li><li><p><a href="#constructors--no-useless">9.5</a> 如果未声明构造函数，则类会有一个默认的构造函数. 没必要用空的构造函数或者将其委托给父类. eslint: <a href="http://eslint.org/docs/rules/no-useless-constructor" target="_blank" rel="noopener"><code>no-useless-constructor</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Rey'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="classes--no-duplicate-members"></a></p></li><li><p><a href="#classes--no-duplicate-members">9.6</a> 避免类成员重复. eslint: <a href="http://eslint.org/docs/rules/no-dupe-class-members" target="_blank" rel="noopener"><code>no-dupe-class-members</code></a></p><blockquote><p>原因：重复的类成员声明会默认使用最后声明的-有重复值基本就是bug.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>  <a name="modules--use-them"></a><a name="10.1"></a></p><ul><li><p><a href="#modules--use-them">10.1</a> 在非标准模块系统的基础上使用模块 (<code>import</code>/<code>export</code>) . 你可以将其转化为你更喜欢的模块系统.</p><blockquote><p>原因：模块是未来，让我们现在开始使用未来的特性.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = <span class="built_in">require</span>(<span class="string">'./AirbnbStyleGuide'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure><p><a name="modules--no-wildcard"></a><a name="10.2"></a></p></li><li><p><a href="#modules--no-wildcard">10.2</a> 不要使用通配符导入.</p><blockquote><p>原因：这会确保你只有一个默认的export.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br></pre></td></tr></table></figure><p><a name="modules--no-export-from-import"></a><a name="10.3"></a></p></li><li><p><a href="#modules--no-export-from-import">10.3</a> 不要从import中export.</p><blockquote><p>原因：很显然有一个明确的方法来import和export会保持一致性.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; es6 <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'./airbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure><p><a name="modules--no-duplicate-imports"></a></p></li><li><p><a href="#modules--no-duplicate-imports">10.4</a> 只允许在一个地方从一个路径import.<br>eslint: <a href="http://eslint.org/docs/rules/no-duplicate-imports" target="_blank" rel="noopener"><code>no-duplicate-imports</code></a></p><blockquote><p>原因：有多行同一个路径的import会使代码更难维护.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"><span class="comment">// … some other imports … //</span></span><br><span class="line"><span class="keyword">import</span> &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123;</span><br><span class="line">  named1,</span><br><span class="line">  named2,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br></pre></td></tr></table></figure><p><a name="modules--no-mutable-exports"></a></p></li><li><p><a href="#modules--no-mutable-exports">10.5</a> 不要export可变的绑定值.<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md" target="_blank" rel="noopener"><code>import/no-mutable-exports</code></a></p><blockquote><p>原因：通常来说可变应该被避免，尤其是在export绑定值的时候.通常来说，这个技术只在常量引用被导出的时候使用.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;</span><br></pre></td></tr></table></figure><p><a name="modules--prefer-default-export"></a></p></li><li><p><a href="#modules--prefer-default-export">10.6</a> 在单一export的模块中，建议export default而不是具名export.<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md" target="_blank" rel="noopener"><code>import/prefer-default-export</code></a></p><blockquote><p>原因：建议更多的文件只有一个export出口.有利于维护和阅读.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><a name="modules--imports-first"></a></p></li><li><p><a href="#modules--imports-first">10.7</a> 将所有的<code>import</code>放在非<code>import</code>语句前.<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/imports-first.md" target="_blank" rel="noopener"><code>import/imports-first</code></a></p><blockquote><p>原因：由于<code>import</code>会被提前，将其全部置于顶部会避免意外行为.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line">foo.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line">foo.init();</span><br></pre></td></tr></table></figure><p><a name="modules--multiline-imports-over-newlines"></a></p></li><li><p><a href="#modules--multiline-imports-over-newlines">10.8</a> 多行import应该像多行数组和对象字面量一样被缩进.</p><blockquote><p>原因：花括号遵循此规范中其他花括号块同样的缩进规则，同样要加尾逗号.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> &#123;longNameA, longNameB, longNameC, longNameD, longNameE&#125; <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  longNameA,</span><br><span class="line">  longNameB,</span><br><span class="line">  longNameC,</span><br><span class="line">  longNameD,</span><br><span class="line">  longNameE,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'path'</span>;</span><br></pre></td></tr></table></figure><p><a name="modules--no-webpack-loader-syntax"></a></p></li><li><p><a href="#modules--no-webpack-loader-syntax">10.9</a> 在模块import声明中禁止Webpack的加载器语法.<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md" target="_blank" rel="noopener"><code>import/no-webpack-loader-syntax</code></a></p><blockquote><p>原因:在import中使用Webpack语法会导致代码耦合到模块绑定中。建议在<code>webpack.config.js</code>中使用加载器语法.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> fooSass <span class="keyword">from</span> <span class="string">'css!sass!foo.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> barCss <span class="keyword">from</span> <span class="string">'style!css!bar.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> fooSass <span class="keyword">from</span> <span class="string">'foo.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> barCss <span class="keyword">from</span> <span class="string">'bar.css'</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h2><p>  <a name="iterators--nope"></a><a name="11.1"></a></p><ul><li><p><a href="#iterators--nope">11.1</a> 不要使用迭代器.建议使用JS更高优先级的函数代替<code>for-in</code> 或 <code>for-of</code>循环. eslint: <a href="http://eslint.org/docs/rules/no-iterator.html" target="_blank" rel="noopener"><code>no-iterator</code></a> <a href="http://eslint.org/docs/rules/no-restricted-syntax" target="_blank" rel="noopener"><code>no-restricted-syntax</code></a></p><blockquote><p>原因：这会强化不可变的规则.处理返回值的纯函数要比消除副作用容易.</p></blockquote><blockquote><p>使用 <code>map()</code> / <code>every()</code> / <code>filter()</code> / <code>find()</code> / <code>findIndex()</code> / <code>reduce()</code> / <code>some()</code> / … 来遍历数组, 用 <code>Object.keys()</code> / <code>Object.values()</code> / <code>Object.entries()</code> 来制造数组以便能对对象进行迭代.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">  sum += num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  sum += num;</span><br><span class="line">&#125;);</span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> increasedByOne = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">  increasedByOne.push(numbers[i] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> increasedByOne = [];</span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  increasedByOne.push(num + <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best (keeping it functional)</span></span><br><span class="line"><span class="keyword">const</span> increasedByOne = numbers.map(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><a name="generators--nope"></a><a name="11.2"></a></p></li><li><p><a href="#generators--nope">11.2</a> 现在不要使用生成器.</p><blockquote><p>原因：不能很好地翻译为ES5.</p></blockquote><p><a name="generators--spacing"></a></p></li><li><p><a href="#generators--spacing">11.3</a> 如果你非得使用生成器或者无视 <a href="#generators--nope">建议</a>, 请确保函数签名中的空格正确. eslint: <a href="http://eslint.org/docs/rules/generator-star-spacing" target="_blank" rel="noopener"><code>generator-star-spacing</code></a></p><blockquote><p>原因：<code>function</code> 和 <code>*</code>是同一个概念 - <code>*</code>不是<code>function</code>的修饰符，<code>function*是不同于</code>function<code>的独特的构造函数</code>.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="function"><span class="keyword">function</span> * (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> quux = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>*<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// very bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">*</span></span><br><span class="line"><span class="function"><span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// very bad</span></span><br><span class="line"><span class="keyword">const</span> wat = <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">*</span></span><br><span class="line"><span class="function">(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>  <a name="properties--dot"></a><a name="12.1"></a></p><ul><li><p><a href="#properties--dot">12.1</a> 访问属性时使用<code>.</code>. eslint: <a href="http://eslint.org/docs/rules/dot-notation.html" target="_blank" rel="noopener"><code>dot-notation</code></a> jscs: <a href="http://jscs.info/rule/requireDotNotation" target="_blank" rel="noopener"><code>requireDotNotation</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> isJedi = luke[<span class="string">'jedi'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> isJedi = luke.jedi;</span><br></pre></td></tr></table></figure><p><a name="properties--bracket"></a><a name="12.2"></a></p></li><li><p><a href="#properties--bracket">12.2</a> 当访问的属性是变量时使用 <code>[]</code> .</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> luke[prop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isJedi = getProp(<span class="string">'jedi'</span>);</span><br></pre></td></tr></table></figure><p><a name="es2016-properties--exponentiation-operator"></a></p></li><li><p><a href="#es2016-properties--exponentiation-operator">12.3</a> 进行幂次运算时使用 <code>**</code> . eslint: <a href="https://eslint.org/docs/rules/no-restricted-properties" target="_blank" rel="noopener"><code>no-restricted-properties</code></a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> binary = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> binary = <span class="number">2</span> ** <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>  <a name="variables--const"></a><a name="13.1"></a></p><ul><li><p><a href="#variables--const">13.1</a> 总是使用 <code>const</code> 或者 <code>let</code> 声明变量. 不这么做会导致全局变量问题. 要避免污染全局命名空间. Captain Plannet警告过我们.eslint: <a href="http://eslint.org/docs/rules/no-undef" target="_blank" rel="noopener"><code>no-undef</code></a> <a href="http://eslint.org/docs/rules/prefer-const" target="_blank" rel="noopener"><code>prefer-const</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">superPower = <span class="keyword">new</span> SuperPower();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> superPower = <span class="keyword">new</span> SuperPower();</span><br></pre></td></tr></table></figure><p><a name="variables--one-const"></a><a name="13.2"></a></p></li><li><p><a href="#variables--one-const">13.2</a> 每个变量声明前都要使用<code>const</code>或者<code>let</code>. eslint: <a href="http://eslint.org/docs/rules/one-var.html" target="_blank" rel="noopener"><code>one-var</code></a> jscs: <a href="http://jscs.info/rule/disallowMultipleVarDecl" target="_blank" rel="noopener"><code>disallowMultipleVarDecl</code></a></p><blockquote><p>原因：这种方式更易添加变量声明，不用考虑将<code>;</code>变成<code>,</code>.用debugger逐个调试也很方便，而不是一次跳过所有变量.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>,</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// (compare to above, and try to spot the mistake)</span></span><br><span class="line"><span class="keyword">const</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> dragonball = <span class="string">'z'</span>;</span><br></pre></td></tr></table></figure><p><a name="variables--const-let-group"></a><a name="13.3"></a></p></li><li><p><a href="#variables--const-let-group">13.3</a> 将 <code>const</code> 和 <code>let</code> 分别放到一起.</p><blockquote><p>原因：当需要给依赖前一个已经赋值的变量的变量赋值时很有用.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i, len, dragonball,</span><br><span class="line">    items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">let</span> length;</span><br></pre></td></tr></table></figure><p><a name="variables--define-where-used"></a><a name="13.4"></a></p></li><li><p><a href="#variables--define-where-used">13.4</a> 在需要的地方给变量赋值，但位置要合理.</p><blockquote><p>原因：<code>let</code> 和 <code>const</code> 是块级作用域而不是函数级作用域.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad - unnecessary function call</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">hasName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasName === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setName(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">hasName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hasName === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setName(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="variables--no-chain-assignment"></a><a name="13.5"></a></p></li><li><p><a href="#variables--no-chain-assignment">13.5</a> 变量不要进行链式赋值.</p><blockquote><p>原因：变量链式赋值会创建隐藏的全局变量.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// JavaScript interprets this as</span></span><br><span class="line">  <span class="comment">// let a = ( b = ( c = 1 ) );</span></span><br><span class="line">  <span class="comment">// The let keyword only applies to variable a; variables b and c become</span></span><br><span class="line">  <span class="comment">// global variables.</span></span><br><span class="line">  <span class="keyword">let</span> a = b = c = <span class="number">1</span>;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// throws ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> b = a;</span><br><span class="line">  <span class="keyword">let</span> c = a;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// throws ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// throws ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// throws ReferenceError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the same applies for `const`</span></span><br></pre></td></tr></table></figure><p><a name="variables--unary-increment-decrement"></a><a name="13.6"></a></p></li><li><p><a href="#variables--unary-increment-decrement">13.6</a> 避免使用自增和自减一元运算符 (++, –). eslint <a href="http://eslint.org/docs/rules/no-plusplus" target="_blank" rel="noopener"><code>no-plusplus</code></a></p><blockquote><p>原因:根据eslint文档,自增和自减一元运算符收到分号自动插入的影响可能在应用内部引发自增和自减值的隐蔽错误.用像<code>num += 1</code>的语句而不是<code>num++</code>或<code>num ++</code>来修改值更有表达力.禁止一元自增和自减语句也避免了前置自增/前置自减值在程序中引起的不可预期的行为的副作用.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">num++;</span><br><span class="line">--num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> truthyCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = array[i];</span><br><span class="line">  sum += value;</span><br><span class="line">  <span class="keyword">if</span> (value) &#123;</span><br><span class="line">    truthyCount++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">num += <span class="number">1</span>;</span><br><span class="line">num -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = array.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> truthyCount = array.filter(<span class="built_in">Boolean</span>).length;</span><br></pre></td></tr></table></figure></li></ul><p><a name="variables--linebreak"></a></p><ul><li><p><a href="#variables--linebreak">13.7</a> 避免在赋值中的<code>=</code>前后换行. 如果要换行的话使用圆括号包裹 <a href="https://eslint.org/docs/rules/max-len.html" target="_blank" rel="noopener"><code>max-len</code></a>. eslint <a href="https://eslint.org/docs/rules/operator-linebreak.html" target="_blank" rel="noopener"><code>operator-linebreak</code></a>.</p><blockquote><p>原因? <code>=</code>周围的换行会混淆赋值.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo =</span><br><span class="line">  superLongLongLongLongLongLongLongLongFunctionName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo</span><br><span class="line">  = <span class="string">'superLongLongLongLongLongLongLongLongString'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = (</span><br><span class="line">  superLongLongLongLongLongLongLongLongFunctionName()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'superLongLongLongLongLongLongLongLongString'</span>;</span><br></pre></td></tr></table></figure><p><a name="variables--no-unused-vars"></a></p></li><li><p><a href="#variables--no-unused-vars">13.8</a> 不允许出现未被使用的变量. eslint: <a href="https://eslint.org/docs/rules/no-unused-vars" target="_blank" rel="noopener"><code>no-unused-vars</code></a></p><blockquote><p>原因：声明但未被使用的变量通常是不完全重构犯下的错误.这种变量在代码里浪费空间并会给读者造成困扰.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> some_unused_var = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write-only variables are not considered as used.</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">10</span>;</span><br><span class="line">y = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A read for a modification of itself is not considered as used.</span></span><br><span class="line"><span class="keyword">var</span> z = <span class="number">0</span>;</span><br><span class="line">z = z + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unused function arguments.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getX</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getXPlusY</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> y = a + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">alert(getXPlusY(x, y));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 'type' is ignored even if unused because it has a rest property sibling.</span></span><br><span class="line"><span class="comment">// This is a form of extracting an object that omits the specified keys.</span></span><br><span class="line"><span class="keyword">var</span> &#123; type, ...coords &#125; = data;</span><br><span class="line"><span class="comment">// 'coords' is now the 'data' object without its 'type' property.</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>  <a name="hoisting--about"></a><a name="14.1"></a></p><ul><li><p><a href="#hoisting--about">14.1</a> <code>var</code>声明会被提升到最近的闭合函数作用域的顶部, 但是赋值不会. <code>const</code> 和 <code>let</code> 声明有一个新的概念叫 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let" target="_blank" rel="noopener">临时死区 (TDZ)</a>. 了解 <a href="http://es-discourse.com/t/why-typeof-is-no-longer-safe/15" target="_blank" rel="noopener">typeof不再安全</a>很重要.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// we know this wouldn't work (assuming there</span></span><br><span class="line"><span class="comment">// is no notDefined global variable)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(notDefined); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// creating a variable declaration after you</span></span><br><span class="line"><span class="comment">// reference the variable will work due to</span></span><br><span class="line"><span class="comment">// variable hoisting. Note: the assignment</span></span><br><span class="line"><span class="comment">// value of `true` is not hoisted.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  <span class="keyword">var</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the interpreter is hoisting the variable</span></span><br><span class="line"><span class="comment">// declaration to the top of the scope,</span></span><br><span class="line"><span class="comment">// which means our example could be rewritten as:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> declaredButNotAssigned;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// using const and let</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> declaredButNotAssigned); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">  <span class="keyword">const</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="hoisting--anon-expressions"></a><a name="14.2"></a></p></li><li><p><a href="#hoisting--anon-expressions">14.2</a> 匿名函数表达式会提升变量名字而不是函数赋值.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(anonymous); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  anonymous(); <span class="comment">// =&gt; TypeError anonymous is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'anonymous function expression'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="hoisting--named-expressions"></a><a name="14.3"></a></p></li><li><p><a href="#hoisting--named-expressions">14.3</a> 具名函数表达式提升变量名字而不是函数名字或函数体.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  superPower(); <span class="comment">// =&gt; ReferenceError superPower is not defined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the same is true when the function name</span></span><br><span class="line"><span class="comment">// is the same as the variable name.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'named'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="hoisting--declarations"></a><a name="14.4"></a></p></li><li><p><a href="#hoisting--declarations">14.4</a> 函数声明会提升函数名和函数体.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  superPower(); <span class="comment">// =&gt; Flying</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更多信息请参考 <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/" target="_blank" rel="noopener">JavaScript Scoping &amp; Hoisting</a> by <a href="http://www.adequatelygood.com/" target="_blank" rel="noopener">Ben Cherry</a>.</p></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="比较运算符-amp-相等"><a href="#比较运算符-amp-相等" class="headerlink" title="比较运算符&amp;相等"></a>比较运算符&amp;相等</h2><p>  <a name="comparison--eqeqeq"></a><a name="15.1"></a></p><ul><li><p><a href="#comparison--eqeqeq">15.1</a> 使用 <code>===</code> 和 <code>!==</code>而非 <code>==</code> 和 <code>!=</code>. eslint: <a href="http://eslint.org/docs/rules/eqeqeq.html" target="_blank" rel="noopener"><code>eqeqeq</code></a></p><p><a name="comparison--if"></a><a name="15.2"></a></p></li><li><p><a href="#comparison--if">15.2</a> 条件声明例如 <code>if</code> 会用 <code>ToBoolean</code> 这个抽象方法将表达式转成布尔值并遵循如下规则:</p><ul><li><strong>Objects</strong> 等于 <strong>true</strong></li><li><strong>Undefined</strong> 等于 <strong>false</strong></li><li><strong>Null</strong> 等于 <strong>false</strong></li><li><strong>Booleans</strong> 等于 <strong>布尔值</strong></li><li><strong>Numbers</strong> 在 <strong>+0, -0, or NaN</strong>的情况下等于<strong>false</strong>, 其他情况是 <strong>true</strong></li><li><strong>Strings</strong> 为<code>&#39;&#39;</code>时等于 <strong>false</strong> , 否则是 <strong>true</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="number">0</span>] &amp;&amp; []) &#123;</span><br><span class="line">  <span class="comment">// true</span></span><br><span class="line">  <span class="comment">// 数组(即使是空数组)也是对象，对象等于true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comparison--shortcuts"></a><a name="15.3"></a></p></li><li><p><a href="#comparison--shortcuts">15.3</a> 对于布尔值使用简写，但对于字符串和数字要显式比较.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (isValid === <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (isValid) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comparison--moreinfo"></a><a name="15.4"></a></p></li><li><p><a href="#comparison--moreinfo">15.4</a> 更多信息请见 <a href="http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="noopener">Truth Equality and JavaScript</a> by Angus Croll.</p><p><a name="comparison--switch-blocks"></a><a name="15.5"></a></p></li><li><p><a href="#comparison--switch-blocks">15.5</a> 在用 <code>case</code> 和 <code>default</code> 语句创建的包含有如下词语(如 <code>let</code>, <code>const</code>, <code>function</code> 和 <code>class</code>)的代码块中使用花括号 .</p><blockquote><p>原因：这些词语在整个<code>switch</code>中可见但是仅仅在当执行到<code>case</code>时被赋值的时候初始化.当多条<code>case</code>语句试图定义同一个变量时会导致问题.</p></blockquote><p>eslint rules: <a href="http://eslint.org/docs/rules/no-case-declarations.html" target="_blank" rel="noopener"><code>no-case-declarations</code></a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">switch</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">switch</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">    <span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    bar();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comparison--nested-ternaries"></a><a name="15.6"></a></p></li><li><p><a href="#comparison--nested-ternaries">15.6</a> 通常三元运算是单行表达式,不应该被嵌套. eslint: <a href="http://eslint.org/docs/rules/no-nested-ternary.html" target="_blank" rel="noopener"><code>no-nested-ternary</code></a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2</span><br><span class="line">  ? <span class="string">"bar"</span></span><br><span class="line">  : value1 &gt; value2 ? <span class="string">"baz"</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line"><span class="keyword">const</span> maybeNull = value1 &gt; value2 ? <span class="string">'baz'</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2</span><br><span class="line">  ? <span class="string">'bar'</span></span><br><span class="line">  : maybeNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> maybeNull = value1 &gt; value2 ? <span class="string">'baz'</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2 ? <span class="string">'bar'</span> : maybeNull;</span><br></pre></td></tr></table></figure><p><a name="comparison--unneeded-ternary"></a><a name="15.7"></a></p></li><li><p><a href="#comparison--unneeded-ternary">15.7</a> 避免不必要的三元表达式.</p><p>eslint rules: <a href="http://eslint.org/docs/rules/no-unneeded-ternary.html" target="_blank" rel="noopener"><code>no-unneeded-ternary</code></a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = a ? a : b;</span><br><span class="line"><span class="keyword">const</span> bar = c ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> baz = c ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = a || b;</span><br><span class="line"><span class="keyword">const</span> bar = !!c;</span><br><span class="line"><span class="keyword">const</span> baz = !c;</span><br></pre></td></tr></table></figure><p><a name="comparison--no-mixed-operators"></a></p></li><li><p><a href="#comparison--no-mixed-operators">15.8</a> 声明语句中有多个运算符时用圆括号包裹运算符. 当有多个数学运算符时,不要混合 <code>**</code> 和 <code>%</code> 或者 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>. eslint: <a href="https://eslint.org/docs/rules/no-mixed-operators.html" target="_blank" rel="noopener"><code>no-mixed-operators</code></a></p><blockquote><p>原因? 提高可读性并表明了开发者的意图.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = a &amp;&amp; b &lt; <span class="number">0</span> || c &gt; <span class="number">0</span> || d + <span class="number">1</span> === <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> bar = a ** b - <span class="number">5</span> % d;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// one may be confused into thinking (a || b) &amp;&amp; c</span></span><br><span class="line"><span class="keyword">if</span> (a || b &amp;&amp; c) &#123;</span><br><span class="line">  <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = (a &amp;&amp; b &lt; <span class="number">0</span>) || c &gt; <span class="number">0</span> || (d + <span class="number">1</span> === <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> bar = (a ** b) - (<span class="number">5</span> % d);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (a || (b &amp;&amp; c)) &#123;</span><br><span class="line">  <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> bar = a + b / c * d;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="块"><a href="#块" class="headerlink" title="块"></a>块</h2><p>  <a name="blocks--braces"></a><a name="16.1"></a></p><ul><li><p><a href="#blocks--braces">16.1</a> 多行代码块使用花括号. eslint: <a href="https://eslint.org/docs/rules/nonblock-statement-body-position" target="_blank" rel="noopener"><code>nonblock-statement-body-position</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="blocks--cuddled-elses"></a><a name="16.2"></a></p></li><li><p><a href="#blocks--cuddled-elses">16.2</a> 如果使用<code>if</code>和<code>else</code>多行代码块，把<code>else</code>放到和<code>if</code>块的闭合括号同一行. eslint: <a href="http://eslint.org/docs/rules/brace-style.html" target="_blank" rel="noopener"><code>brace-style</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="blocks--no-else-return"></a><a name="16.3"></a></p></li><li><p><a href="#blocks--no-else-return">16.3</a> 如果 <code>if</code> 块总是执行 <code>return</code> 声明, 随后的 <code>else</code> 块是不必要的. 跟随<code>if</code>块的<code>else if</code>块中包含的<code>return</code>可以被拆成多个<code>if</code>块. eslint: <a href="https://eslint.org/docs/rules/no-else-return" target="_blank" rel="noopener"><code>no-else-return</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cats</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y) &#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dogs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (y) &#123;</span><br><span class="line">      <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cats</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (y) &#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dogs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z) &#123;</span><br><span class="line">      <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><p>  <a name="control-statements"></a></p><ul><li><p><a href="#control-statements">17.1</a> 一旦你的控制语句 (<code>if</code>, <code>while</code> 等.) 太长或者超出行宽最大长度,每一个(组)条件要被放到新行.逻辑运算符应该在写在行的开头.</p><blockquote><p>原因：行开头有运算符可以使运算符有像链式方法一样的形式.这对于追踪复杂逻辑能够提高可读性.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// bad</span></span><br><span class="line">   <span class="keyword">if</span> ((foo === <span class="number">123</span> || bar === <span class="string">'abc'</span>) &amp;&amp; doesItLookGoodWhenItBecomesThatLong() &amp;&amp; isThisReallyHappening()) &#123;</span><br><span class="line">     thing1();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// bad</span></span><br><span class="line">   <span class="keyword">if</span> (foo === <span class="number">123</span> &amp;&amp;</span><br><span class="line">     bar === <span class="string">'abc'</span>) &#123;</span><br><span class="line">     thing1();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// bad</span></span><br><span class="line">   <span class="keyword">if</span> (foo === <span class="number">123</span></span><br><span class="line">     &amp;&amp; bar === <span class="string">'abc'</span>) &#123;</span><br><span class="line">     thing1();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// bad</span></span><br><span class="line">   <span class="keyword">if</span> (</span><br><span class="line">     foo === <span class="number">123</span> &amp;&amp;</span><br><span class="line">     bar === <span class="string">'abc'</span></span><br><span class="line">   ) &#123;</span><br><span class="line">     thing1();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">   <span class="keyword">if</span> (</span><br><span class="line">     foo === <span class="number">123</span></span><br><span class="line">     &amp;&amp; bar === <span class="string">'abc'</span></span><br><span class="line">   ) &#123;</span><br><span class="line">     thing1();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// good</span></span><br><span class="line">   <span class="keyword">if</span> (</span><br><span class="line">     (foo === <span class="number">123</span> || bar === <span class="string">"abc"</span>)</span><br><span class="line">     &amp;&amp; doesItLookGoodWhenItBecomesThatLong()</span><br><span class="line">     &amp;&amp; isThisReallyHappening()</span><br><span class="line">   ) &#123;</span><br><span class="line">     thing1();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// good</span></span><br><span class="line">   <span class="keyword">if</span> (foo === <span class="number">123</span> &amp;&amp; bar === <span class="string">'abc'</span>) &#123;</span><br><span class="line">     thing1();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><a name="control-statement--value-selection"></a></p></li><li><p><a href="#control-statements--value-selection">17.2</a> 不要使用选择运算符代替控制语句.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">!isRunning &amp;&amp; startRunning();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!isRunning) &#123;</span><br><span class="line">  startRunning();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>  <a name="comments--multiline"></a><a name="18.1"></a></p><ul><li><p><a href="#comments--multiline">18.1</a> 多行注释使用 <code>/** ... */</code> . 包含描述，指定所有参数的类型和值和返回值.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// make() returns a new element</span></span><br><span class="line"><span class="comment">// based on the passed in tag name</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @param &#123;String&#125; tag</span></span><br><span class="line"><span class="comment">// @return &#123;Element&#125; element</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * make() returns a new element</span></span><br><span class="line"><span class="comment"> * based on the passed in tag name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comments--singleline"></a><a name="18.2"></a></p></li><li><p><a href="#comments--singleline">18.2</a> 单行注释使用 <code>//</code>. 在要注释部分的上边一行放置注释. 如果不是块的第一行则在注释前留一个空行.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// is current tab</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// also good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comments--spaces"></a><a name="18.3"></a></p></li><li><p><a href="#comments--spaces">18.3</a> 所有注释都要以空格开头便于阅读. eslint: <a href="http://eslint.org/docs/rules/spaced-comment" target="_blank" rel="noopener"><code>spaced-comment</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">//is current tab</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// is current tab</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *make() returns a new element</span></span><br><span class="line"><span class="comment"> *based on the passed-in tag name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * make() returns a new element</span></span><br><span class="line"><span class="comment"> * based on the passed-in tag name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comments--actionitems"></a><a name="18.4"></a></p></li><li><p><a href="#comments--actionitems">18.4</a> 如果想表明这个问题以后会再次被查看或者给出了这个问题的解决方案，在注释前加上前缀<code>FIXME</code>或者<code>TODO</code>会有利于很快理解问题. 这些不同于一般的注释因为它们是可操作的. 操作是 <code>FIXME: -- need to figure this out</code> 或 <code>TODO: -- need to implement</code>.</p><p><a name="comments--fixme"></a><a name="18.5"></a></p></li><li><p><a href="#comments--fixme">18.5</a> 使用 <code>// FIXME:</code> 来标注问题.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Abacus</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> shouldn't use a global here</span></span><br><span class="line">    total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comments--todo"></a><a name="18.6"></a></p></li><li><p><a href="#comments--todo">18.6</a> 使用 <code>// TODO:</code> 来标明问题的解决方案.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Abacus</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></span><br><span class="line">    <span class="keyword">this</span>.total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>  <a name="whitespace--spaces"></a><a name="19.1"></a></p><ul><li><p><a href="#whitespace--spaces">19.1</a> 将软tab设置为两个空格. eslint: <a href="http://eslint.org/docs/rules/indent.html" target="_blank" rel="noopener"><code>indent</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙∙∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="whitespace--before-blocks"></a><a name="19.2"></a></p></li><li><p><a href="#whitespace--before-blocks">19.2</a> 在起始花括号前加一个空格. eslint: <a href="http://eslint.org/docs/rules/space-before-blocks.html" target="_blank" rel="noopener"><code>space-before-blocks</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>,&#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>, &#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="whitespace--around-keywords"></a><a name="19.3"></a></p></li><li><p><a href="#whitespace--around-keywords">19.3</a> 在控制语句的圆括号前加一个空格 (<code>if</code>, <code>while</code> 等). 在函数调用和声明中在参数列表和函数名间不要放置空格. eslint: <a href="http://eslint.org/docs/rules/keyword-spacing.html" target="_blank" rel="noopener"><code>keyword-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span>(isJedi) &#123;</span><br><span class="line">  fight ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (isJedi) &#123;</span><br><span class="line">  fight();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log (<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="whitespace--infix-ops"></a><a name="19.4"></a></p></li><li><p><a href="#whitespace--infix-ops">19.4</a> 操作符两边放置空格. eslint: <a href="http://eslint.org/docs/rules/space-infix-ops.html" target="_blank" rel="noopener"><code>space-infix-ops</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> x=y+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = y + <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><a name="whitespace--newline-at-end"></a><a name="19.5"></a></p></li><li><p><a href="#whitespace--newline-at-end">19.5</a> 用空行结束文件. eslint: <a href="https://github.com/eslint/eslint/blob/master/docs/rules/eol-last.md" target="_blank" rel="noopener"><code>eol-last</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;↵</span><br><span class="line">↵</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;↵</span><br></pre></td></tr></table></figure><p><a name="whitespace--chains"></a><a name="19.6"></a></p></li><li><p><a href="#whitespace--chains">19.6</a> 进行长的函数链式调用时使用缩进(超过两个方法的链式调用).为了强调该行是方法调用而不是新的语句声明要用.开头. eslint: <a href="http://eslint.org/docs/rules/newline-per-chained-call" target="_blank" rel="noopener"><code>newline-per-chained-call</code></a> <a href="http://eslint.org/docs/rules/no-whitespace-before-property" target="_blank" rel="noopener"><code>no-whitespace-before-property</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).</span><br><span class="line">  find(<span class="string">'.selected'</span>).</span><br><span class="line">    highlight().</span><br><span class="line">    end().</span><br><span class="line">  find(<span class="string">'.open'</span>).</span><br><span class="line">    updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'#items'</span>)</span><br><span class="line">  .find(<span class="string">'.selected'</span>)</span><br><span class="line">    .highlight()</span><br><span class="line">    .end()</span><br><span class="line">  .find(<span class="string">'.open'</span>)</span><br><span class="line">    .updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">  .enter().append(<span class="string">'svg:svg'</span>)</span><br><span class="line">    .classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>)</span><br><span class="line">  .append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data);</span><br></pre></td></tr></table></figure><p><a name="whitespace--after-blocks"></a><a name="19.7"></a></p></li><li><p><a href="#whitespace--after-blocks">19.7</a> 在代码块结束和下一个声明前留一个空行.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  bar() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  bar() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arr;</span><br></pre></td></tr></table></figure><p><a name="whitespace--padded-blocks"></a><a name="19.8"></a></p></li><li><p><a href="#whitespace--padded-blocks">19.8</a> 不要在代码块中使用空行填充. eslint: <a href="http://eslint.org/docs/rules/padded-blocks.html" target="_blank" rel="noopener"><code>padded-blocks</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// also bad</span></span><br><span class="line"><span class="keyword">if</span> (baz) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(qux);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (baz) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(qux);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="whitespace--in-parens"></a><a name="19.9"></a></p></li><li><p><a href="#whitespace--in-parens">19.9</a> 圆括号中不要添加空格. eslint: <a href="http://eslint.org/docs/rules/space-in-parens.html" target="_blank" rel="noopener"><code>space-in-parens</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"> foo </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">foo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> ( foo ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="whitespace--in-brackets"></a><a name="19.10"></a></p></li><li><p><a href="#whitespace--in-brackets">19.10</a> 不要在方括号内添加空格. eslint: <a href="http://eslint.org/docs/rules/array-bracket-spacing.html" target="_blank" rel="noopener"><code>array-bracket-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</span><br><span class="line"><span class="built_in">console</span>.log(foo[ <span class="number">0</span> ]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p><a name="whitespace--in-braces"></a><a name="19.11"></a></p></li><li><p><a href="#whitespace--in-braces">19.11</a> 在花括号中添加空格. eslint: <a href="http://eslint.org/docs/rules/object-curly-spacing.html" target="_blank" rel="noopener"><code>object-curly-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = &#123;<span class="attr">clark</span>: <span class="string">'kent'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;;</span><br></pre></td></tr></table></figure><p><a name="whitespace--max-len"></a><a name="19.12"></a></p></li><li><p><a href="#whitespace--max-len">19.12</a>  避免一行代码超过100个字符(包括空格). 注意: <a href="#strings--line-length">above</a>,不包括整体不应该被分割的长字符串. eslint: <a href="http://eslint.org/docs/rules/max-len.html" target="_blank" rel="noopener"><code>max-len</code></a></p><blockquote><p>原因：确保可读性和可维护性.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = jsonData &amp;&amp; jsonData.foo &amp;&amp; jsonData.foo.bar &amp;&amp; jsonData.foo.bar.baz &amp;&amp; jsonData.foo.bar.baz.quux &amp;&amp; jsonData.foo.bar.baz.quux.xyzzy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$.ajax(&#123; <span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: <span class="string">'https://airbnb.com/'</span>, <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">'John'</span> &#125; &#125;).done(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Congratulations!'</span>)).fail(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'You have failed this city.'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = jsonData</span><br><span class="line">  &amp;&amp; jsonData.foo</span><br><span class="line">  &amp;&amp; jsonData.foo.bar</span><br><span class="line">  &amp;&amp; jsonData.foo.bar.baz</span><br><span class="line">  &amp;&amp; jsonData.foo.bar.baz.quux</span><br><span class="line">  &amp;&amp; jsonData.foo.bar.baz.quux.xyzzy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  url: <span class="string">'https://airbnb.com/'</span>,</span><br><span class="line">  data: &#123; <span class="attr">name</span>: <span class="string">'John'</span> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">  .done(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Congratulations!'</span>))</span><br><span class="line">  .fail(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'You have failed this city.'</span>));</span><br></pre></td></tr></table></figure><p><a name="whitespace--block-spacing"></a></p></li><li><p><a href="#whitespace--block-spacing">19.13</a> 在同一行中开放代码块的内部开始和结束的部分空格数保持一致. 此规则亦适用于单行的闭合代码块. eslint: <a href="https://eslint.org/docs/rules/block-spacing" target="_blank" rel="noopener"><code>block-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123; bar = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123; bar = <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p><a name="whitespace--comma-spacing"></a></p></li><li><p><a href="#whitespace--comma-spacing">19.14</a> 逗号前不要加空格，逗号后要加空格. eslint: <a href="https://eslint.org/docs/rules/comma-spacing" target="_blank" rel="noopener"><code>comma-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>,bar = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span> , <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>, bar = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure><p><a name="whitespace--computed-property-spacing"></a></p></li><li><p><a href="#whitespace--computed-property-spacing">19.15</a> Enforce spacing inside of computed properties. eslint: <a href="https://eslint.org/docs/rules/computed-property-spacing" target="_blank" rel="noopener"><code>computed-property-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">obj[foo ]</span><br><span class="line">obj[ <span class="string">'foo'</span>]</span><br><span class="line"><span class="keyword">var</span> x = &#123;[ b ]: a&#125;</span><br><span class="line">obj[foo[ bar ]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">obj[foo]</span><br><span class="line">obj[<span class="string">'foo'</span>]</span><br><span class="line"><span class="keyword">var</span> x = &#123; [b]: a &#125;</span><br><span class="line">obj[foo[bar]]</span><br></pre></td></tr></table></figure><p><a name="whitespace--func-call-spacing"></a></p></li><li><p><a href="#whitespace--func-call-spacing">19.16</a> 在函数名和调用间不要加空格. eslint: <a href="https://eslint.org/docs/rules/func-call-spacing" target="_blank" rel="noopener"><code>func-call-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">func ();</span><br><span class="line"></span><br><span class="line">func</span><br><span class="line">();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">func();</span><br></pre></td></tr></table></figure></li></ul><p><a name="whitespace--key-spacing"></a></p><ul><li><p><a href="#whitespace--key-spacing">19.17</a> 对象字面量属性的键和值之间要强制使用空格. eslint: <a href="https://eslint.org/docs/rules/key-spacing" target="_blank" rel="noopener"><code>key-spacing</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">"foo"</span> : <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="string">"foo"</span>:<span class="number">42</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">"foo"</span>: <span class="number">42</span> &#125;;</span><br></pre></td></tr></table></figure><p><a name="whitespace--no-trailing-spaces"></a></p></li><li><p><a href="#whitespace--no-trailing-spaces">19.18</a> 避免行末尾的空格. eslint: <a href="https://eslint.org/docs/rules/no-trailing-spaces" target="_blank" rel="noopener"><code>no-trailing-spaces</code></a></p><p><a name="whitespace--no-multiple-empty-lines"></a></p></li><li><p><a href="#whitespace--no-multiple-empty-lines">19.19</a> 避免多个空行，只允许文件末尾出现一个新行. eslint: <a href="https://eslint.org/docs/rules/no-multiple-empty-lines" target="_blank" rel="noopener"><code>no-multiple-empty-lines</code></a></p><!-- markdownlint-disable MD012 --><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><!-- markdownlint-enable MD012 --></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h2><p><a name="commas--leading-trailing"></a><a name="20.1"></a></p><ul><li><p><a href="#commas--leading-trailing">20.1</a> 不要用,作为行的开始 eslint: <a href="http://eslint.org/docs/rules/comma-style.html" target="_blank" rel="noopener"><code>comma-style</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> story = [</span><br><span class="line">    once</span><br><span class="line">  , upon</span><br><span class="line">  , aTime</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> story = [</span><br><span class="line">  once,</span><br><span class="line">  upon,</span><br><span class="line">  aTime,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">    firstName: <span class="string">'Ada'</span></span><br><span class="line">  , <span class="attr">lastName</span>: <span class="string">'Lovelace'</span></span><br><span class="line">  , <span class="attr">birthYear</span>: <span class="number">1815</span></span><br><span class="line">  , <span class="attr">superPower</span>: <span class="string">'computers'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Ada'</span>,</span><br><span class="line">  lastName: <span class="string">'Lovelace'</span>,</span><br><span class="line">  birthYear: <span class="number">1815</span>,</span><br><span class="line">  superPower: <span class="string">'computers'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="commas--dangling"></a><a name="20.2"></a></p></li><li><p><a href="#commas--dangling">20.2</a> 结尾使用额外的逗号 eslint: <a href="http://eslint.org/docs/rules/comma-dangle.html" target="_blank" rel="noopener"><code>comma-dangle</code></a></p><blockquote><p>原因：会让git diff更干净.  你不必担心老式浏览器的问题 <a href="es5/README.md#commas">结尾逗号问题</a>因为Babel转译器会在转译后的代码中移除额外的逗号.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad - git diff without trailing comma</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">     firstName: <span class="string">'Florence'</span>,</span><br><span class="line">-    lastName: <span class="string">'Nightingale'</span></span><br><span class="line">+    lastName: <span class="string">'Nightingale'</span>,</span><br><span class="line">+    inventorOf: [<span class="string">'coxcomb chart'</span>, <span class="string">'modern nursing'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good - git diff with trailing comma</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">     firstName: <span class="string">'Florence'</span>,</span><br><span class="line">     lastName: <span class="string">'Nightingale'</span>,</span><br><span class="line">+    inventorOf: [<span class="string">'coxcomb chart'</span>, <span class="string">'modern nursing'</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHero</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  firstName,</span></span></span><br><span class="line"><span class="function"><span class="params">  lastName,</span></span></span><br><span class="line"><span class="function"><span class="params">  inventorOf</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// does nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHero</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  firstName,</span></span></span><br><span class="line"><span class="function"><span class="params">  lastName,</span></span></span><br><span class="line"><span class="function"><span class="params">  inventorOf,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// does nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good (note that a comma must not appear after a "rest" element)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHero</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  firstName,</span></span></span><br><span class="line"><span class="function"><span class="params">  lastName,</span></span></span><br><span class="line"><span class="function"><span class="params">  inventorOf,</span></span></span><br><span class="line"><span class="function"><span class="params">  ...heroArgs</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// does nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">createHero(</span><br><span class="line">  firstName,</span><br><span class="line">  lastName,</span><br><span class="line">  inventorOf</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">createHero(</span><br><span class="line">  firstName,</span><br><span class="line">  lastName,</span><br><span class="line">  inventorOf,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good (note that a comma must not appear after a "rest" element)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHero</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  firstName,</span></span></span><br><span class="line"><span class="function"><span class="params">  lastName,</span></span></span><br><span class="line"><span class="function"><span class="params">  inventorOf,</span></span></span><br><span class="line"><span class="function"><span class="params">  ...heroArgs</span></span></span><br><span class="line"><span class="function"><span class="params"></span>);</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>  <a name="semicolons--required"></a><a name="21.1"></a></p><ul><li><p><a href="#21.1">21.1</a> 当然要使用分号 eslint: <a href="http://eslint.org/docs/rules/semi.html" target="_blank" rel="noopener"><code>semi</code></a> jscs: <a href="http://jscs.info/rule/requireSemicolons" target="_blank" rel="noopener"><code>requireSemicolons</code></a></p><blockquote><p>原因: 当JavaScript不使用分号遇到分行符时，会使用一系列称作<a href="https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion" target="_blank" rel="noopener">分号自动插入(ASI)</a> 的规则来决定其是否应该将分行符视作声明的结尾, (正如名字所暗示的) 如果必要的话会在分行符前插入一个分号. ASI拥有几个古怪的行为, 如果JavaScript错误地解释了换行符你的代码会收到破坏. 这些规则会随着新的特性成为JavaScript的一部分而变得越来越复杂. 显式地结束声明语句并且配置好校验器来捕获缺失的分号会帮你避免遇到这些问题.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad - raises exception</span></span><br><span class="line"><span class="keyword">const</span> luke = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> leia = &#123;&#125;</span><br><span class="line">[luke, leia].forEach(<span class="function"><span class="params">jedi</span> =&gt;</span> jedi.father = <span class="string">'vader'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - raises exception</span></span><br><span class="line"><span class="keyword">const</span> reaction = <span class="string">"No! That's impossible!"</span></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">meanwhileOnTheFalcon</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// handle `leia`, `lando`, `chewie`, `r2`, `c3p0`</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - returns `undefined` instead of the value on the next line - always happens when `return` is on a line by itself because of ASI!</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">    <span class="string">'search your feelings, you know it to be foo'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> luke = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> leia = &#123;&#125;;</span><br><span class="line">[luke, leia].forEach(<span class="function">(<span class="params">jedi</span>) =&gt;</span> &#123;</span><br><span class="line">  jedi.father = <span class="string">'vader'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> reaction = <span class="string">"No! That's impossible!"</span>;</span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">meanwhileOnTheFalcon</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// handle `leia`, `lando`, `chewie`, `r2`, `c3p0`</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'search your feelings, you know it to be foo'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://stackoverflow.com/questions/7365172/semicolon-before-self-invoking-function/7365214#7365214" target="_blank" rel="noopener">更多</a>.</p></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>  <a name="coercion--explicit"></a><a name="22.1"></a></p><ul><li><p><a href="#coercion--explicit">22.1</a> 在声明的开始部分进行类型强转.</p><p><a name="coercion--strings"></a><a name="21.2"></a></p></li><li><p><a href="#coercion--strings">22.2</a>  字符串: <a href="https://eslint.org/docs/rules/no-new-wrappers" target="_blank" rel="noopener"><code>no-new-wrappers</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; this.reviewScore = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="keyword">this</span>.reviewScore); <span class="comment">// typeof totalScore is "object" not "string"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>; <span class="comment">// invokes this.reviewScore.valueOf()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">this</span>.reviewScore.toString(); <span class="comment">// isn't guaranteed to return a string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="built_in">String</span>(<span class="keyword">this</span>.reviewScore);</span><br></pre></td></tr></table></figure><p><a name="coercion--numbers"></a><a name="22.3"></a></p></li><li><p><a href="#coercion--numbers">22.3</a> 数字: 使用 <code>Number</code> 进行转换，使用带基数的 <code>parseInt</code> 对字符串进行转换. eslint: <a href="http://eslint.org/docs/rules/radix" target="_blank" rel="noopener"><code>radix</code></a> <a href="https://eslint.org/docs/rules/no-new-wrappers" target="_blank" rel="noopener"><code>no-new-wrappers</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputValue = <span class="string">'4'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = +inputValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><a name="coercion--comment-deviations"></a><a name="22.4"></a></p></li><li><p><a href="#coercion--comment-deviations">22.4</a> 不管什么原因你使用了 <code>parseInt</code>，到达了性能瓶颈，你需要使用位运算<a href="http://jsperf.com/coercion-vs-casting/3" target="_blank" rel="noopener">性能原因</a>, 请注释说明这么做的原因.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parseInt was the reason my code was slow.</span></span><br><span class="line"><span class="comment"> * Bitshifting the String to coerce it to a</span></span><br><span class="line"><span class="comment"> * Number made it a lot faster.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><a name="coercion--bitwise"></a><a name="22.5"></a></p></li><li><p><a href="#coercion--bitwise">22.5</a> <strong>注意:</strong> 谨慎使用位运算. 数字使用 <a href="http://es5.github.io/#x4.3.19" target="_blank" rel="noopener">64位值</a>表示, 但是位运算只返回32位整数 (<a href="http://es5.github.io/#x11.7" target="_blank" rel="noopener">代码</a>). 小于32位整数的位运算会导致不可预期的行为. <a href="https://github.com/airbnb/javascript/issues/109" target="_blank" rel="noopener">讨论</a>. 最大的有符号整数是 2,147,483,647:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; 2147483647</span></span><br><span class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483648</span></span><br><span class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483647</span></span><br></pre></td></tr></table></figure><p><a name="coercion--booleans"></a><a name="22.6"></a></p></li><li><p><a href="#coercion--booleans">22.6</a> 布尔值:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="keyword">new</span> <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> hasAge = !!age;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><p>  <a name="naming--descriptive"></a><a name="23.1"></a></p><ul><li><p><a href="#naming--descriptive">23.1</a> 避免单字母名字. 命名需有可描述性. eslint: <a href="http://eslint.org/docs/rules/id-length" target="_blank" rel="noopener"><code>id-length</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="naming--camelCase"></a><a name="23.2"></a></p></li><li><p><a href="#naming--camelCase">23.2</a> 命名对象，函数和实例时使用驼峰风格. eslint: <a href="http://eslint.org/docs/rules/camelcase.html" target="_blank" rel="noopener"><code>camelcase</code></a> jscs: <a href="http://jscs.info/rule/requireCamelCaseOrUpperCaseIdentifiers" target="_blank" rel="noopener"><code>requireCamelCaseOrUpperCaseIdentifiers</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> OBJEcttsssss = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> this_is_my_object = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> thisIsMyObject = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><a name="naming--PascalCase"></a><a name="23.3"></a></p></li><li><p><a href="#naming--PascalCase">23.3</a> 当命名构造函数或类的时候使用帕斯卡风格. eslint: <a href="http://eslint.org/docs/rules/new-cap.html" target="_blank" rel="noopener"><code>new-cap</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = options.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bad = <span class="keyword">new</span> user(&#123;</span><br><span class="line">  name: <span class="string">'nope'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = options.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> good = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  name: <span class="string">'yup'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="naming--leading-underscore"></a><a name="23.4"></a></p></li><li><p><a href="#naming--leading-underscore">23.4</a> 不要使用下划线开头或结尾. eslint: <a href="http://eslint.org/docs/rules/no-underscore-dangle.html" target="_blank" rel="noopener"><code>no-underscore-dangle</code></a></p><blockquote><p>原因：JavaScript对于属性和方法并没有隐私的概念.尽管下划线开头通常意味着’private’, 事实上这些属性是完全公开的，是公开API的一部分. 这种风格可能导致开发者错误地认为这不重要或者测试也不必要. 也就是说: 如果你想让其 “private”, 必须使其不可见.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">this</span>.firstName = <span class="string">'Panda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good, in environments where WeakMaps are available</span></span><br><span class="line"><span class="comment">// see https://kangax.github.io/compat-table/es6/#test-WeakMap</span></span><br><span class="line"><span class="keyword">const</span> firstNames = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">firstNames.set(<span class="keyword">this</span>, <span class="string">'Panda'</span>);</span><br></pre></td></tr></table></figure><p><a name="naming--self-this"></a><a name="23.5"></a></p></li><li><p><a href="#naming--self-this">23.5</a> 不要保存指向 <code>this</code>的引用. 使用箭头函数或 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">函数的#bind</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(that);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="naming--filename-matches-export"></a><a name="23.6"></a></p></li><li><p><a href="#naming--filename-matches-export">23.6</a> 基本的文件名应该和默认导出的名字刚好匹配.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file 1 contents</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file 2 contents</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">fortyTwo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">42</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file 3 contents</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">insideDirectory</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in some other file</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./checkBox'</span>; <span class="comment">// PascalCase import/export, camelCase filename</span></span><br><span class="line"><span class="keyword">import</span> FortyTwo <span class="keyword">from</span> <span class="string">'./FortyTwo'</span>; <span class="comment">// PascalCase import/filename, camelCase export</span></span><br><span class="line"><span class="keyword">import</span> InsideDirectory <span class="keyword">from</span> <span class="string">'./InsideDirectory'</span>; <span class="comment">// PascalCase import/filename, camelCase export</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./check_box'</span>; <span class="comment">// PascalCase import/export, snake_case filename</span></span><br><span class="line"><span class="keyword">import</span> forty_two <span class="keyword">from</span> <span class="string">'./forty_two'</span>; <span class="comment">// snake_case import/filename, camelCase export</span></span><br><span class="line"><span class="keyword">import</span> inside_directory <span class="keyword">from</span> <span class="string">'./inside_directory'</span>; <span class="comment">// snake_case import, camelCase export</span></span><br><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">'./inside_directory/index'</span>; <span class="comment">// requiring the index file explicitly</span></span><br><span class="line"><span class="keyword">import</span> insideDirectory <span class="keyword">from</span> <span class="string">'./insideDirectory/index'</span>; <span class="comment">// requiring the index file explicitly</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./CheckBox'</span>; <span class="comment">// PascalCase export/import/filename</span></span><br><span class="line"><span class="keyword">import</span> fortyTwo <span class="keyword">from</span> <span class="string">'./fortyTwo'</span>; <span class="comment">// camelCase export/import/filename</span></span><br><span class="line"><span class="keyword">import</span> insideDirectory <span class="keyword">from</span> <span class="string">'./insideDirectory'</span>; <span class="comment">// camelCase export/import/directory name/implicit "index"</span></span><br><span class="line"><span class="comment">// ^ supports both insideDirectory.js and insideDirectory/index.js</span></span><br></pre></td></tr></table></figure><p><a name="naming--camelCase-default-export"></a><a name="23.7"></a></p></li><li><p><a href="#naming--camelCase-default-export">23.7</a> Use camelCase when you export-default a function当默认导出一个函数时使用驼峰风格. 文件名要和函数名相同.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</span><br></pre></td></tr></table></figure><p><a name="naming--PascalCase-singleton"></a><a name="23.8"></a></p></li><li><p><a href="#naming--PascalCase-singleton">23.8</a> 当导出 构造函数 / 类 / 单例 / 函数库 / 对象时使用帕斯卡风格.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = &#123;</span><br><span class="line">  es6: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide;</span><br></pre></td></tr></table></figure><p><a name="naming--Acronyms-and-Initialisms"></a></p></li><li><p><a href="#naming--Acronyms-and-Initialisms">23.9</a> 缩略词应全部大写或小写.</p><blockquote><p>原因：名字是用来阅读的，不能让步给计算机算法.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> SmsContainer <span class="keyword">from</span> <span class="string">'./containers/SmsContainer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> HttpRequests = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> SMSContainer <span class="keyword">from</span> <span class="string">'./containers/SMSContainer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> HTTPRequests = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">import</span> TextMessageContainer <span class="keyword">from</span> <span class="string">'./containers/TextMessageContainer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> Requests = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><a name="naming--uppercase"></a></p></li><li><p><a href="#naming--uppercase">23.10</a> 可以在以下情况把一个常量全部大写(1) 被导出, (2) <code>const</code>声明的 (不能被重新赋值), (3) 开发者相信该变量(内部嵌套的属性)不会改变.</p><blockquote><p>原因? 这对于开发者不确定变量是否会改变的情形下的额外的辅助工具. UPPERCASE_VARIABLES 能让开发者明确该变量(和它的属性)无法改变.</p><ul><li>所有用<code>const</code> 声明的变量呢? - 没必要，所以一个文件内的常量没必要用大写. 然而在导出常量的时候应该使用大写.</li><li>导出的对象呢? - 只对导出对象的顶层使用大写(如 <code>EXPORTED_OBJECT.key</code>) 保证嵌套的属性都不会改变.</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> PRIVATE_VARIABLE = <span class="string">'should not be unnecessarily uppercased within a file'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> THING_TO_BE_CHANGED = <span class="string">'should obviously not be uppercased'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> REASSIGNABLE_VARIABLE = <span class="string">'do not use let with uppercase variables'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// allowed but does not supply semantic value</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apiKey = <span class="string">'SOMEKEY'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// better in most cases</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> API_KEY = <span class="string">'SOMEKEY'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - unnecessarily uppercases key while adding no semantic value</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MAPPING = &#123;</span><br><span class="line">  KEY: <span class="string">'value'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MAPPING = &#123;</span><br><span class="line">  key: <span class="string">'value'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h2><p>  <a name="accessors--not-required"></a><a name="24.1"></a></p><ul><li><p><a href="#accessors--not-required">24.1</a> 属性的存取器不是必需的.</p><p><a name="accessors--no-getters-setters"></a><a name="24.2"></a></p></li><li><p><a href="#accessors--no-getters-setters">24.2</a> 不要使用JavaScript getters/setters 因为可能引起不可预期的副作用,很难测试、维护和理解. 相反，如果要使用存取器函数，使用 <code>getVal()</code> 和 <code>setVal(&#39;hello&#39;)</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dragon</span> </span>&#123;</span><br><span class="line">  get age() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set age(value) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dragon</span> </span>&#123;</span><br><span class="line">  getAge() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setAge(value) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="accessors--boolean-prefix"></a><a name="24.3"></a></p></li><li><p><a href="#accessors--boolean-prefix">24.3</a>如果属性/方法是 <code>boolean</code>, 使用 <code>isVal()</code> 或 <code>hasVal()</code>方法.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="accessors--consistent"></a><a name="24.4"></a></p></li><li><p><a href="#accessors--consistent">24.4</a> 也可以创建 <code>get()</code> 和 <code>set()</code> 函数, 但要保持一直.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> lightsaber = options.lightsaber || <span class="string">'blue'</span>;</span><br><span class="line">    <span class="keyword">this</span>.set(<span class="string">'lightsaber'</span>, lightsaber);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set(key, val) &#123;</span><br><span class="line">    <span class="keyword">this</span>[key] = val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get(key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>  <a name="events--hash"></a><a name="25.1"></a></p><ul><li><p><a href="#events--hash">25.1</a> 当将数据和事件绑定时 (不论是 DOM 事件还是其他像Backbone一类的事件), 传递对象字面量(也叫摘要值)而不是原始值. 这会允许接下来的修改者不用查找和更新事件的每一个处理器就可以给事件添加更多的数据，不要使用下边的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, (e, listingId) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do something with listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>建议:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; <span class="attr">listingId</span>: listing.id &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, (e, data) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do something with data.listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p></li></ul><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p>  <a name="jquery--dollar-prefix"></a><a name="26.1"></a></p><ul><li><p><a href="#jquery--dollar-prefix">26.1</a> 以<code>$</code>为前缀命名jQuery对象变量. jscs: <a href="http://jscs.info/rule/requireDollarBeforejQueryAssignment" target="_blank" rel="noopener"><code>requireDollarBeforejQueryAssignment</code></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> $sidebarBtn = $(<span class="string">'.sidebar-btn'</span>);</span><br></pre></td></tr></table></figure><p><a name="jquery--cache"></a><a name="26.2"></a></p></li><li><p><a href="#jquery--cache">26.2</a> 缓存jQuery选择器的查询结果.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">'.sidebar'</span>).css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line">  $sidebar.hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $sidebar.css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="jquery--queries"></a><a name="26.3"></a></p></li><li><p><a href="#jquery--queries">26.3</a> DOM 查询使用后代选择器 <code>$(&#39;.sidebar ul&#39;)</code> 或者 父类 &gt; 子类 <code>$(&#39;.sidebar &gt; ul&#39;)</code>选择器. <a href="http://jsperf.com/jquery-find-vs-context-sel/16" target="_blank" rel="noopener">jsPerf</a></p><p><a name="jquery--find"></a><a name="26.4"></a></p></li><li><p><a href="#jquery--find">26.4</a> 局部jQuery对象查询使用 <code>find</code> .</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'ul'</span>, <span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'.sidebar'</span>).find(<span class="string">'ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar &gt; ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$sidebar.find(<span class="string">'ul'</span>).hide();</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="ECMAScript5兼容性"><a href="#ECMAScript5兼容性" class="headerlink" title="ECMAScript5兼容性"></a>ECMAScript5兼容性</h2><p>  <a name="es5-compat--kangax"></a><a name="27.1"></a></p><ul><li><a href="#es5-compat--kangax">27.1</a> 参考 <a href="https://twitter.com/kangax/" target="_blank" rel="noopener">Kangax</a>‘s ES5 <a href="http://kangax.github.io/es5-compat-table/" target="_blank" rel="noopener">compatibility table</a>.</li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="ECMAScript6-ES2015-风格"><a href="#ECMAScript6-ES2015-风格" class="headerlink" title="ECMAScript6+(ES2015+)风格"></a>ECMAScript6+(ES2015+)风格</h2><p>  <a name="es6-styles"></a><a name="28.1"></a></p><ul><li><a href="#es6-styles">28.1</a> 这是不同ES6特性的链接集合.</li></ul><ol><li><a href="#arrow-functions">箭头函数</a></li><li><a href="#constructors">类</a></li><li><a href="#es6-object-shorthand">对象简写</a></li><li><a href="#es6-object-concise">Object Concise</a></li><li><a href="#es6-computed-properties">对象计算属性</a></li><li><a href="#es6-template-literals">模板字符串</a></li><li><a href="#destructuring">解构</a></li><li><a href="#es6-default-parameters">默认参数</a></li><li><a href="#es6-rest">剩余运算符</a></li><li><a href="#es6-array-spreads">数组展开</a></li><li><a href="#references">Let 和 Const</a></li><li><a href="#es2016-properties--exponentiation-operator">求幂运算符</a></li><li><a href="#iterators-and-generators">迭代器和生成器</a></li><li><p><a href="#modules">模块</a></p><p><a name="tc39-proposals"></a></p><ul><li><a href="#tc39-proposals">28.2</a> 不要使用<a href="https://github.com/tc39/proposals" target="_blank" rel="noopener">TC39 proposals</a>还未实现的stage3的功能.</li></ul><blockquote><p>原因:<a href="https://tc39.github.io/process-document/" target="_blank" rel="noopener">未最终确定</a>, and they are subject to change or to be withdrawn entirely会随着改变及整个废弃而被影响. 我们想要使用JavaScript,而草案还不是JavaScript.</p></blockquote></li></ol><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><p>  <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener">标准库</a>包含功能有问题但由于遗留原因保留下来的功能.</p><p>  <a name="standard-library--isnan"></a></p><ul><li><p><a href="#standard-library--isnan">29.1</a> 使用 <code>Number.isNaN</code> 代替全局 <code>isNaN</code>方法.<br>eslint: <a href="https://eslint.org/docs/rules/no-restricted-globals" target="_blank" rel="noopener"><code>no-restricted-globals</code></a></p><blockquote><p>原因: 全局的 <code>isNaN</code> 方法会将非数字转换为数字, 任何被转换为NaN的东西都会返回true.<br>若该行为被允许，则要使其明显.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">'1.2'</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">'1.2.3'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">'1.2.3'</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="built_in">Number</span>(<span class="string">'1.2.3'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><a name="standard-library--isfinite"></a></p></li><li><p><a href="#standard-library--isfinite">29.2</a> 使用 <code>Number.isFinite</code> 代替全局 <code>isFinite</code>.<br>eslint: <a href="https://eslint.org/docs/rules/no-restricted-globals" target="_blank" rel="noopener"><code>no-restricted-globals</code></a></p><blockquote><p>原因: 全局 <code>isFinite</code> 会把非数字转换为数字, 任何被转换为有限大的数字都会返回true.<br>若该行为被允许，则要使其明显.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="string">'2e3'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="string">'2e3'</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="built_in">parseInt</span>(<span class="string">'2e3'</span>, <span class="number">10</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>  <a name="testing--yup"></a><a name="30.1"></a></p><ul><li><p><a href="#testing--yup">30.1</a> <strong>当然需要</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="testing--for-real"></a><a name="30.2"></a></p></li><li><a href="#testing--for-real">30.2</a> <strong>不要这么做，很严重</strong>:<ul><li>不论你用哪一个测试框架，都应该写测试用例!</li><li>尽力写一些简洁的函数, 使改动数据的部分最小化.</li><li>小心使用 stubs 和 mocks - 它们会使测试变得脆弱.</li><li>我们在Airbnb中主要使用 <a href="https://www.npmjs.com/package/mocha" target="_blank" rel="noopener"><code>mocha</code></a>. <a href="https://www.npmjs.com/package/tape" target="_blank" rel="noopener"><code>tape</code></a> 有时也用于小的独立模块.</li><li>100%的测试覆盖率是需要努力达成的目标，即使这是不切实际的.</li><li>无论何时修复bug, <em>写回归测试</em>. 没有回归测试的bug修复几乎会在将在再次出现.</li></ul></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><ul><li><a href="http://www.kellegous.com/j/2013/01/26/layout-performance/" target="_blank" rel="noopener">On Layout &amp; Web Performance</a></li><li><a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="noopener">String vs Array Concat</a></li><li><a href="http://jsperf.com/try-catch-in-loop-cost" target="_blank" rel="noopener">Try/Catch Cost In a Loop</a></li><li><a href="http://jsperf.com/bang-function" target="_blank" rel="noopener">Bang Function</a></li><li><a href="http://jsperf.com/jquery-find-vs-context-sel/13" target="_blank" rel="noopener">jQuery Find vs Context, Selector</a></li><li><a href="http://jsperf.com/innerhtml-vs-textcontent-for-script-text" target="_blank" rel="noopener">innerHTML vs textContent for script text</a></li><li><a href="http://jsperf.com/ya-string-concat" target="_blank" rel="noopener">Long String Concatenation</a></li><li><a href="https://www.quora.com/JavaScript-programming-language-Are-Javascript-functions-like-map-reduce-and-filter-already-optimized-for-traversing-array/answer/Quildreen-Motta" target="_blank" rel="noopener">Are Javascript functions like <code>map()</code>, <code>reduce()</code>, and <code>filter()</code> optimized for traversing arrays?</a></li><li>Loading…</li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><strong>学习 ES6</strong></p><ul><li><a href="https://tc39.github.io/ecma262/" target="_blank" rel="noopener">Latest ECMA spec</a></li><li><a href="http://exploringjs.com/" target="_blank" rel="noopener">ExploringJS</a></li><li><a href="https://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">ES6 Compatibility Table</a></li><li><a href="http://es6-features.org/" target="_blank" rel="noopener">Comprehensive Overview of ES6 Features</a></li></ul><p><strong>阅读</strong></p><ul><li><a href="http://www.ecma-international.org/ecma-262/6.0/index.html" target="_blank" rel="noopener">Standard ECMA-262</a></li></ul><p><strong>工具</strong></p><ul><li>Code Style Linters<ul><li><a href="http://eslint.org/" target="_blank" rel="noopener">ESlint</a> - <a href="https://github.com/airbnb/javascript/blob/master/linters/.eslintrc" target="_blank" rel="noopener">Airbnb Style .eslintrc</a></li><li><a href="http://jshint.com/" target="_blank" rel="noopener">JSHint</a> - <a href="https://github.com/airbnb/javascript/blob/master/linters/.jshintrc" target="_blank" rel="noopener">Airbnb Style .jshintrc</a></li><li>Neutrino preset - <a href="https://neutrino.js.org/presets/neutrino-preset-airbnb-base/" target="_blank" rel="noopener">neutrino-preset-airbnb-base</a></li></ul></li></ul><p><strong>其他编码规范指南</strong></p><ul><li><a href="https://google.github.io/styleguide/javascriptguide.xml" target="_blank" rel="noopener">Google JavaScript Style Guide</a></li><li><a href="http://contribute.jquery.org/style-guide/js/" target="_blank" rel="noopener">jQuery Core Style Guidelines</a></li><li><a href="https://github.com/rwaldron/idiomatic.js" target="_blank" rel="noopener">Principles of Writing Consistent, Idiomatic JavaScript</a></li><li><a href="https://standardjs.com" target="_blank" rel="noopener">StandardJS</a></li></ul><p><strong>其他风格</strong></p><ul><li><a href="https://gist.github.com/cjohansen/4135065" target="_blank" rel="noopener">Naming this in nested functions</a> - Christian Johansen</li><li><a href="https://github.com/airbnb/javascript/issues/52" target="_blank" rel="noopener">Conditional Callbacks</a> - Ross Allen</li><li><a href="http://sideeffect.kr/popularconvention/#javascript" target="_blank" rel="noopener">Popular JavaScript Coding Conventions on Github</a> - JeongHoon Byun</li><li><a href="http://benalman.com/news/2012/05/multiple-var-statements-javascript/" target="_blank" rel="noopener">Multiple var statements in JavaScript, not superfluous</a> - Ben Alman</li></ul><p><strong>更深的阅读</strong></p><ul><li><a href="http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/" target="_blank" rel="noopener">Understanding JavaScript Closures</a> - Angus Croll</li><li><a href="http://www.2ality.com/2013/06/basic-javascript.html" target="_blank" rel="noopener">Basic JavaScript for the impatient programmer</a> - Dr. Axel Rauschmayer</li><li><a href="http://youmightnotneedjquery.com/" target="_blank" rel="noopener">You Might Not Need jQuery</a> - Zack Bloom &amp; Adam Schwartz</li><li><a href="https://github.com/lukehoban/es6features" target="_blank" rel="noopener">ES6 Features</a> - Luke Hoban</li><li><a href="https://github.com/bendc/frontend-guidelines" target="_blank" rel="noopener">Frontend Guidelines</a> - Benjamin De Cock</li></ul><p><strong>书籍</strong></p><ul><li><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742" target="_blank" rel="noopener">JavaScript: The Good Parts</a> - Douglas Crockford</li><li><a href="http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752" target="_blank" rel="noopener">JavaScript Patterns</a> - Stoyan Stefanov</li><li><a href="http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X" target="_blank" rel="noopener">Pro JavaScript Design Patterns</a>  - Ross Harmes and Dustin Diaz</li><li><a href="http://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309" target="_blank" rel="noopener">High Performance Web Sites: Essential Knowledge for Front-End Engineers</a> - Steve Souders</li><li><a href="http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680" target="_blank" rel="noopener">Maintainable JavaScript</a> - Nicholas C. Zakas</li><li><a href="http://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X" target="_blank" rel="noopener">JavaScript Web Applications</a> - Alex MacCaw</li><li><a href="http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273" target="_blank" rel="noopener">Pro JavaScript Techniques</a> - John Resig</li><li><a href="http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595" target="_blank" rel="noopener">Smashing Node.js: JavaScript Everywhere</a> - Guillermo Rauch</li><li><a href="http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X" target="_blank" rel="noopener">Secrets of the JavaScript Ninja</a> - John Resig and Bear Bibeault</li><li><a href="http://humanjavascript.com/" target="_blank" rel="noopener">Human JavaScript</a> - Henrik Joreteg</li><li><a href="http://superherojs.com/" target="_blank" rel="noopener">Superhero.js</a> - Kim Joar Bekkelund, Mads Mobæk, &amp; Olav Bjorkoy</li><li><a href="http://jsbooks.revolunet.com/" target="_blank" rel="noopener">JSBooks</a> - Julien Bouquillon</li><li><a href="https://www.manning.com/books/third-party-javascript" target="_blank" rel="noopener">Third Party JavaScript</a> - Ben Vinegar and Anton Kovalyov</li><li><a href="http://amzn.com/0321812182" target="_blank" rel="noopener">Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript</a> - David Herman</li><li><a href="http://eloquentjavascript.net/" target="_blank" rel="noopener">Eloquent JavaScript</a> - Marijn Haverbeke</li><li><a href="http://shop.oreilly.com/product/0636920033769.do" target="_blank" rel="noopener">You Don’t Know JS: ES6 &amp; Beyond</a> - Kyle Simpson</li></ul><p><strong>博客</strong></p><ul><li><a href="http://javascriptweekly.com/" target="_blank" rel="noopener">JavaScript Weekly</a></li><li><a href="http://javascriptweblog.wordpress.com/" target="_blank" rel="noopener">JavaScript, JavaScript…</a></li><li><a href="https://bocoup.com/weblog" target="_blank" rel="noopener">Bocoup Weblog</a></li><li><a href="http://www.adequatelygood.com/" target="_blank" rel="noopener">Adequately Good</a></li><li><a href="https://www.nczonline.net/" target="_blank" rel="noopener">NCZOnline</a></li><li><a href="http://perfectionkills.com/" target="_blank" rel="noopener">Perfection Kills</a></li><li><a href="http://benalman.com/" target="_blank" rel="noopener">Ben Alman</a></li><li><a href="http://dmitry.baranovskiy.com/" target="_blank" rel="noopener">Dmitry Baranovskiy</a></li><li><a href="http://code.tutsplus.com/?s=javascript" target="_blank" rel="noopener">nettuts</a></li></ul><p><strong>播客</strong></p><ul><li><a href="https://javascriptair.com/" target="_blank" rel="noopener">JavaScript Air</a></li><li><a href="https://devchat.tv/js-jabber/" target="_blank" rel="noopener">JavaScript Jabber</a></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="谁在使用"><a href="#谁在使用" class="headerlink" title="谁在使用"></a>谁在使用</h2><p>  这是一份使用这份编码规范的组织列表.给我们提PR我们会把你加到这份列表里.</p><p>  This is a list of organizations that are using this style guide. Send us a pull request and we’ll add you to the list.</p><ul><li><strong>123erfasst</strong>: <a href="https://github.com/123erfasst/javascript" target="_blank" rel="noopener">123erfasst/javascript</a></li><li><strong>3blades</strong>: <a href="https://github.com/3blades/javascript" target="_blank" rel="noopener">3Blades/javascript</a></li><li><strong>4Catalyzer</strong>: <a href="https://github.com/4Catalyzer/javascript" target="_blank" rel="noopener">4Catalyzer/javascript</a></li><li><strong>Aan Zee</strong>: <a href="https://github.com/AanZee/javascript" target="_blank" rel="noopener">AanZee/javascript</a></li><li><strong>Adult Swim</strong>: <a href="https://github.com/adult-swim/javascript" target="_blank" rel="noopener">adult-swim/javascript</a></li><li><strong>Airbnb</strong>: <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb/javascript</a></li><li><strong>AltSchool</strong>: <a href="https://github.com/AltSchool/javascript" target="_blank" rel="noopener">AltSchool/javascript</a></li><li><strong>Apartmint</strong>: <a href="https://github.com/apartmint/javascript" target="_blank" rel="noopener">apartmint/javascript</a></li><li><strong>Ascribe</strong>: <a href="https://github.com/ascribe/javascript" target="_blank" rel="noopener">ascribe/javascript</a></li><li><strong>Avalara</strong>: <a href="https://github.com/avalara/javascript" target="_blank" rel="noopener">avalara/javascript</a></li><li><strong>Avant</strong>: <a href="https://github.com/avantcredit/javascript" target="_blank" rel="noopener">avantcredit/javascript</a></li><li><strong>Axept</strong>: <a href="https://github.com/axept/javascript" target="_blank" rel="noopener">axept/javascript</a></li><li><strong>BashPros</strong>: <a href="https://github.com/BashPros/javascript" target="_blank" rel="noopener">BashPros/javascript</a></li><li><strong>Billabong</strong>: <a href="https://github.com/billabong/javascript" target="_blank" rel="noopener">billabong/javascript</a></li><li><strong>Bisk</strong>: <a href="https://github.com/Bisk/javascript/" target="_blank" rel="noopener">bisk/javascript</a></li><li><strong>Bonhomme</strong>: <a href="https://github.com/bonhommeparis/javascript" target="_blank" rel="noopener">bonhommeparis/javascript</a></li><li><strong>Brainshark</strong>: <a href="https://github.com/brainshark/javascript" target="_blank" rel="noopener">brainshark/javascript</a></li><li><strong>CaseNine</strong>: <a href="https://github.com/CaseNine/javascript" target="_blank" rel="noopener">CaseNine/javascript</a></li><li><strong>Chartboost</strong>: <a href="https://github.com/ChartBoost/javascript-style-guide" target="_blank" rel="noopener">ChartBoost/javascript-style-guide</a></li><li><strong>ComparaOnline</strong>: <a href="https://github.com/comparaonline/javascript-style-guide" target="_blank" rel="noopener">comparaonline/javascript</a></li><li><strong>Compass Learning</strong>: <a href="https://github.com/compasslearning/javascript-style-guide" target="_blank" rel="noopener">compasslearning/javascript-style-guide</a></li><li><strong>DailyMotion</strong>: <a href="https://github.com/dailymotion/javascript" target="_blank" rel="noopener">dailymotion/javascript</a></li><li><strong>DoSomething</strong>: <a href="https://github.com/DoSomething/eslint-config" target="_blank" rel="noopener">DoSomething/eslint-config</a></li><li><strong>Digitpaint</strong> <a href="https://github.com/digitpaint/javascript" target="_blank" rel="noopener">digitpaint/javascript</a></li><li><strong>Ecosia</strong>: <a href="https://github.com/ecosia/javascript" target="_blank" rel="noopener">ecosia/javascript</a></li><li><strong>Evernote</strong>: <a href="https://github.com/evernote/javascript-style-guide" target="_blank" rel="noopener">evernote/javascript-style-guide</a></li><li><strong>Evolution Gaming</strong>: <a href="https://github.com/evolution-gaming/javascript" target="_blank" rel="noopener">evolution-gaming/javascript</a></li><li><strong>EvozonJs</strong>: <a href="https://github.com/evozonjs/javascript" target="_blank" rel="noopener">evozonjs/javascript</a></li><li><strong>ExactTarget</strong>: <a href="https://github.com/ExactTarget/javascript" target="_blank" rel="noopener">ExactTarget/javascript</a></li><li><strong>Expensify</strong> <a href="https://github.com/Expensify/Style-Guide/blob/master/javascript.md" target="_blank" rel="noopener">Expensify/Style-Guide</a></li><li><strong>Flexberry</strong>: <a href="https://github.com/Flexberry/javascript-style-guide" target="_blank" rel="noopener">Flexberry/javascript-style-guide</a></li><li><strong>Gawker Media</strong>: <a href="https://github.com/gawkermedia/javascript" target="_blank" rel="noopener">gawkermedia/javascript</a></li><li><strong>General Electric</strong>: <a href="https://github.com/GeneralElectric/javascript" target="_blank" rel="noopener">GeneralElectric/javascript</a></li><li><strong>Generation Tux</strong>: <a href="https://github.com/generationtux/styleguide" target="_blank" rel="noopener">GenerationTux/javascript</a></li><li><strong>GoodData</strong>: <a href="https://github.com/gooddata/gdc-js-style" target="_blank" rel="noopener">gooddata/gdc-js-style</a></li><li><strong>Grooveshark</strong>: <a href="https://github.com/grooveshark/javascript" target="_blank" rel="noopener">grooveshark/javascript</a></li><li><strong>Honey</strong>: <a href="https://github.com/honeyscience/javascript" target="_blank" rel="noopener">honeyscience/javascript</a></li><li><strong>How About We</strong>: <a href="https://github.com/howaboutwe/javascript-style-guide" target="_blank" rel="noopener">howaboutwe/javascript</a></li><li><strong>Huballin</strong>: <a href="https://github.com/huballin/javascript" target="_blank" rel="noopener">huballin/javascript</a></li><li><strong>HubSpot</strong>: <a href="https://github.com/HubSpot/javascript" target="_blank" rel="noopener">HubSpot/javascript</a></li><li><strong>Hyper</strong>: <a href="https://github.com/hyperoslo/javascript-playbook/blob/master/style.md" target="_blank" rel="noopener">hyperoslo/javascript-playbook</a></li><li><strong>InterCity Group</strong>: <a href="https://github.com/intercitygroup/javascript-style-guide" target="_blank" rel="noopener">intercitygroup/javascript-style-guide</a></li><li><strong>Jam3</strong>: <a href="https://github.com/Jam3/Javascript-Code-Conventions" target="_blank" rel="noopener">Jam3/Javascript-Code-Conventions</a></li><li><strong>JeopardyBot</strong>: <a href="https://github.com/kesne/jeopardy-bot/blob/master/STYLEGUIDE.md" target="_blank" rel="noopener">kesne/jeopardy-bot</a></li><li><strong>JSSolutions</strong>: <a href="https://github.com/JSSolutions/javascript" target="_blank" rel="noopener">JSSolutions/javascript</a></li><li><strong>KickorStick</strong>: <a href="https://github.com/kickorstick/javascript" target="_blank" rel="noopener">kickorstick/javascript</a></li><li><strong>Kinetica Solutions</strong>: <a href="https://github.com/kinetica/Javascript-style-guide" target="_blank" rel="noopener">kinetica/javascript</a></li><li><strong>LEINWAND</strong>: <a href="https://github.com/LEINWAND/javascript" target="_blank" rel="noopener">LEINWAND/javascript</a></li><li><strong>Lonely Planet</strong>: <a href="https://github.com/lonelyplanet/javascript" target="_blank" rel="noopener">lonelyplanet/javascript</a></li><li><strong>M2GEN</strong>: <a href="https://github.com/M2GEN/javascript" target="_blank" rel="noopener">M2GEN/javascript</a></li><li><strong>Mighty Spring</strong>: <a href="https://github.com/mightyspring/javascript" target="_blank" rel="noopener">mightyspring/javascript</a></li><li><strong>MinnPost</strong>: <a href="https://github.com/MinnPost/javascript" target="_blank" rel="noopener">MinnPost/javascript</a></li><li><strong>MitocGroup</strong>: <a href="https://github.com/MitocGroup/javascript" target="_blank" rel="noopener">MitocGroup/javascript</a></li><li><strong>ModCloth</strong>: <a href="https://github.com/modcloth/javascript" target="_blank" rel="noopener">modcloth/javascript</a></li><li><strong>Money Advice Service</strong>: <a href="https://github.com/moneyadviceservice/javascript" target="_blank" rel="noopener">moneyadviceservice/javascript</a></li><li><strong>Muber</strong>: <a href="https://github.com/muber/javascript" target="_blank" rel="noopener">muber/javascript</a></li><li><strong>National Geographic</strong>: <a href="https://github.com/natgeo/javascript" target="_blank" rel="noopener">natgeo/javascript</a></li><li><strong>Nimbl3</strong>: <a href="https://github.com/nimbl3/javascript" target="_blank" rel="noopener">nimbl3/javascript</a></li><li><strong>Nulogy</strong>: <a href="https://github.com/nulogy/javascript" target="_blank" rel="noopener">nulogy/javascript</a></li><li><strong>Orange Hill Development</strong>: <a href="https://github.com/orangehill/javascript" target="_blank" rel="noopener">orangehill/javascript</a></li><li><strong>Orion Health</strong>: <a href="https://github.com/orionhealth/javascript" target="_blank" rel="noopener">orionhealth/javascript</a></li><li><strong>OutBoxSoft</strong>: <a href="https://github.com/OutBoxSoft/javascript" target="_blank" rel="noopener">OutBoxSoft/javascript</a></li><li><strong>Peerby</strong>: <a href="https://github.com/Peerby/javascript" target="_blank" rel="noopener">Peerby/javascript</a></li><li><strong>Razorfish</strong>: <a href="https://github.com/razorfish/javascript-style-guide" target="_blank" rel="noopener">razorfish/javascript-style-guide</a></li><li><strong>reddit</strong>: <a href="https://github.com/reddit/styleguide/tree/master/javascript" target="_blank" rel="noopener">reddit/styleguide/javascript</a></li><li><strong>React</strong>: <a href="https://facebook.github.io/react/contributing/how-to-contribute.html#style-guide" target="_blank" rel="noopener">facebook.github.io/react/contributing/how-to-contribute.html#style-guide</a></li><li><strong>REI</strong>: <a href="https://github.com/rei/code-style-guides/blob/master/docs/javascript.md" target="_blank" rel="noopener">reidev/js-style-guide</a></li><li><strong>Ripple</strong>: <a href="https://github.com/ripple/javascript-style-guide" target="_blank" rel="noopener">ripple/javascript-style-guide</a></li><li><strong>SeekingAlpha</strong>: <a href="https://github.com/seekingalpha/javascript-style-guide" target="_blank" rel="noopener">seekingalpha/javascript-style-guide</a></li><li><strong>Shutterfly</strong>: <a href="https://github.com/shutterfly/javascript" target="_blank" rel="noopener">shutterfly/javascript</a></li><li><strong>Sourcetoad</strong>: <a href="https://github.com/sourcetoad/javascript" target="_blank" rel="noopener">sourcetoad/javascript</a></li><li><strong>Springload</strong>: <a href="https://github.com/springload/javascript" target="_blank" rel="noopener">springload/javascript</a></li><li><strong>StratoDem Analytics</strong>: <a href="https://github.com/stratodem/javascript" target="_blank" rel="noopener">stratodem/javascript</a></li><li><strong>SteelKiwi Development</strong>: <a href="https://github.com/steelkiwi/javascript" target="_blank" rel="noopener">steelkiwi/javascript</a></li><li><strong>StudentSphere</strong>: <a href="https://github.com/studentsphere/guide-javascript" target="_blank" rel="noopener">studentsphere/javascript</a></li><li><strong>SwoopApp</strong>: <a href="https://github.com/swoopapp/javascript" target="_blank" rel="noopener">swoopapp/javascript</a></li><li><strong>SysGarage</strong>: <a href="https://github.com/sysgarage/javascript-style-guide" target="_blank" rel="noopener">sysgarage/javascript-style-guide</a></li><li><strong>Syzygy Warsaw</strong>: <a href="https://github.com/syzygypl/javascript" target="_blank" rel="noopener">syzygypl/javascript</a></li><li><strong>Target</strong>: <a href="https://github.com/target/javascript" target="_blank" rel="noopener">target/javascript</a></li><li><strong>TheLadders</strong>: <a href="https://github.com/TheLadders/javascript" target="_blank" rel="noopener">TheLadders/javascript</a></li><li><strong>The Nerdery</strong>: <a href="https://github.com/thenerdery/javascript-standards" target="_blank" rel="noopener">thenerdery/javascript-standards</a></li><li><strong>T4R Technology</strong>: <a href="https://github.com/T4R-Technology/javascript" target="_blank" rel="noopener">T4R-Technology/javascript</a></li><li><strong>VoxFeed</strong>: <a href="https://github.com/VoxFeed/javascript-style-guide" target="_blank" rel="noopener">VoxFeed/javascript-style-guide</a></li><li><strong>WeBox Studio</strong>: <a href="https://github.com/weboxstudio/javascript" target="_blank" rel="noopener">weboxstudio/javascript</a></li><li><strong>Weggo</strong>: <a href="https://github.com/Weggo/javascript" target="_blank" rel="noopener">Weggo/javascript</a></li><li><strong>Zillow</strong>: <a href="https://github.com/zillow/javascript" target="_blank" rel="noopener">zillow/javascript</a></li><li><strong>ZocDoc</strong>: <a href="https://github.com/ZocDoc/javascript" target="_blank" rel="noopener">ZocDoc/javascript</a></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p>  其他语言的版本:</p><ul><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png" alt="br"> <strong>Brazilian Portuguese</strong>: <a href="https://github.com/armoucar/javascript-style-guide" target="_blank" rel="noopener">armoucar/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bulgaria.png" alt="bg"> <strong>Bulgarian</strong>: <a href="https://github.com/borislavvv/javascript" target="_blank" rel="noopener">borislavvv/javascript</a></li><li><img src="https://raw.githubusercontent.com/fpmweb/javascript-style-guide/master/img/catala.png" alt="ca"> <strong>Catalan</strong>: <a href="https://github.com/fpmweb/javascript-style-guide" target="_blank" rel="noopener">fpmweb/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png" alt="cn"> <strong>Chinese (Simplified)</strong>: <a href="https://github.com/sivan/javascript-style-guide" target="_blank" rel="noopener">sivan/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png" alt="tw"> <strong>Chinese (Traditional)</strong>: <a href="https://github.com/jigsawye/javascript" target="_blank" rel="noopener">jigsawye/javascript</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png" alt="fr"> <strong>French</strong>: <a href="https://github.com/nmussy/javascript-style-guide" target="_blank" rel="noopener">nmussy/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png" alt="de"> <strong>German</strong>: <a href="https://github.com/timofurrer/javascript-style-guide" target="_blank" rel="noopener">timofurrer/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png" alt="it"> <strong>Italian</strong>: <a href="https://github.com/sinkswim/javascript-style-guide" target="_blank" rel="noopener">sinkswim/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png" alt="jp"> <strong>Japanese</strong>: <a href="https://github.com/mitsuruog/javascript-style-guide" target="_blank" rel="noopener">mitsuruog/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png" alt="kr"> <strong>Korean</strong>: <a href="https://github.com/tipjs/javascript-style-guide" target="_blank" rel="noopener">tipjs/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png" alt="pl"> <strong>Polish</strong>: <a href="https://github.com/mjurczyk/javascript" target="_blank" rel="noopener">mjurczyk/javascript</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png" alt="ru"> <strong>Russian</strong>: <a href="https://github.com/uprock/javascript" target="_blank" rel="noopener">uprock/javascript</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png" alt="es"> <strong>Spanish</strong>: <a href="https://github.com/paolocarrasco/javascript-style-guide" target="_blank" rel="noopener">paolocarrasco/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Thailand.png" alt="th"> <strong>Thai</strong>: <a href="https://github.com/lvarayut/javascript-style-guide" target="_blank" rel="noopener">lvarayut/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png" alt="vn"> <strong>Vietnam</strong>: <a href="https://github.com/giangpii/javascript-style-guide" target="_blank" rel="noopener">giangpii/javascript-style-guide</a></li></ul><h2 id="JavaScript编码规范指南"><a href="#JavaScript编码规范指南" class="headerlink" title="JavaScript编码规范指南"></a>JavaScript编码规范指南</h2><ul><li><a href="https://github.com/airbnb/javascript/wiki/The-JavaScript-Style-Guide-Guide" target="_blank" rel="noopener">引用</a></li></ul><h2 id="和我们聊聊JavaScript"><a href="#和我们聊聊JavaScript" class="headerlink" title="和我们聊聊JavaScript"></a>和我们聊聊JavaScript</h2><ul><li>Find us on <a href="https://gitter.im/airbnb/javascript" target="_blank" rel="noopener">gitter</a>.</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><ul><li><a href="https://github.com/airbnb/javascript/graphs/contributors" target="_blank" rel="noopener">查看贡献者</a></li></ul><h2 id="许可"><a href="#许可" class="headerlink" title="许可"></a>许可</h2><p>(The MIT License)</p><p>Copyright (c) 2012 Airbnb</p><p>Permission is hereby granted, free of charge, to any person obtaining<br>a copy of this software and associated documentation files (the<br>‘Software’), to deal in the Software without restriction, including<br>without limitation the rights to use, copy, modify, merge, publish,<br>distribute, sublicense, and/or sell copies of the Software, and to<br>permit persons to whom the Software is furnished to do so, subject to<br>the following conditions:</p><p>The above copyright notice and this permission notice shall be<br>included in all copies or substantial portions of the Software.</p><p>THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND,<br>EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<br>MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.<br>IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY<br>CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,<br>TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE<br>SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.<br><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>我们鼓励你fork这份指南并改变规则来适应你团队的风格.你还可以列出一些修改补充.这可以让你不用处理合并冲突就可以定期升级编码规范指南</p>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ios模拟器数据存储位置</title>
      <link href="/2018/08/27/ios%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/"/>
      <url>/2018/08/27/ios%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<ul><li>沙盒数据库存储位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/用户名/Library/Developer/CoreSimulator/Devices/AE22462A-FE79-4B52-B40A-4C7C42D39C59/data/Containers/Data/Application/EC0464BF-B47C-4C6F-95B9-6DEB37BAD3EA/Library</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>md语法</title>
      <link href="/2018/08/25/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/08/25/Markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="Markdown-syntax-guide-and-writing-on-MWeb"><a href="#Markdown-syntax-guide-and-writing-on-MWeb" class="headerlink" title="Markdown syntax guide and writing on MWeb"></a>Markdown syntax guide and writing on MWeb</h1><h2 id="Philosophy"><a href="#Philosophy" class="headerlink" title="Philosophy"></a>Philosophy</h2><blockquote><p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.<br>Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions.<br>Markdown’s syntax is intended for one purpose: to be used as a format for <em>writing</em> for the web.</p></blockquote><a id="more"></a><h2 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h2><p>You can use  <code>CMD + 4</code> or <code>CMD + R</code> to preview the result.</p><h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># This is an `&lt;h1&gt;` tag</span><br><span class="line">## This is an `&lt;h2&gt;` tag</span><br><span class="line">###### This is an `&lt;h6&gt;` tag</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><h1 id="This-is-an-lt-h1-gt-tag"><a href="#This-is-an-lt-h1-gt-tag" class="headerlink" title="This is an &lt;h1&gt; tag"></a>This is an <code>&lt;h1&gt;</code> tag</h1><h2 id="This-is-an-lt-h2-gt-tag"><a href="#This-is-an-lt-h2-gt-tag" class="headerlink" title="This is an &lt;h2&gt; tag"></a>This is an <code>&lt;h2&gt;</code> tag</h2><h6 id="This-is-an-lt-h6-gt-tag"><a href="#This-is-an-lt-h6-gt-tag" class="headerlink" title="This is an &lt;h6&gt; tag"></a>This is an <code>&lt;h6&gt;</code> tag</h6><h2 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*This text will be italic*</span><br><span class="line">_This will also be italic_</span><br><span class="line"></span><br><span class="line">**This text will be bold**</span><br><span class="line">__This will also be bold__</span><br><span class="line"></span><br><span class="line">*You **can** combine them*</span><br></pre></td></tr></table></figure><p><strong>Shortcuts:</strong>  <code>CMD + U</code>、<code>CMD + I</code>、<code>CMD + B</code><br><strong>Result:</strong></p><p><em>This text will be italic</em><br><em>This will also be italic</em></p><p><strong>This text will be bold</strong><br><strong>This will also be bold</strong></p><p><em>You <strong>can</strong> combine them</em></p><h2 id="Newlines"><a href="#Newlines" class="headerlink" title="Newlines"></a>Newlines</h2><p>End a line with two or more spaces + enter.<br>Just typing enter to newline,please set：<code>Preferences</code> - <code>Themes</code> - <code>Translate newlines to &lt;br&gt; tags</code>  enable ( default is enable )</p><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><h3 id="Unordered"><a href="#Unordered" class="headerlink" title="Unordered"></a>Unordered</h3><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* Item 1 unordered list `* + SPACE`</span><br><span class="line">* Item 2</span><br><span class="line">* Item 2a unordered list `TAB + * + SPACE`</span><br><span class="line">* Item 2b</span><br></pre></td></tr></table></figure><p><strong>Shortcuts:</strong>  <code>Option + U</code><br><strong>Result:</strong></p><ul><li>Item 1 unordered list <code>* + SPACE</code></li><li>Item 2</li><li>Item 2a unordered list <code>TAB + * + SPACE</code></li><li>Item 2b</li></ul><h3 id="Ordered"><a href="#Ordered" class="headerlink" title="Ordered"></a>Ordered</h3><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. Item 1 ordered list `Number + . + SPACE`</span><br><span class="line">2. Item 2 </span><br><span class="line">3. Item 3</span><br><span class="line">1. Item 3a ordered list `TAB + Number + . + SPACE`</span><br><span class="line">2. Item 3b</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><ol><li>Item 1 ordered list <code>Number + . + SPACE</code></li><li>Item 2 </li><li>Item 3</li><li>Item 3a ordered list <code>TAB + Number + . + SPACE</code></li><li>Item 3b</li></ol><h3 id="Task-lists"><a href="#Task-lists" class="headerlink" title="Task lists"></a>Task lists</h3><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [ ] task one not finish `- + SPACE + [ ]`</span><br><span class="line">- [x] task two finished `- + SPACE + [x]`</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><ul><li style="list-style: none"><input type="checkbox"> task one not finish <code>- + SPACE + [ ]</code></li><li style="list-style: none"><input type="checkbox" checked> task two finished <code>- + SPACE + [x]</code></li></ul><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![GitHub set up](https://help.github.com/assets/images/site/set-up-git.gif)</span><br><span class="line">Format: ![Alt Text](url)</span><br></pre></td></tr></table></figure><p><strong>Shortcuts:</strong>  <code>Control + Shift + I</code><br>The Library’s document support drag &amp; drop or <code>CMD + V</code> paste or <code>CMD + Option + I</code> to insert  the picture.<br><strong>Result:</strong></p><p><img src="https://help.github.com/assets/images/site/set-up-git.gif" alt="GitHub set up"></p><p>In MWeb, you can use <code>-w + Number</code> to control image width, for example, set the image width 140px:</p><p><img src="https://help.github.com/assets/images/site/set-up-git.gif" alt="GitHub set up-w140"></p><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">email &lt;example@example.com&gt;</span><br><span class="line">[GitHub](http://github.com)</span><br><span class="line">autolink  &lt;http://www.github.com/&gt;</span><br></pre></td></tr></table></figure><p><strong>Shortcuts:</strong>  <code>Control + Shift + L</code><br>The Library’s document support drag &amp; drop or <code>CMD + Option + I</code> to insert attachment.<br><strong>Result:</strong></p><p>An email <a href="mailto:&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;" target="_blank" rel="noopener">&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;</a> link.<br><a href="http://github.com" target="_blank" rel="noopener">GitHub</a><br>Automatic linking for URLs<br>Any URL (like <a href="http://www.github.com/" target="_blank" rel="noopener">http://www.github.com/</a>) will be automatically converted into a clickable link.</p><h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">As Kanye West said:</span><br><span class="line">&gt; We&apos;re living the future so</span><br><span class="line">&gt; the present is our past.</span><br></pre></td></tr></table></figure><p><strong>Shortcuts:</strong>  <code>CMD + Shift + B</code><br><strong>Result:</strong></p><p>As Kanye West said:</p><blockquote><p>We’re living the future so<br>the present is our past.</p></blockquote><h2 id="Inline-code"><a href="#Inline-code" class="headerlink" title="Inline code"></a>Inline code</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I think you should use an</span><br><span class="line">`&lt;addr&gt;` `code` element here instead.</span><br></pre></td></tr></table></figure><p><strong>Shortcuts:</strong>  <code>CMD + K</code><br><strong>Result:</strong></p><p>I think you should use an<br><code>&lt;addr&gt;</code> <code>code</code> element here instead.</p><h2 id="Multi-line-code"><a href="#Multi-line-code" class="headerlink" title="Multi-line code"></a>Multi-line code</h2><p><strong>Example:</strong></p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">        $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p><strong>Shortcuts:</strong>  <code>CMD + Shift + K</code><br><strong>Result:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">        $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sequence-and-Flow-chart"><a href="#Sequence-and-Flow-chart" class="headerlink" title="Sequence and Flow chart"></a>Sequence and Flow chart</h2><p><strong>Example:</strong></p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello</span><br><span class="line">Note right of China: China thinks about it</span><br><span class="line">China--&gt;Andrew: How are you?</span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start:&gt;http://www.google.com[blank]</span><br><span class="line">e=&gt;end:&gt;http://www.google.com</span><br><span class="line">op1=&gt;operation: My Operation</span><br><span class="line">sub1=&gt;subroutine: My Subroutine</span><br><span class="line">cond=&gt;condition: Yes</span><br><span class="line">or No?:&gt;http://www.google.com</span><br><span class="line">io=&gt;inputoutput: catch something...</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure></code></pre><p><strong>Result:</strong> ( Please enable  <code>Preferences</code> - <code>Themes</code> - <code>Enable sequence &amp; flow chart</code>, default is enable. )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello</span><br><span class="line">Note right of China: China thinks about it</span><br><span class="line">China--&gt;Andrew: How are you?</span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start:&gt;http://www.google.com[blank]</span><br><span class="line">e=&gt;end:&gt;http://www.google.com</span><br><span class="line">op1=&gt;operation: My Operation</span><br><span class="line">sub1=&gt;subroutine: My Subroutine</span><br><span class="line">cond=&gt;condition: Yes</span><br><span class="line">or No?:&gt;http://www.google.com</span><br><span class="line">io=&gt;inputoutput: catch something...</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure><p>More info: <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">http://bramp.github.io/js-sequence-diagrams/</a>, <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">http://adrai.github.io/flowchart.js/</a></p><h2 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">First Header | Second Header</span><br><span class="line">------------ | -------------</span><br><span class="line">Content from cell 1 | Content from cell 2</span><br><span class="line">Content in the first column | Content in the second column</span><br></pre></td></tr></table></figure><p>You can create tables by assembling a list of words and dividing them with hyphens - (for the first row), and then separating each column with a pipe |:</p><p><strong>Result:</strong></p><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content from cell 1</td><td>Content from cell 2</td></tr><tr><td>Content in the first column</td><td>Content in the second column</td></tr></tbody></table><h2 id="Strikethrough"><a href="#Strikethrough" class="headerlink" title="Strikethrough"></a>Strikethrough</h2><p><strong>Example:</strong></p><p>(like <del>this</del>)</p><p><strong>Result:</strong></p><p>Any word wrapped with two tildes (like <del>this</del>) will appear crossed out.</p><h2 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h2><p>Following lines will produce a horizontal rule:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><hr><hr><hr><h2 id="LaTex"><a href="#LaTex" class="headerlink" title="LaTex"></a>LaTex</h2><p>Use double US dollars sign pair for Block level Math formula, and one US dollar sign pair for Inline Level.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">For example this is a Block level $$x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;$$ formula, and this is an inline Level $x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;$ formula.</span><br><span class="line"></span><br><span class="line">\\[ \frac&#123;1&#125;&#123;\Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \pi&#125;&#125; =</span><br><span class="line">1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">&#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125; &#123;1+\ldots&#125; &#125; &#125; &#125; \\]</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><p>For example this is a Block level $$x = {-b \pm \sqrt{b^2-4ac} \over 2a}$$ formula, and this is an inline Level $x = {-b \pm \sqrt{b^2-4ac} \over 2a}$ formula.</p><p>\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =<br>1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}<br>{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]</p><h2 id="Footnote"><a href="#Footnote" class="headerlink" title="Footnote"></a>Footnote</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a footnote:[^sample_footnote]</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><p>This is a footnote:[^sample_footnote]</p><p>[^sample_footnote]: footnote text detail…</p><h2 id="Comment-And-Read-More"><a href="#Comment-And-Read-More" class="headerlink" title="Comment And Read More.."></a>Comment And Read More..</h2><!-- comment --><!-- more --><p>Actions-&gt;Insert Read More Comment <em>OR</em> <code>CMD + .</code></p><h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC]</span><br></pre></td></tr></table></figure><p><strong>Result:</strong></p><p>[TOC]</p>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RN-android报错</title>
      <link href="/2018/08/20/RN-android%E6%8A%A5%E9%94%99/"/>
      <url>/2018/08/20/RN-android%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<ul><li><h3 id="使用react-native-run-android-运行出现"><a href="#使用react-native-run-android-运行出现" class="headerlink" title="使用react-native run-android 运行出现"></a>使用react-native run-android 运行出现</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`JAVA_HOME is set to an invalid directory`</span><br></pre></td></tr></table></figure><a id="more"></a><p>这个原因是<code>.bash_profile</code>中定义的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASS_PATH=$JAVA_HOME/lib:$CLASS_PATH</span><br></pre></td></tr></table></figure><p>文件目录不正确，解决办法，使用android studio运行项目，查看jdk路径<br><img src="/2018/08/20/RN-android报错/001.png" alt=""><br><img src="/2018/08/20/RN-android报错/002.png" alt=""></p><ul><li><h3 id="android-运行起来，报错could-not-connect-to-development-server"><a href="#android-运行起来，报错could-not-connect-to-development-server" class="headerlink" title="android 运行起来，报错could not connect to development server"></a>android 运行起来，报错<code>could not connect to development server</code></h3>需要摇一摇在设置<code>debug server host &amp;port for device</code><br><img src="/2018/08/20/RN-android报错/003.png" alt=""><br><img src="/2018/08/20/RN-android报错/004.png" alt=""></li></ul>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RN打包iOS报错</title>
      <link href="/2018/08/19/RN%E6%89%93%E5%8C%85ios%E6%8A%A5%E9%94%99/"/>
      <url>/2018/08/19/RN%E6%89%93%E5%8C%85ios%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<ul><li><h3 id="RN打包iOS报错"><a href="#RN打包iOS报错" class="headerlink" title="RN打包iOS报错"></a>RN打包iOS报错</h3></li></ul><p><img src="/2018/08/19/RN打包ios报错/001.png" alt=""></p><a id="more"></a><p>需要在xcode中修改</p><p><img src="/2018/08/19/RN打包ios报错/002.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mac系统过大</title>
      <link href="/2018/08/19/mac%20%E7%B3%BB%E7%BB%9F%E8%BF%87%E5%A4%A7/"/>
      <url>/2018/08/19/mac%20%E7%B3%BB%E7%BB%9F%E8%BF%87%E5%A4%A7/</url>
      <content type="html"><![CDATA[<ul><li>在终端输入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure><p>可以看到每个文件大小占比，cd到比较大的<br>那个目录,通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -d 1 -h</span><br></pre></td></tr></table></figure><a id="more"></a><p>者命令查看文件大小分布，然后cd到比较大目录在通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -d 1 -h</span><br></pre></td></tr></table></figure><p>如此重复，删掉占用硬盘比较大的文件，</p><ul><li>删除的时候先看一下，别冲动一下删除</li><li><a href="https://www.cnblogs.com/yajunLi/p/7008578.html" target="_blank" rel="noopener">参考</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CodePush 命令行</title>
      <link href="/2018/08/19/codePush/"/>
      <url>/2018/08/19/codePush/</url>
      <content type="html"><![CDATA[<ul><li><a href="https://github.com/Microsoft/code-push/blob/master/cli/README-cn.md" target="_blank" rel="noopener">原文地址</a></li></ul><h1 id="CodePush-命令行"><a href="#CodePush-命令行" class="headerlink" title="CodePush 命令行"></a>CodePush 命令行</h1><h4 id="Note-This-translated-document-is-community-contributed-and-maintained-it-will-not-be-kept-updated-or-in-sync-with-the-original-by-the-main-contributors-Please-send-a-pull-request-if-you-find-any-issues"><a href="#Note-This-translated-document-is-community-contributed-and-maintained-it-will-not-be-kept-updated-or-in-sync-with-the-original-by-the-main-contributors-Please-send-a-pull-request-if-you-find-any-issues" class="headerlink" title="Note: This translated document is community contributed and maintained, it will not be kept updated or in sync with the original by the main contributors. Please send a pull request if you find any issues."></a>Note: This translated document is community contributed and maintained, it will not be kept updated or in sync with the <a href="./README.md">original</a> by the main contributors. Please send a pull request if you find any issues.</h4><h4 id="注：本翻译文档是由社区贡献和维护，不受原文的作者持续维护并更新。如果您发现任何问题，请发送pull请求。"><a href="#注：本翻译文档是由社区贡献和维护，不受原文的作者持续维护并更新。如果您发现任何问题，请发送pull请求。" class="headerlink" title="注：本翻译文档是由社区贡献和维护，不受原文的作者持续维护并更新。如果您发现任何问题，请发送pull请求。"></a>注：本翻译文档是由社区贡献和维护，不受<a href="./README.md">原文</a>的作者持续维护并更新。如果您发现任何问题，请发送pull请求。</h4><a id="more"></a><p>CodePush是一个云服务，它能让Cordova和React Native的开发者将手机应用的更新直接部署到用户的设备上。<br>它担任类似中间仓库的角色，开发者可以把更新（JS，HTML，CSS和图片）发布到这个仓库上，然后那些Apps就能查询到更新了（那些集成了CodePush SDKs的<a href="http://github.com/Microsoft/cordova-plugin-code-push" target="_blank" rel="noopener">Cordova</a>和<a href="http://github.com/Microsoft/react-native-code-push" target="_blank" rel="noopener">React Native</a> 应用）。</p><p>这就让你可以与你的用户群有一个更确定且直接的交互模式，当你定位到Bug或添加小功能时，就不需要重新构建二进制文件再在各AppStore里重新发布了。</p><p><img src="https://cloud.githubusercontent.com/assets/116461/14505396/c97bdc78-016d-11e6-89da-3f3557f8b33d.png" alt="CodePush CLI"></p><ul><li><a href="#安装">安装</a></li><li><a href="#快速开始">快速开始</a></li><li><a href="#创建账号">创建账号</a></li><li><a href="#身份认证">身份认证</a></li><li><a href="#应用管理">应用管理</a></li><li><a href="#应用合作">应用合作</a></li><li><a href="#部署管理">部署管理</a></li><li><a href="#发布更新">发布更新</a><ul><li><a href="#发布更新-general">发布更新 (General)</a></li><li><a href="#发布更新-react-native">发布更新 (React Native)</a></li><li><a href="#发布更新-cordova">发布更新 (Cordova)</a></li></ul></li><li><a href="#补丁更新">补丁更新</a></li><li><a href="#促进更新">促进更新</a></li><li><a href="#回滚更新">回滚更新</a></li><li><a href="#查看发布历史">查看发布历史</a></li><li><a href="#清除发布历史">清除发布历史</a></li></ul><p><a href="./README.md">[English Version]</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>安装 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li>安装 CodePush CLI: <code>npm install -g code-push-cli</code></li></ul><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ol><li>使用CodePush CLI创建一个<a href="#创建账号">CodePush 账号</a></li><li>注册你的CodePush<a href="#应用管理">应用</a>, 并<a href="#应用合作">分享</a>给你团队的其它开发者</li><li>用<a href="http://github.com/Microsoft/cordova-plugin-code-push" target="_blank" rel="noopener">Cordova插件</a> 或 <a href="http://github.com/Microsoft/react-native-code-push" target="_blank" rel="noopener">React Native插件</a>配置好CodePush并指向你希望的部署环境</li><li><a href="#发布更新">发布</a>更新</li><li>活的长而成功！<a href="https://en.wikipedia.org/wiki/Vulcan_salute" target="_blank" rel="noopener">详细资料</a></li></ol><h2 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h2><p>在你发布应用更新之前，你需要创建一个CodePush帐号。一旦你安装了Cli你就可以简单的使用如下命令来注册：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push register</span><br></pre></td></tr></table></figure><p>这将会启动浏览器，要求验证你的Github或微软帐号。一旦验证成功，它将创建一个CodePush帐号跟你的Github或MSA相连，并生成一个访问密钥(Access Key)，你可以拷贝/粘贴到CLI以便登录。</p><p><em>注意：注册成功后，你就已经自动登录了。所以除非你明确登出了，否则你不需要在此机器上再次登录。</em></p><p>如果你已有一个帐号，那你还可以把你的帐号跟另一个身份认证提供商关联起来，通过运行：</p><p>（我个人理解：CodePush提供商有Github和Mircosoft，它允许你可以把两个帐号关联起来。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push link</span><br></pre></td></tr></table></figure><p>注意：为了实现这个(关联)的目的，你在另一个身份认证供应商那边用的Email地址必须与你现存的帐号一致。</p><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><p>在CodePush CLI里大多数命令需要身份认证，所以在你开始管理你的帐号之前，你需要使用GitHub或者微软帐号注册和登录。你可以通过执行如下命令做到这些：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push login</span><br></pre></td></tr></table></figure><p>这将会启动浏览器，要求验证你的Github或微软帐号。这将生成一个访问密钥(Access Key)，然后你可以拷贝/粘贴到CLI（它会提示你这样做）。这时你就认证成功了，并且可以关掉你的浏览器了。</p><p>如果在任何时候你想确认你是否已经登录了，你可以运行如下命令来显示与你当前认证会话相关的e-mail帐号，而且这个身份提供者是连接到（如：GitHub）的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push whoami</span><br></pre></td></tr></table></figure><p>当你从CLI登录后，你的访问密钥(Access Key)就一直保存在你本地磁盘上，所以你不必每次使用帐号是都需要登录。为了终止会话或删除AccessKey，你可以简单的运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push logout</span><br></pre></td></tr></table></figure><p>如果你在一台机器上忘记注销（比如：你朋友的电脑上），你可以使用如下命令列出和删除任何“激活中”的Access Keys。Access Keys列表将显示创建Key的机器名和发生登录的时间。这让你可以简单的认出那些你不想要保存的Keys。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code-push access-key ls</span><br><span class="line">code-push access-key rm &lt;accessKey&gt;</span><br></pre></td></tr></table></figure><p>如果你需要额外的Keys，被用来验证CodePush服务而不需要给你的GitHub和/或访问微软凭证，您可以运行下面的命令来创建一个持久的Access Key(连同一个描述):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push access-key add &quot;VSTS Integration&quot;</span><br></pre></td></tr></table></figure><p>在创建新的密钥之后，您可以在<code>login</code>命令后使用<code>--accessKey</code>标志并指定其值，它允许您执行“无头”身份验证，而不是启动一个浏览器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push login --accessKey &lt;accessKey&gt;</span><br></pre></td></tr></table></figure><p>当使用这种方式登录时，密钥(Access Key)在注销时不会自动失效，它可以一直被使用，除非它从CodePush服务端明确被移除掉。然而，仍然建议一旦你完成了会话就注销掉，以便从本地磁盘移除掉你的授权证书。</p><h2 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h2><p>在你发布更新前，你需要用如下命令在CodePush服务上注册一个App：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push app add &lt;appName&gt; &lt;os&gt; &lt;platform&gt;</span><br></pre></td></tr></table></figure><p>如果你的App既有iOS又有Android，请<em>为不同平台创建单独的App</em>（详情参照下文的注解）。一个平台一个。这样你可以单独的管理和发布更新，从长远来看这会让事情更简单。大部分人的命名约定会在App名加后缀<code>-IOS</code>和<code>-Android</code>。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code-push app add MyApp-Android</span><br><span class="line">code-push app add MyApp-iOS</span><br></pre></td></tr></table></figure><p><em>注意：在iOS和Android使用相同的app可能会导致安装异常，因为CodePush在iOS和Android的更新包内容会有差异。</em></p><p>所有新的Apps自动会出现有个部署环境（<code>Staging</code>和<code>Production</code>），为了你可以开始发布更新到不同的渠道而不需要做任何其它的事（参考下面的部署指南）。你创建一个App之后，CLI将显示<code>Staging</code>和<code>Production</code>环境的开发密钥，你就可以使用不同的SDKs(详细请看<a href="http://github.com/Microsoft/cordova-plugin-code-push" target="_blank" rel="noopener">Cordova</a> 和 <a href="http://github.com/Microsoft/react-native-code-push" target="_blank" rel="noopener">React Native</a>)来配置你的手机端App了。</p><p>如果你不喜欢你之前取的名字，你还可以随时重命名它，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push app rename &lt;appName&gt; &lt;newAppName&gt;</span><br></pre></td></tr></table></figure><p>应用的名字从管理方面看只是为了能辨识，因此，必要时可以随时重命名它。它其实不会影响正在运行的应用程序，因为更新的查询都是通过部署密钥的。</p><p>如果你不想要一个App，你可以从服务端上移除它，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push app rm &lt;appName&gt;</span><br></pre></td></tr></table></figure><p>做这个移除请务必小心，因为任何配置了它的App都将停止收到更新了。</p><p>最后，如果你想列出你在CodePush服务上注册的所有Apps，你可以运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push app ls</span><br></pre></td></tr></table></figure><h2 id="应用合作"><a href="#应用合作" class="headerlink" title="应用合作"></a>应用合作</h2><p>如果你讲和其它开发者在一起合作同一个CodePush应用，你可以把他们添加为合作者，使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push collaborator add &lt;appName&gt; &lt;collaboratorEmail&gt;</span><br></pre></td></tr></table></figure><p><em>注意： 这个期待开发者已经用e-mail<a href="#创建账号">注册</a>了CodePush，所以在打算分享应用之前确保他们已经准备好了一切。</em></p><p>一旦添加了，所有的合作者将立即拥有了最新分享App的如下权限：</p><ol><li>查看App，它的合作者，<a href="#部署管理">部署管理</a>和<a href="#查看发布历史">查看发布历史</a>。</li><li><a href="#发布更新">发布</a>更新到任何应用的部署环境。</li><li><a href="#促进更新">促进</a>更新在任何应用部署环境之间。</li><li><a href="#回滚更新">回滚</a>任何应用部署。</li><li><a href="#补丁更新">打补丁</a>在任何应用部署里。</li></ol><p>相反的，这就意味着一个合作者不能做任何如下的事情：</p><ol><li>重命名或删除应用。</li><li>转让应用的所有权。</li><li>创建，重命名或删除新的部署环境。</li><li>清除一个部署历史。</li><li>添加或删除合作者。</li></ol><p><em>注意：一个合作的开发者可以移除他/她自己。</em></p><p>随着时间的推移，如果有人不再和你一起合作，那你可以解除合作者关系，使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push collaborator rm &lt;appName&gt; &lt;collaboratorEmail&gt;</span><br></pre></td></tr></table></figure><p>如果你想列出应用的所有合作者，你可以简单的运行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push collaborator ls &lt;appName&gt;</span><br></pre></td></tr></table></figure><p>最后，如果在某刻你（作为App的拥有者）将不再开发App了，你想转让给其他开发者（或客户），你可以运行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push app transfer &lt;appName&gt; &lt;newOwnerEmail&gt;</span><br></pre></td></tr></table></figure><p><em>注意：就像<code>code-push collaborator add</code>命令一样，这期望新的拥有者已经用指定的e-mail注册了CodePush。</em></p><p>一经确认，该指定的开发者成为App的拥有者，而且立即接收到该角色的相关权限。除了拥有权转移外，其它的任何都没有被修改（比如：部署环境，发布历史，合作者）。这意味着你还仍然是该App的一个合作者，所以如果你想移除你自己，那你可以在成功转让拥有全后简单的运行<code>code-push collaborator rm</code>命令。</p><h2 id="部署管理"><a href="#部署管理" class="headerlink" title="部署管理"></a>部署管理</h2><p>从CodePush的角度来看，一个应用把一个或更多的东西简单命名分组称为“部署(环境)”。</p><p>While the app represents a conceptual “namespace” or “scope” for a platform-specific version of an app (e.g. the iOS port of Foo app), its deployments represent the actual target for releasing updates (for developers) and synchronizing updates (for end-users). Deployments allow you to have multiple “environments” for each app in-flight at any given time, and help model the reality that apps typically move from a dev’s personal environment to a testing/QA/staging environment, before finally making their way into production.</p><p><em>注意: 正如你将在下面看到的<code>release</code>（发布），<code>promote</code>（提升），<code>rollback</code>（回滚）命令需要应用名字和部署名字，因为这两个组成一个独特的发布标识（例如：我想发布更新到我的IOS应用给beta环境的测试者们）。</em></p><p>当一个用CodePush服务注册的应用，它默认包含两个部署环境：<code>Staging</code>和<code>Production</code>。这让你可以理解发布更新到一个内部的环境，你可以在推送到终端用户之前彻底的测试每个更新。这个工作流是至关重要的，以确保你的版本准备好给大众，而且这是一个在Web上实践很久的惯例。</p><p>如果你的App有<code>Staging</code>和<code>Production</code>环境其实已经满足了你的需求，然后你不需要做任何事情。不过，如果你需要alpha，dev等部署环境，那你可以简单的使用如下命令创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push deployment add &lt;appName&gt; &lt;deploymentName&gt;</span><br></pre></td></tr></table></figure><p>就像Apps一样，你也可以删除或重命名部署环境，分别使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code-push deployment rm &lt;appName&gt; &lt;deploymentName&gt;</span><br><span class="line">code-push deployment rename &lt;appName&gt; &lt;deploymentName&gt; &lt;newDeploymentName&gt;</span><br></pre></td></tr></table></figure><p>你可以在任何时候查看特定应用包含的部署环境列表，你可以简单的运行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push deployment ls &lt;appName&gt; [--displayKeys|-k]</span><br></pre></td></tr></table></figure><p>这将不仅显示部署环境列表，而且还有元数据（例如：强制性属性，描述）和最新版本的安装指标：</p><p><img src="https://cloud.githubusercontent.com/assets/116461/12526883/7730991c-c127-11e5-9196-98e9ceec758f.png" alt="Deployment list"></p><p><em>注意: 因为他们很少用和需要屏幕，部署密钥默认是不显示的。如果你需要查看它们，只要在<code>deployment ls</code>命令后面加上<code>-k</code>标识即可。</em></p><p>安装指标有如下意义：</p><ul><li><p><strong>Active（激活）</strong> - 成功安装的数量目前运行这个版本。这个数字将会随着用户更新到或离开这个版本分别增加或减少。</p></li><li><p><strong>Total</strong> - 该版本更新收到的所有成功安装的总数。这个数字只会随新用户/设备安装它而增加，所以它是<strong>激活</strong>的超集。</p></li><li><p><strong>Pending</strong> - 更新被下载了但还没安装的数量。This would only apply to updates that aren’t installed immediately, and helps provide the broader picture of release adoption for apps that rely on app resume and restart to apply an update.</p></li><li><p><strong>Rollbacks</strong> - 该版本被自动回滚的次数。理想情况下这个数应该为0，而且在这种情况下这个量是不会显示的。然而，如果你发布了一个包含严重问题(Crash)的更新，CodePush插件将在安装时回滚到上一个版本，同时把问题反馈到服务端。这可以让终端用户依旧能用，不被损坏的版本阻塞住，而且能够在CLI里看到这些，你可以鉴定错误的版本并且能在服务器上做出<a href="#回滚更新">回滚</a>的响应。</p></li><li><p><strong>Rollout</strong> - 显示有资格接收更新的百分比。这个属性只会被显示在那些<code>激活的</code>的首次展示的版本，所以，首次展示百分比是小于100%。此外， 因为一个部署任何时候只能有一个激活的首次展示，这个标签只会被显示在最新的一次部署里。</p></li><li><p><strong>Disabled</strong> - 标示是否该版本被标记成失效的，因此用户是否可下载。这个属性只有在版本真实失效时才显示。</p></li></ul><p>当度量(metrics)单元格统计为<code>No installs recorded</code>（无安装记录），那是表示这个版本在服务器上没有任何活动记录。这可能要么是因为被插件阻止了，或者用户还没有跟CodePush服务器同步。一旦发生了安装，你将在CLI里看到该版本的度量。</p><h2 id="发布更新"><a href="#发布更新" class="headerlink" title="发布更新"></a>发布更新</h2><p>一旦你的App被配置了从CodePush服务器查询版本更新，你就可以向它开始发布。为了简易性和灵活性，CodePush CLI包含三种不同的发布命令：</p><ol><li><p><a href="#发布更新-general">通用</a> - 使用外部的工具或构建脚本（如：Gulp任务，<code>react-native bundle</code>命令）像CodePush服务器发布一个更新。这对装配进目前的工作流而言提供最灵活的方式，因为它严格按CodePush特性的步骤处理，而把App特性的编译过程留给你。</p></li><li><p><a href="#发布更新-react-native">React Native</a> - 跟通用发布命令一样执行相同的功能，但是还会为你生成的应用更新内容(JS包和资源)，而不需要你运行<code>react-native bundle</code>，然后执行<code>code-push release</code>。</p></li><li><p><a href="#发布更新-cordova">Cordova</a> - 跟通用发布命令一样执行相同的功能，但也会为你处理准备应用更新的任务，而不需要你运行<code>cordova prepare</code>，然后执行<code>code-push release</code>。</p></li></ol><p>你应该使用哪个命令主要是一种需求或偏好的事。然而，我们通常推荐使用相关的特定平台的命令开始(因为它大大简化了体验)，然后当有更大控制必要时用通用的<code>release</code>命令。</p><h3 id="发布更新-General"><a href="#发布更新-General" class="headerlink" title="发布更新 (General)"></a>发布更新 (General)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">code-push release &lt;appName&gt; &lt;updateContents&gt; &lt;targetBinaryVersion&gt;</span><br><span class="line">[--deploymentName &lt;deploymentName&gt;]</span><br><span class="line">[--description &lt;description&gt;]</span><br><span class="line">[--disabled &lt;disabled&gt;]</span><br><span class="line">[--mandatory]</span><br><span class="line">[--rollout &lt;rolloutPercentage&gt;]</span><br></pre></td></tr></table></figure><h4 id="App-name-应用名-参数"><a href="#App-name-应用名-参数" class="headerlink" title="App name (应用名)参数"></a>App name (应用名)参数</h4><p>指定将发布更新的CodePush 应用名。这个与最初你调用<code>code-push app add</code>（如：”MyApp-Android”）的名字保持一致。如果你想查一下，可以运行<code>code-push app ls</code>命令看看应用的列表。</p><h4 id="Update-contents-更新内容-参数"><a href="#Update-contents-更新内容-参数" class="headerlink" title="Update contents (更新内容)参数"></a>Update contents (更新内容)参数</h4><p>指定应用更新的代码和资源位置。你可以提供要么一个单独文件（如：React Native的JS bundle文件），或者一个文件夹路径（如：Cordova应用的<code>/platforms/ios/www</code>文件夹）。注意你不需要为了部署更新而对文件或文件夹进行Zip压缩，因为CLI会帮你自动ZIP压缩。</p><p>重要的是你指定的路径是跟特定平台相关的，准备/打包你的应用。下面表格概括了在发布前你应该运行哪个命令，以及你以后可以参考的<code>updateContents</code> 参数路径:</p><table><thead><tr><th>平台</th><th>准备命令（Prepare command ）</th><th>包的路径 (相对项目的根目录)</th></tr></thead><tbody><tr><td>Cordova (Android)</td><td><code>cordova prepare android</code></td><td><code>./platforms/android/assets/www</code> 目录</td></tr><tr><td>Cordova (iOS)</td><td><code>cordova prepare ios</code></td><td><code>./platforms/ios/www</code> 目录</td></tr><tr><td>React Native wo/assets (Android)</td><td><code>react-native bundle --platform android --entry-file &lt;entryFile&gt; --bundle-output &lt;bundleOutput&gt; --dev false</code></td><td><code>--bundle-output</code> 参数的值</td></tr><tr><td>React Native w/assets (Android)</td><td><code>react-native bundle --platform android --entry-file &lt;entryFile&gt; --bundle-output &lt;releaseFolder&gt;/&lt;bundleOutput&gt; --assets-dest &lt;releaseFolder&gt; --dev false</code></td><td><code>--assets-dest</code> 参数的值，应该是一个包含资源和JS bundle的新创建的目录。</td></tr><tr><td>React Native wo/assets (iOS)</td><td><code>react-native bundle --platform ios --entry-file &lt;entryFile&gt; --bundle-output &lt;bundleOutput&gt; --dev false</code></td><td><code>--bundle-output</code> 参数的值</td></tr><tr><td>React Native w/assets (iOS)</td><td><code>react-native bundle --platform ios --entry-file &lt;entryFile&gt; --bundle-output &lt;releaseFolder&gt;/&lt;bundleOutput&gt; --assets-dest &lt;releaseFolder&gt; --dev false</code></td><td><code>--assets-dest</code> 参数的值，应该是一个包含资源和JS bundle的新创建的目录。</td></tr></tbody></table><h4 id="Target-binary-version-目标二进制版本-参数"><a href="#Target-binary-version-目标二进制版本-参数" class="headerlink" title="Target binary version (目标二进制版本)参数"></a>Target binary version (目标二进制版本)参数</h4><p>这是你想发布更新的特定仓库/二进制版本，这样只有那个版本上的用户才会接收到更新，而那些运行较老/新版本用户则不会。这样很有用，原因如下：</p><ol><li><p>如果有用户运行一个很老的版本，有可能在CodePush的更新里有个破坏性的更新，这跟他们现在运行的版本不兼容。</p></li><li><p>如果用户正在运行一个新的二进制版本，那么假定，他们正在运行并更新CodePush 更新（可能不兼容）。</p></li></ol><p>如果你想更新应用商店里二进制文件的多个版本，我们允许你指定参数像这样<a href="https://github.com/npm/node-semver#advanced-range-syntax" target="_blank" rel="noopener">语义版本范围表达式</a>。这样， 任何在版本号范围内（如：<code>semver.satisfies(version, range)</code> returns <code>true</code>）的客户端设备都能获得更新。</p><p>如下是有效的版本号范围表达式的例子：</p><table><thead><tr><th>范围表达式</th><th>谁获得更新</th></tr></thead><tbody><tr><td><code>1.2.3</code></td><td>只有<code>1.2.3</code>版本</td></tr><tr><td><code>*</code></td><td>所有版本</td></tr><tr><td><code>1.2.x</code></td><td>主版本为1，小版本为2的任何版本</td></tr><tr><td><code>1.2.3 - 1.2.7</code></td><td>在 <code>1.2.3</code> (包含) 和 <code>1.2.7</code> (包含) 之间的版本</td></tr><tr><td><code>&gt;=1.2.3 &lt;1.2.7</code></td><td>在 <code>1.2.3</code> (包含) 和 <code>1.2.7</code> (不包含)之间的版本</td></tr><tr><td><code>~1.2.3</code></td><td>相当于<code>&gt;=1.2.3 &lt;1.3.0</code></td></tr><tr><td><code>^1.2.3</code></td><td>相当于<code>&gt;=1.2.3 &lt;2.0.0</code></td></tr></tbody></table><p><em>注意：如果语义表达式以特殊字符开始如<code>&gt;</code>,<code>^</code>或**</em>，如果你没有用引号括起来的话命令可能执行不对，因为shell在CLI里不支持右边的值。所以，当调用<code>release</code>命令时最好能把你的<code>targetBinaryVersion</code>参数用双引号括起来，如：<code>code-push release MyApp updateContents &quot;&gt;1.2.3&quot;</code>。*</p><p><em>注意：根据语义版本规范，版本范围仅对非预发布版本生效：(<a href="https://github.com/npm/node-semver#prerelease-tags" target="_blank" rel="noopener">https://github.com/npm/node-semver#prerelease-tags</a>) 。当你想要发布更新到一个预发布的版本上时，则需要明确指定你想要升级的版本号（比如<code>1.2.3-beta</code>）。</em></p><p>如下表格分别概括了每个应用类型的CodePush更新的语义版本范围的版本值：</p><table><thead><tr><th>平台</th><th>应用商店版本来源</th></tr></thead><tbody><tr><td>Cordova</td><td>在<code>config.xml</code>文件里的<code>&lt;widget version&gt;</code> 属性</td></tr><tr><td>React Native (Android)</td><td>在<code>build.gradle</code>文件里 <code>android.defaultConfig.versionName</code> 属性</td></tr><tr><td>React Native (iOS)</td><td>在<code>Info.plist</code>文件里的<code>CFBundleShortVersionString</code> 键</td></tr><tr><td>React Native (Windows)</td><td>在<code>Package.appxmanifest</code>文件的 <code>&lt;Identity Version&gt;</code> 键</td></tr></tbody></table><p><em>注意：如果在元数据文件里的应用版本号漏掉补丁版本值，如<code>2.0</code>，它将被当成补丁版本值为<code>0</code>，如：<code>2.0 当成 2.0.0</code>.</em></p><h4 id="Deployment-name-部署环境名-参数"><a href="#Deployment-name-部署环境名-参数" class="headerlink" title="Deployment name (部署环境名)参数"></a>Deployment name (部署环境名)参数</h4><p>这是你想发布更新到的那个指定部署环境名。默认为<code>Staging</code>(临时环境)，但是当你准备部署到<code>Production</code>(生产环境)或一个你自定义的部署环境时，你只要指明设置这个参数即可。</p><p><em>注意：这个参数可以用”–deploymentName” 或 “-d”来设置。</em></p><h4 id="Description-描述-参数"><a href="#Description-描述-参数" class="headerlink" title="Description (描述)参数"></a>Description (描述)参数</h4><p>给部署提供一个可选的”更新日志”。当被检测到有更新时这个值就会完整的传到客户端，所以你的应用可以选择显示给终端用户（如：通过一个<code>哪些新东西？</code>的对话框）。这个字符串可以接受控制字符如<code>\n</code> 和 <code>\t</code>，以便你可以包含空白格式在你的描述里来提高可读性。</p><p><em>注意：这个参数可以用”–description” 或 “–des”来设置。</em></p><h4 id="Mandatory-强制性-参数"><a href="#Mandatory-强制性-参数" class="headerlink" title="Mandatory (强制性)参数"></a>Mandatory (强制性)参数</h4><p>这个标识该更新是否是强制性的（如：包含一个严重的安全修复）。这个属性简单的传到客户端，然后客户端决定是否要强制更新。</p><p><em>注意: 这个参数是简单的一个”标记”，所以，没有该标记表示版本更新可选，如果有标记则表示版本是强制更新的。你可以给它赋值（如：<code>--mandatory true</code>)，但其实简单的<code>--mandatory</code>就已能标识强制更新了。</em></p><p>强制属性是唯一的，因为服务端必要时将动态修改它，为了确保你对终端用户的版本更新语义上的维护。例如：设想你的应用有如下3个更新：</p><table><thead><tr><th>版本</th><th>强制？</th></tr></thead><tbody><tr><td>v1</td><td>No</td></tr><tr><td>v2</td><td>Yes</td></tr><tr><td>v3</td><td>No</td></tr></tbody></table><p>如果用户当前是<code>v1</code>版本，然后从服务端查询更新，将以<code>v3</code>（因为这是最新的）响应，但是它将动态将这个版本转变成强制的，因为中间有一个强制更新的版本。这个行为很重要因为<code>v3</code>的代码是在<code>v2</code>上增加的，所以任何没有获取<code>v2</code>版本的都会不管<code>v2</code>的强制，而继续让<code>v3</code>变成强制更新版本。</p><p>如果用户当前是<code>v2</code>版本，然后从服务器查询更新，响应结果为<code>v3</code>，但会留着这个版本作为可选的。这个因为他们已经接受了强制更新，所以没有必要去修改<code>v3</code>。这样的行为就是为什么我们说服务器会”动态改变”强制标签，因为随着版本的迭代，新版本的强制属性总会保存你设置的这个值。当有一个版本更新检查要响应给用户时，它只会在相邻的版本上改变。</p><p>如果你从没发布一个强制的更新，那么上面的行为不会应用到你，因为服务器从不改变一个可选的版本为强制版本，除非有像上面阐述的那样掺杂了强制版本。此外，如果一个版本标记成强制了，它决不会被转变成可选的，因为那没有任何意义。为了尊重上面描述的语义，服务器将只会把一个可选的发布改变为强制的。</p><p><em>注意：这个参数可以用<code>--mandatory</code> 或 <code>-m</code>来设置</em></p><h4 id="Rollout-参数"><a href="#Rollout-参数" class="headerlink" title="Rollout 参数"></a>Rollout 参数</h4><p><strong>重要：为了使这个参数有效，终端用户需要运行CodePush插件的<code>1.6.0-beta+</code>版本 (Cordova) 或 <code>1.9.0-beta+</code>版本 (React Native)。如果你发布了一个指明了首次展示(Rollout)属性的更新，那么运行老版本的Cordova或ReactNative用户不会更新。因此，直到你已经采取了必要CodePush SDK的版本，否则我们不建议设置一个首次展示(rollout)版本，因为没有人会接受它。</strong></p><p>这指定了可以接收这次更新的用户百分比（在<code>1</code>到<code>100</code>之间的数字）。这会是有帮助的，假如你想在每个人广泛获取之前，”飞行”一个新版本给部分的受众（如：25%） ，并且得到异常/崩溃的反馈观察。如果没有设置这个参数，它会设置为<code>100%</code>，所以，你只需要在你想实际限制多少用户能接收时去设置它。</p><p>当借用首次展现(rollout)能力，要记住一些额外注意事项：</p><ol><li><p>你不可以在最新版本的首次展示是”有效的”（如：首次展示值非空）的部署环境上发布新更新。在你在部署环境上发布进一步更新之前，首次展示属性需要是”完全的”（如：设置<code>roullout</code>属性为<code>100</code>）。</p></li><li><p>如果你回滚部署环境，它的最新版本的首次展示是”有效的”，那首次展示的值将被清除，实际上”禁止”首次展示行为。</p></li><li><p>不像<code>mandatory</code>和<code>description</code>字段，当从一个部署环境中促进发布时，它将不会传送<code>rollout</code>属性，所以，如果你想新的发布（在目标部署环境里）有首次展示的值，那么你需要在调用<code>promote</code>命令时明确的设置它。</p></li></ol><p><em>注意：这个参数可以用 <code>--rollout</code> or <code>-r</code> 来设置</em></p><h4 id="Disabled-参数"><a href="#Disabled-参数" class="headerlink" title="Disabled 参数"></a>Disabled 参数</h4><p>这个指明一个版本更新是否可以被用户下载。如果没有指定，版本更新不会是无效的（如：用户将要下载的那一刻你的应用称为<code>同步</code>）。如果你想发布一个更新但不是立即生效，那么这个参数是有价值的，直到你明确用<a href="#补丁更新">补丁</a>发布，当你要让用户能够下载（如：公告博客上线）。</p><p><em>注意：这个参数可以用 “–disabled” or “-x”来设置</em></p><h3 id="发布更新-React-Native"><a href="#发布更新-React-Native" class="headerlink" title="发布更新 (React Native)"></a>发布更新 (React Native)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">code-push release-react &lt;appName&gt; &lt;platform&gt;</span><br><span class="line">[--bundleName &lt;bundleName&gt;]</span><br><span class="line">[--deploymentName &lt;deploymentName&gt;]</span><br><span class="line">[--description &lt;description&gt;]</span><br><span class="line">[--development &lt;development&gt;]</span><br><span class="line">[--disabled &lt;disabled&gt;]</span><br><span class="line">[--entryFile &lt;entryFile&gt;]</span><br><span class="line">[--gradleFile &lt;gradleFile&gt;]</span><br><span class="line">[--mandatory]</span><br><span class="line">[--noDuplicateReleaseError]</span><br><span class="line">[--outputDir &lt;outputDir&gt;]</span><br><span class="line">[--plistFile &lt;plistFile&gt;]</span><br><span class="line">[--plistFilePrefix &lt;plistFilePrefix&gt;]</span><br><span class="line">[--sourcemapOutput &lt;sourcemapOutput&gt;]</span><br><span class="line">[--targetBinaryVersion &lt;targetBinaryVersion&gt;]</span><br><span class="line">[--rollout &lt;rolloutPercentage&gt;]</span><br><span class="line">[--privateKeyPath &lt;pathToPrivateKey&gt;]</span><br><span class="line">[--config &lt;config&gt;]</span><br></pre></td></tr></table></figure><p><code>release-react</code>命令是React Native特有的<a href="#发布更新"><code>发布</code></a>命令，支持相同的所有参数（如：<code>--mandatory</code>,<code>--description</code>），然而通过如下额外的动作简化了发布更新过程：</p><ol><li><p>运行<code>react-native bundle</code>命令去生成将要发布到CodePush服务的<a href="#update-contents-params">更新</a>(JS Bundle和资源)。它尽可能使用合理的默认值(如：创建一个non-dev构建,假设一个iOS入口文件被命名为“index.ios.js”)，但也暴露了有关<code>react-native bundle</code>参数使得灵活（如：<code>--sourcemapOutput</code>）。</p></li><li><p>通过使用定义在项目文件<code>info.plist</code>(IOS)和<code>build.gradle</code>(Android)里的版本名，推断<a href="#target-binary-version-目标二进制版本-参数"><code>targetBinaryVersion</code></a>的值。</p></li></ol><p>为了阐述<code>release-react</code>命令产生的差异，如下的例子是你可能如何生成和发布一个React Native应用版本更新，通过使用<code>release</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir ./CodePush</span><br><span class="line"></span><br><span class="line">react-native bundle --platform ios \</span><br><span class="line">--entry-file index.ios.js \</span><br><span class="line">--bundle-output ./CodePush/main.jsbundle \</span><br><span class="line">--assets-dest ./CodePush \</span><br><span class="line">--dev false</span><br><span class="line"></span><br><span class="line">code-push release MyApp ./CodePush 1.0.0</span><br></pre></td></tr></table></figure><p>用<code>release-react</code>命令实现等效的行为只需简单的如下的命令，这个通常更,这是通常更少出错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push release-react MyApp ios</span><br></pre></td></tr></table></figure><p><em>注意：我们相信<code>release-react</code>命令对大多数React Native的开发者是有价值的，所以如果你发现它不够灵活或者缺少关键功能，不要犹豫请<a href="mailto:codepushfeed@microsoft.com" target="_blank" rel="noopener">让我们知道</a>，以便我们可以提高它。</em></p><h4 id="App-name-参数"><a href="#App-name-参数" class="headerlink" title="App name 参数"></a>App name 参数</h4><p>这个参数跟<a href="#App-name-应用名-参数">上面章节</a>描述的一样。</p><h4 id="Platform-参数"><a href="#Platform-参数" class="headerlink" title="Platform 参数"></a>Platform 参数</h4><p>指定当前的更新是哪个平台的，可以是<code>android</code>， <code>ios</code>， 或<code>windows</code>（不区分大小写）。</p><h4 id="Deployment-name-参数"><a href="#Deployment-name-参数" class="headerlink" title="Deployment name 参数"></a>Deployment name 参数</h4><p>相同的参数跟 <a href="#deployment-name-参数">上面的章节</a>描述一样。</p><h4 id="Description-参数"><a href="#Description-参数" class="headerlink" title="Description 参数"></a>Description 参数</h4><p>相同的参数跟 <a href="#description-参数">上面的章节</a>描述一样。</p><h4 id="Mandatory-参数"><a href="#Mandatory-参数" class="headerlink" title="Mandatory 参数"></a>Mandatory 参数</h4><p>相同的参数跟 <a href="#mandatory-参数">上面的章节</a>描述一样。</p><h4 id="Rollout-参数-1"><a href="#Rollout-参数-1" class="headerlink" title="Rollout 参数"></a>Rollout 参数</h4><p>相同的参数跟 <a href="#rollout-参数">上面的章节</a>描述一样。如果没有指定，版本将对所有用户有效可下载。</p><h4 id="Target-binary-version-参数"><a href="#Target-binary-version-参数" class="headerlink" title="Target binary version 参数"></a>Target binary version 参数</h4><p>相同的参数跟 <a href="#target-binary-version-参数">上面的章节</a>描述一样。如果没有指定，默认使用<code>Info.plist</code> (iOS) and <code>build.gradle</code> (Android)文件里指定的精确版本号。</p><h4 id="Disabled-参数-1"><a href="#Disabled-参数-1" class="headerlink" title="Disabled 参数"></a>Disabled 参数</h4><p>相同的参数跟 <a href="#disabled-参数">上面的章节</a>)描述一样。</p><h4 id="Development-参数"><a href="#Development-参数" class="headerlink" title="Development 参数"></a>Development 参数</h4><p>这个指明是否要生成一个非最小化，开发的JS bundle文件。如果没有指明，默认是<code>false</code>，禁用警告提示并且bundle文件是最小化的。</p><p><em>注意：这个参数可以配置成<code>--development</code> 或<code>--dev</code></em></p><h4 id="Entry-file-参数"><a href="#Entry-file-参数" class="headerlink" title="Entry file 参数"></a>Entry file 参数</h4><p>指明相对应用根目录的路径入口JavaScript 文件。如果没有指定，默认是：如果存在<code>index.ios.js</code>(IOS), <code>index.android.js</code>(Android), 或者<code>index.windows.bundle</code>(Windows)，否则<code>index.js</code>。</p><p><em>注意：参数可以配置成<code>--entryFile</code>或<code>-e</code></em></p><h4 id="Bundle-name-参数"><a href="#Bundle-name-参数" class="headerlink" title="Bundle name 参数"></a>Bundle name 参数</h4><p>指明生成JS Bundle的文件名。如果没有指定，特定平台将会用的标准bundle名字：<code>main.jsbundle</code> (iOS), <code>index.android.bundle</code> (Android) and <code>index.windows.bundle</code> (Windows).</p><p><em>注意：参数可以配置成<code>--bundleName</code>或<code>-b</code></em></p><h4 id="Sourcemap-output-参数"><a href="#Sourcemap-output-参数" class="headerlink" title="Sourcemap output 参数"></a>Sourcemap output 参数</h4><p>指明生成的JS bundle 的sourcemap写入的相对路径。如果没有指定，sourcemaps文件不会生成。</p><p><em>注意：参数可以配置成<code>--sourcemapOutput</code>或<code>-s</code></em></p><h3 id="发布更新-Cordova"><a href="#发布更新-Cordova" class="headerlink" title="发布更新 (Cordova)"></a>发布更新 (Cordova)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">code-push release-cordova &lt;appName&gt; &lt;platform&gt;</span><br><span class="line">[--deploymentName &lt;deploymentName&gt;]</span><br><span class="line">[--description &lt;description&gt;]</span><br><span class="line">[--mandatory]</span><br><span class="line">[--targetBinaryVersion &lt;targetBinaryVersion&gt;]</span><br><span class="line">[--rollout &lt;rolloutPercentage&gt;]</span><br><span class="line">[--build]</span><br></pre></td></tr></table></figure><p>这个<code>release-cordova</code> 命令是Cordova特有的<a href="#发布更新"><code>发布</code></a>命令，支持相同的所有参数（如：<code>--mandatory</code>，<code>--description</code>），然而通过如下额外的动作简化了发布更新过程：</p><ol><li><p>运行<code>cordova prepare</code>命令去生成将要发布到CodePush服务的<a href="#update-contents-更新内容-参数">更新内容</a> (<code>www</code> 文件夹) 。</p></li><li><p>通过使用定义在项目文件<code>config.xml</code>文件里的版本名，推断<a href="#target-binary-version-目标二进制版本-参数"><code>targetBinaryVersion</code></a> 的值。</p></li></ol><p>为了阐述<code>release-cordova</code>命令产生的差异，如下的例子是你可能如何生成和发布一个Cordova应用版本更新，通过使用<code>release</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cordova prepare ios</span><br><span class="line">code-push release MyApp ./platforms/ios/www 1.0.0</span><br></pre></td></tr></table></figure><p>用<code>release-cordova</code>命令实现等效的行为只需简单的如下的命令，这个通常更,这是通常更少出错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push release-cordova MyApp ios</span><br></pre></td></tr></table></figure><p>注意：我们相信<code>release-cordova</code>命令对大多数Cordova的开发者是有价值的，所以如果你发现它不够灵活或者缺少关键功能，不要犹豫请<a href="mailto:codepushfeed@microsoft.com" target="_blank" rel="noopener">让我们知道</a>，以便我们可以提高它。</p><h4 id="App-name-参数-1"><a href="#App-name-参数-1" class="headerlink" title="App name 参数"></a>App name 参数</h4><p>这个参数跟<a href="#App-name-应用名-参数">上面章节</a>描述的一样。</p><h4 id="Platform-参数-1"><a href="#Platform-参数-1" class="headerlink" title="Platform 参数"></a>Platform 参数</h4><p>指定当前的更新是哪个平台的，可以是<code>ios</code>或<code>android</code>（不区分大小写）。</p><h4 id="Deployment-name-参数-1"><a href="#Deployment-name-参数-1" class="headerlink" title="Deployment name 参数"></a>Deployment name 参数</h4><p>相同的参数跟 <a href="#deployment-name-参数">上面的章节</a>描述一样。</p><h4 id="Description-参数-1"><a href="#Description-参数-1" class="headerlink" title="Description 参数"></a>Description 参数</h4><p>相同的参数跟 <a href="#description-参数">上面的章节</a>描述一样。</p><h4 id="Mandatory-参数-1"><a href="#Mandatory-参数-1" class="headerlink" title="Mandatory 参数"></a>Mandatory 参数</h4><p>相同的参数跟 <a href="#mandatory-参数">上面的章节</a>描述一样。</p><h4 id="Rollout-参数-2"><a href="#Rollout-参数-2" class="headerlink" title="Rollout 参数"></a>Rollout 参数</h4><p>相同的参数跟 <a href="#rollout-参数">上面的章节</a>描述一样。如果没有指定，版本将对所有用户有效可下载。</p><h4 id="Target-binary-version-参数-1"><a href="#Target-binary-version-参数-1" class="headerlink" title="Target binary version 参数"></a>Target binary version 参数</h4><p>相同的参数跟 <a href="#target-binary-version-参数">上面的章节</a>描述一样。如果没有指定，默认使用项目元数据里指定的（<code>Info.plist</code> (iOS) and <code>build.gradle</code> (Android)版本号。</p><h4 id="Disabled-参数-2"><a href="#Disabled-参数-2" class="headerlink" title="Disabled 参数"></a>Disabled 参数</h4><p>相同的参数跟 <a href="#disabled-参数">上面的章节</a>)描述一样。</p><h4 id="Build-参数"><a href="#Build-参数" class="headerlink" title="Build 参数"></a>Build 参数</h4><p>当你生成版本更新的web资源时，指定是否想用<code>cordova build</code>来取代<code>cordova prepare</code>（默认行为）。这是有价值的，假设你的项目包含构建钩子（如：转换TypeScript），所以CodePush简单的运行<code>cordova prepare</code>不够充分的创建和发布更新。如果没有指定，它默认是<code>false</code>。</p><p><em>注意：这个参数可以用<code>--build</code>或<code>-b</code>来设置</em></p><h2 id="补丁更新"><a href="#补丁更新" class="headerlink" title="补丁更新"></a>补丁更新</h2><p>在发布更新之后，可能有这样的场景，你需要修改一个或多个相关的属性（如：你忘记给一个严重的Bug修复打上强制标记了，你想增加更新的首次展示百分比）。你可以很容易的用下面的命令行来实现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">code-push patch &lt;appName&gt; &lt;deploymentName&gt;</span><br><span class="line">[--label &lt;releaseLabel&gt;]</span><br><span class="line">[--mandatory &lt;isMandatory&gt;]</span><br><span class="line">[--description &lt;description&gt;]</span><br><span class="line">[--rollout &lt;rolloutPercentage&gt;]</span><br><span class="line">[--disabled &lt;isDisabled&gt;]</span><br><span class="line">[--targetBinaryVersion &lt;targetBinaryVersion&gt;]</span><br></pre></td></tr></table></figure><p>抛开<code>appName</code> 和 <code>deploymentName</code>，所有参数是可选的，所以，你可以用这个命令一次性更新单个或者所有属性。调用<code>patch</code>命令而不指定任何属性将不产生任何操作结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Mark the latest production release as mandatory</span><br><span class="line">code-push patch MyApp Production -m</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Increase the rollout for v23 to 50%</span><br><span class="line">code-push patch MyApp Production -l v23 -rollout 50%</span><br></pre></td></tr></table></figure><h3 id="Label-参数"><a href="#Label-参数" class="headerlink" title="Label 参数"></a>Label 参数</h3><p>表明你想在指定的部署环境里更新哪个发布版本（如：<code>v23</code>）。如果省略了，那要求的变化将应用到指定的部署环境的最新版本上。为了查看你想更新的版本标签，你可以运行<code>code-push deployment history</code>命令并参见<code>Label</code>列。</p><p><em>注意：这个参数可以设置成<code>--label</code>或<code>-l</code></em></p><h3 id="Mandatory-参数-2"><a href="#Mandatory-参数-2" class="headerlink" title="Mandatory 参数"></a>Mandatory 参数</h3><p>同样的参数跟<a href="#mandatory-参数">上面的章节</a>描述一致，简单的允许你更改这个版本是否考虑强制更新。注意<code>--mandatory</code>和<code>--mandatory true</code>是同等的，但是缺少这个标记不等于<code>--mandatory false</code>。所以，如果参数省略了，对目标版本的强制性属性来说不会产生任何改变。你需要设置<code>--mandatory false</code>去明确的标识版本是可选的。</p><h3 id="Description-参数-2"><a href="#Description-参数-2" class="headerlink" title="Description 参数"></a>Description 参数</h3><p>同样的参数跟<a href="#description-参数">上面的章节</a>描述一致，简单的允许你更改关联版本的描述（如：你在发布时写了个错别字，或者你完全忘记添加一个描述了）。如果参数省略掉了，那么对于目标版本的描述属性来说不会有任何改动。</p><h3 id="Disabled-参数-3"><a href="#Disabled-参数-3" class="headerlink" title="Disabled 参数"></a>Disabled 参数</h3><p>同样的参数跟<a href="#disabled-参数">上面的章节</a>描述一致，简单的允许你去更改发布的版本是否无效。注意<code>--disabled</code>和<code>--disabled true</code>是等同的，但是缺省这个标识不等于<code>--disabled false</code>。所以，如果忽略了该参数，并不会对目标版本的无效(disabled)属性有修改。你需要设置<code>--disabled false</code>去明确标识一个以前无效的版本有效。</p><h3 id="Rollout-参数-3"><a href="#Rollout-参数-3" class="headerlink" title="Rollout 参数"></a>Rollout 参数</h3><p>同样的参数跟<a href="#rollout-参数">上面的章节</a>描述一致，简单的允许你去<strong>增加</strong>目标版本首次展示的百分比。这个参数只能设成一个比当前首次展示值要大的数字。此外，如果你想”完全的”首次展示，因此，让版本对每个人有效，你可以简单的设置参数<code>--rollout 100</code>，如果省略了这个参数，目标版本的首次展示(rollout)属性不会有任何改动。</p><p>此外，上面提到的，当你发布版本时没有指定首次展示(rollout)的值时，它相当于是被设置成了<code>100</code>。因此，如果你发布一个没有首次展示的更新，那你不可以通过<code>patch</code>命令改变rollout属性，因为那样是被认为在降低首次展示(rolltout)百分比。</p><h3 id="Target-binary-version-参数-2"><a href="#Target-binary-version-参数-2" class="headerlink" title="Target binary version 参数"></a>Target binary version 参数</h3><p>同样的参数跟<a href="#target-binary-version-参数">上面的章节</a>描述一致，简单的允许你去更改语义版本范围表明兼容哪个版本版本。这个可以很有用，如果你在最初发布时犯了个错（如：你指定<code>1.0.0</code>但本意<code>1.1.0</code>）或你想增加或减少版本支持的版本范围（如：你发现一个版本总是不能在<code>1.1.2</code>版本上正常运行）。如果省略了这个参数，目标版本的版本号属性不会有任何改动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 给意境存在的版本添加一个"最大二进制版本"范围</span><br><span class="line"><span class="meta">#</span>  by scoping its eligibility to users running &gt;= 1.0.5</span><br><span class="line">code-push patch MyApp Staging -t "1.0.0 - 1.0.5"</span><br></pre></td></tr></table></figure><h2 id="促进更新"><a href="#促进更新" class="headerlink" title="促进更新"></a>促进更新</h2><p>一旦测试完指定部署环境的版本更新（如：<code>Staging</code>），你想把它向下游推进（如：dev-&gt;staging, staging-&gt;production)，你可以简单的用如下命令去从一个部署环境拷贝到另一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">code-push promote &lt;appName&gt; &lt;sourceDeploymentName&gt; &lt;destDeploymentName&gt;</span><br><span class="line">[--description &lt;description&gt;]</span><br><span class="line">[--disabled &lt;disabled&gt;]</span><br><span class="line">[--mandatory]</span><br><span class="line">[--rollout &lt;rolloutPercentage&gt;]</span><br><span class="line">[--targetBinaryVersion &lt;targetBinaryVersion]</span><br></pre></td></tr></table></figure><p>这个<code>promote</code>命令将在部署环境里创建一个新的版本，包含<strong>准确的代码和元数据</strong>（描述，强制和目标版本号）来自源部署环境的最新版本。然而你可以用<code>release</code>命令去”手动”从一个环境移植更新到另一个环境，<code>promote</code>命令有如下优势：</p><ol><li><p>它更快些，因为你不需要重新装配版本资源，那些你想发布或记住源部署环境的版本的描述/应用版本。</p></li><li><p>它更少出错，因为提升的操作确保你在源部署环境（如：<code>Staging</code>）已经测试过的那些确定的东西将在目标部署环境（如：<code>Production</code>）变成有效的。</p></li></ol><p>我们推荐所有的用户利用自动创建的<code>Staging</code>和<code>Production</code>环境的优势，把所有的版本发布到<code>Staging</code>，然后经过适当的测试后从<code>Staging</code>执行<code>promote</code>到<code>Production</code>。</p><h3 id="Description-参数-3"><a href="#Description-参数-3" class="headerlink" title="Description 参数"></a>Description 参数</h3><p>相同的参数在<a href="#description-参数">上面的章节</a>描述过，简单的允许你覆写将使用的提升版本的描述。如果没有指定，新的版本将继承被提升的版本描述。</p><h4 id="Disabled-参数-4"><a href="#Disabled-参数-4" class="headerlink" title="Disabled 参数"></a>Disabled 参数</h4><p>相同的参数在参数<a href="#disabled-参数">上面的章节</a>描述过，简单的允许你去覆写将使用的提升版本的失效标记的值。如果没有指定，新版本将继承被提升版本的失效(disabled)属性。</p><h3 id="Mandatory-参数-3"><a href="#Mandatory-参数-3" class="headerlink" title="Mandatory 参数"></a>Mandatory 参数</h3><p>相同的参数在参数<a href="#mandatory-参数">上面的章节</a>描述过，简单的允许你覆写将使用的提升版本的强制标记。如果没有指定，新版本将继承被提升版本的强制属性的值。</p><h3 id="Rollout-参数-4"><a href="#Rollout-参数-4" class="headerlink" title="Rollout 参数"></a>Rollout 参数</h3><p>相同的参数在参数<a href="#rollout-参数">上面的章节</a>描述过， 允许你指定新创建的版本是否只对部分用户有效。不像其它的元数据参数（如：<code>description</code>），版本的<code>rollout</code>属性不会做为提升的一部分而携带过来，所以，如果你不想新的版本对所有用户有效的话，你需要明确去设置它。</p><h3 id="Target-binary-version-参数-3"><a href="#Target-binary-version-参数-3" class="headerlink" title="Target binary version 参数"></a>Target binary version 参数</h3><p>相同的参数在<a href="#target-binary-version-参数">上面的章节</a>描述过，简单的允许你覆写使用的提升版本的版本号(target binary version)。如果没有指定，新的版本将继承被提升版本的版本号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Promote the release to production and make it</span><br><span class="line"><span class="meta">#</span> available to all versions using that deployment</span><br><span class="line">code-push promote MyApp Staging Production -t "*"</span><br></pre></td></tr></table></figure><h2 id="回滚更新"><a href="#回滚更新" class="headerlink" title="回滚更新"></a>回滚更新</h2><p>一个部署环境的发布历史是不可以改变的，所以一旦被发布你不能删除或移除更新。然而，如果你发布了一个坏的更新或包含计划外的功能，使用<code>rollback</code>命令很容易把它回滚：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code-push rollback &lt;appName&gt; &lt;deploymentName&gt;</span><br><span class="line">code-push rollback MyApp Production</span><br></pre></td></tr></table></figure><p>这个的影响是在部署环境里创建一个包含<strong>精确的代码和资源</strong>的新版本，比最新版本更优先的一个版本。举个例子，想象你发布了如下更新：</p><table><thead><tr><th>版本</th><th>描述</th><th>强制</th></tr></thead><tbody><tr><td>v1</td><td>初始化版本!</td><td>Yes</td></tr><tr><td>v2</td><td>添加新功能</td><td>No</td></tr><tr><td>v3</td><td>修复Bugs</td><td>Yes</td></tr></tbody></table><p>如果你在部署环境里运行<code>rollback</code>命令，一个包含<code>v2</code>版本内容的新的版本(<code>v4</code>)将会被创建。</p><table><thead><tr><th>版本</th><th>描述</th><th>强制</th></tr></thead><tbody><tr><td>v1</td><td>初始化版本!</td><td>Yes</td></tr><tr><td>v2</td><td>添加新功能</td><td>No</td></tr><tr><td>v3</td><td>修复Bugs</td><td>Yes</td></tr><tr><td>v4 (从v3回滚到v2)</td><td>添加新功能</td><td>No</td></tr></tbody></table><p>当app执行版本检查时，已经获得<code>v3</code>版本的用户现在被”回滚”到<code>v2</code>版本。此外，任何仍运行在<code>v2</code>版本的用户，因而将不会捕获到<code>v3</code>版本，因为他/她们已经在运行最新的版本（这就是为什么我们使用附加在版本标签里的包的hash来做版本检查）。</p><p>如果你想回滚部署环境到一个版本而不是前一个版本（如：<code>v3</code> -&gt; <code>v2</code>），你可以指定一个可选的<code>--targetRelease</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push rollback MyApp Production --targetRelease v34</span><br></pre></td></tr></table></figure><p><em>注意：由回滚产生的版本将会在<code>deployment history</code>命令的输出里被注释，以便助于更容易被辨识出来。</em></p><h2 id="查看发布历史"><a href="#查看发布历史" class="headerlink" title="查看发布历史"></a>查看发布历史</h2><p>你可以使用如下命令查看某个应用的部署环境里最多50条最新的发布历史：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push deployment history &lt;appName&gt; &lt;deploymentName&gt;</span><br></pre></td></tr></table></figure><p>这个历史纪录将显示每个版本的所有的属性（如：标签，强制性），也会标明任何版本是否由提升(promotion)或是回滚操作而来。</p><p><img src="https://cloud.githubusercontent.com/assets/696206/11605068/14e440d0-9aab-11e5-8837-69ab09bfb66c.PNG" alt="Deployment History"></p><p>此外，历史记录显示每个版本的安装指标。你可以在文档的上面<code>deployment ls</code>命令处查看指标数据的解释明细。</p><p>默认情况下，历史纪录不会显示各个版本的作者，但是如果你是和其它开发者合作的，而且想看每个更新是谁发布的，那你可以给历史命令传额外的<code>--displayAuthor</code>(或<code>-a</code>)标记。</p><p><em>注意：历史命令可以使用”h”别名来运行</em></p><h2 id="清除发布历史"><a href="#清除发布历史" class="headerlink" title="清除发布历史"></a>清除发布历史</h2><p>你可以用如下命令清除相关的发布历史：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push deployment clear &lt;appName&gt; &lt;deploymentName&gt;</span><br></pre></td></tr></table></figure><p>运行此命令后，那些已经配置了使用关联的部署密钥的客户端设备将不再接收被清除掉的更新。这个命令是不可逆的,因此不应该使用在生产部署。</p>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nvm使用 nvm 管理不同版本的 node 与 npm</title>
      <link href="/2018/08/13/nvm%E7%AE%A1%E7%90%86node/"/>
      <url>/2018/08/13/nvm%E7%AE%A1%E7%90%86node/</url>
      <content type="html"><![CDATA[<h5 id="卸载老版本的-node-和-nvm"><a href="#卸载老版本的-node-和-nvm" class="headerlink" title="卸载老版本的 node 和 nvm"></a>卸载老版本的 node 和 nvm</h5><ol><li>如果是从 brew 安装的, 运行 <code>brew uninstall node</code></li><li>删除~/目录下所有 node 和 node_modules</li><li>删除 /usr/local/lib 中的所有 node 和 node_modules</li><li>删除 /usr/local/lib 中的所有 node 和 node_modules 的文件夹</li><li>在 /usr/local/bin 中, 删除所有 node 的可执行文件(node 和 npm)</li></ol><a id="more"></a><h5 id="手动删除文件，整理成脚本是这个样子"><a href="#手动删除文件，整理成脚本是这个样子" class="headerlink" title="手动删除文件，整理成脚本是这个样子"></a>手动删除文件，整理成脚本是这个样子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf ~/.npm</span><br><span class="line">sudo rm -rf ~/node_modules</span><br><span class="line">sudo rm -rf ~/.node-gyp</span><br><span class="line">sudo rm /usr/local/bin/node</span><br><span class="line">sudo rm /usr/local/bin/npm</span><br><span class="line">sudo rm /usr/local/lib/dtrace/node.d</span><br></pre></td></tr></table></figure><h5 id="卸载-NVM"><a href="#卸载-NVM" class="headerlink" title="卸载 NVM"></a>卸载 NVM</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.nvm</span><br><span class="line">rm -rf ~/.npm</span><br><span class="line">rm -rf ~/.bower</span><br></pre></td></tr></table></figure><p>还需要删除下.bash_profile文件中的配置(用brew安装后还需要重新加上，但不太一样)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vim .bash_profile</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure><h3 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh|bash</span><br></pre></td></tr></table></figure><p>在.bash_profile文件最后边添加，没有这个文件 就创建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;</span><br></pre></td></tr></table></figure><p>重新启动一下配置<br>输入nvm可以看到如下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Node Version Manager</span><br><span class="line"></span><br><span class="line">Note: &lt;version&gt; refers to any version-like string nvm understands. This includes:</span><br><span class="line">  - full or partial version numbers, starting with an optional &quot;v&quot; (0.10, v0.1.2, v1)</span><br><span class="line">  - default (built-in) aliases: node, stable, unstable, iojs, system</span><br><span class="line">  - custom aliases you define with `nvm alias foo`</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  nvm help                                  Show this message</span><br><span class="line">  nvm --version                             Print out the latest released version of nvm</span><br><span class="line">  nvm install [-s] &lt;version&gt;                Download and install a &lt;version&gt;, [-s] from source. Uses .nvmrc if available</span><br><span class="line">    --reinstall-packages-from=&lt;version&gt;     When installing, reinstall packages installed in &lt;node|iojs|node version number&gt;</span><br><span class="line">  nvm uninstall &lt;version&gt;                   Uninstall a version</span><br><span class="line">  nvm use [--silent] &lt;version&gt;              Modify PATH to use &lt;version&gt;. Uses .nvmrc if available</span><br><span class="line">  nvm exec [--silent] &lt;version&gt; [&lt;command&gt;] Run &lt;command&gt; on &lt;version&gt;. Uses .nvmrc if available</span><br><span class="line">  nvm run [--silent] &lt;version&gt; [&lt;args&gt;]     Run `node` on &lt;version&gt; with &lt;args&gt; as arguments. Uses .nvmrc if available</span><br><span class="line">  nvm current                               Display currently activated version</span><br><span class="line">  nvm ls                                    List installed versions</span><br><span class="line">  nvm ls &lt;version&gt;                          List versions matching a given description</span><br><span class="line">  nvm ls-remote                             List remote versions available for install</span><br><span class="line">  nvm version &lt;version&gt;                     Resolve the given description to a single local version</span><br><span class="line">  nvm version-remote &lt;version&gt;              Resolve the given description to a single remote version</span><br><span class="line">  nvm deactivate                            Undo effects of `nvm` on current shell</span><br><span class="line">  nvm alias [&lt;pattern&gt;]                     Show all aliases beginning with &lt;pattern&gt;</span><br><span class="line">  nvm alias &lt;name&gt; &lt;version&gt;                Set an alias named &lt;name&gt; pointing to &lt;version&gt;</span><br><span class="line">  nvm unalias &lt;name&gt;                        Deletes the alias named &lt;name&gt;</span><br><span class="line">  nvm reinstall-packages &lt;version&gt;          Reinstall global `npm` packages contained in &lt;version&gt; to current version</span><br><span class="line">  nvm unload                                Unload `nvm` from shell</span><br><span class="line">  nvm which [&lt;version&gt;]                     Display path to installed node version. Uses .nvmrc if available</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">  nvm install v0.10.32                  Install a specific version number</span><br><span class="line">  nvm use 0.10                          Use the latest available 0.10.x release</span><br><span class="line">  nvm run 0.10.32 app.js                Run app.js using node v0.10.32</span><br><span class="line">  nvm exec 0.10.32 node app.js          Run `node app.js` with the PATH pointing to node v0.10.32</span><br><span class="line">  nvm alias default 0.10.32             Set default node version on a shell</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)</span><br></pre></td></tr></table></figure><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>查看Node所有版本，用<code>nvm ls-remote</code>命令，如下：(注意ls-remote 连在一起)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v0.1.14</span><br><span class="line">v0.1.15</span><br><span class="line">v0.1.16</span><br><span class="line">...</span><br><span class="line"> v7.7.1</span><br><span class="line"> v7.7.2</span><br><span class="line"> v7.7.3</span><br></pre></td></tr></table></figure><p>正常安装的话 nvm install v6.10.0会很慢，推荐使用国内镜像：(在.bash_profile文件中添加下边镜像源)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</span><br></pre></td></tr></table></figure><p>需要哪个版本，就在最后将6换成对应的版本号就行，默认下载版本中最新的版本号。</p><p>安装node</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install node (安装是最新的版本)</span><br></pre></td></tr></table></figure><h3 id="使用nvm轻松切换node版本"><a href="#使用nvm轻松切换node版本" class="headerlink" title="使用nvm轻松切换node版本"></a>使用nvm轻松切换node版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use v4.1.0  //nvm use node 默认使用最新的</span><br></pre></td></tr></table></figure><p>有时候使用nvm use node  不能正常使用，用下面命令处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use --delete-prefix  v6.14.3  --silent</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/haiyangJ/record/issues/2" target="_blank" rel="noopener">参考地址</a></p><h3 id="安装完后-出现-nvm-command-not-found"><a href="#安装完后-出现-nvm-command-not-found" class="headerlink" title="安装完后 出现 nvm: command not found"></a>安装完后 出现 nvm: command not found</h3><p>执行以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.nvm/nvm.sh</span><br></pre></td></tr></table></figure><h3 id="安装完成后-运行RN项目的时候出现-react-native-command-not-found-错误，执行以下代码"><a href="#安装完成后-运行RN项目的时候出现-react-native-command-not-found-错误，执行以下代码" class="headerlink" title="安装完成后 运行RN项目的时候出现 react-native: command not found 错误，执行以下代码"></a>安装完成后 运行RN项目的时候出现 react-native: command not found 错误，执行以下代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br><span class="line">//卸载</span><br><span class="line">npm uninstall -g react-native-cli</span><br></pre></td></tr></table></figure><h3 id="RN项目跑起来-出现No-bundle-URL-present-需要开启npm"><a href="#RN项目跑起来-出现No-bundle-URL-present-需要开启npm" class="headerlink" title="RN项目跑起来,出现No bundle URL present 需要开启npm"></a>RN项目跑起来,出现No bundle URL present 需要开启npm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">react-native link</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><h3 id="nvm默认启动一种环境"><a href="#nvm默认启动一种环境" class="headerlink" title="nvm默认启动一种环境"></a>nvm默认启动一种环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm alias default 6.9.4</span><br></pre></td></tr></table></figure><h3 id="创建react应用"><a href="#创建react应用" class="headerlink" title="创建react应用"></a>创建react应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h3 id="nvm卸载指定node-js版本号"><a href="#nvm卸载指定node-js版本号" class="headerlink" title="nvm卸载指定node.js版本号"></a>nvm卸载指定node.js版本号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm卸载指定node.js版本号</span><br></pre></td></tr></table></figure><p>报这个错,说明权限不够，需要在命令前添加sudo<br>__<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file is not writable: $NVM_DIR/versions/node/v6.9.2/bin/gulp</span><br><span class="line">Cannot uninstall, incorrect permissions on installation folder.</span><br><span class="line">This is usually caused by running `npm install -g` as root. Run the following commands as root to fix the permissions and then try again.</span><br><span class="line"></span><br><span class="line"> chown -R xgllseo &quot;$NVM_DIR/versions/node/v6.9.2&quot;</span><br><span class="line"> chmod -R u+w &quot;$NVM_DIR/versions/node/v6.9.2&quot;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Promise的简易实现（一）</title>
      <link href="/2018/08/02/Promise/"/>
      <url>/2018/08/02/Promise/</url>
      <content type="html"><![CDATA[<ul><li><h4 id="Promise的日常使用"><a href="#Promise的日常使用" class="headerlink" title="Promise的日常使用"></a>Promise的日常使用</h4><p>举个栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//异步请求</span></span><br><span class="line">      http.get(url,<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        resolve(msg);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getMsg()</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><h4 id="做出Promise大致框架"><a href="#做出Promise大致框架" class="headerlink" title="做出Promise大致框架"></a>做出Promise大致框架</h4></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="literal">null</span>,</span><br><span class="line">        callbacks = [];<span class="comment">//callbacks为数组，因为可能同时有很多个回调  </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//执行then函数的时候，添加所有的callback方法</span></span><br><span class="line">        callbacks.push(onFulfilled);</span><br><span class="line">        <span class="comment">//return this支持链式调用 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//外部执行resolve函数时，将所有的callback方法依次执行</span></span><br><span class="line">        callbacks.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            callback(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="代码的大致逻辑："><a href="#代码的大致逻辑：" class="headerlink" title="代码的大致逻辑："></a>代码的大致逻辑：</h4></li></ul><ol><li>调用<code>then</code>方法，将想要在<code>Promise</code>异步操作成功时执行的回调放入<code>callbacks</code>队列，其实也就是注册回调函数，可以向观察者模式方向思考；</li><li>创建<code>Promise</code>实例时传入的函数会被赋予一个函数类型的参数，即<code>resolve</code>，它接收一个参数value，代表异步操作返回的结果，当一步操作执行成功后，用户会调用<code>resolve</code>方法，这时候其实真正执行的操作是将<code>callbacks</code>队列中的回调一一执行；</li></ol><ul><li><h4 id="实现Promise延迟机制"><a href="#实现Promise延迟机制" class="headerlink" title="实现Promise延迟机制"></a>实现Promise延迟机制</h4><p>细心的小明发现了一个问题，如果在<code>then</code>方法注册回调之前，<code>resolve</code>函数就执行了，怎么办？比如<code>promise</code>内部的函数是同步函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//异步请求</span></span><br><span class="line">        resolve(<span class="number">123</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Promises/A+</code>规范明确要求回调需要通过异步方式执行，用以保证一致可靠的执行顺序。因此我们要加入一些处理，保证在<code>resolve</code>执行之前，<code>then</code>方法已经注册完所有的回调。这个时候就需要我们实现<code>resolve</code>方法的延时机制，使用<code>setTimeout</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        callbacks.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            callback(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setTimeout</code>会将<code>callback</code>的异步执行队列放在下一个<code>macrotask</code>里面，等执行了<code>macrotask</code>中的所有<code>microtask</code>后再执行下一个<code>macrotask</code>。具体可查询<code>Javascript</code>的<code>event loop</code>相关知识。</p></li><li><h4 id="完整Promise实现"><a href="#完整Promise实现" class="headerlink" title="完整Promise实现"></a>完整Promise实现</h4><h5 id="1-Promise状态的引入"><a href="#1-Promise状态的引入" class="headerlink" title="1.Promise状态的引入"></a>1.Promise状态的引入</h5><p>在上述代码中，我们大致实现了<code>Promise</code>的基本功能，但小明通过敏锐的洞察力可观察到，即使在执行<code>resolve</code>会依次执行<code>callback</code>的所有注册方法，这样额外开销会非常大，这显然并不是我们想要的<code>Promise</code>，所以我们需要给<code>Promise</code>增加状态，当状态切换时，执行相应的回调方法。三种状态分别为<code>pending</code>、<code>fulfilled</code>、<code>rejected</code>，对应相应的回调方法。</p><h5 id="2-Promise状态的相互转换"><a href="#2-Promise状态的相互转换" class="headerlink" title="2.Promise状态的相互转换"></a>2.Promise状态的相互转换</h5><p><code>Promises/A+</code>规范<code>Promise States</code>中明确规定了，<code>pending</code>可以转化为<code>fulfilled</code>或<code>rejected</code>并且只能转化一次，也就是说如果<code>pending</code>转化到<code>fulfilled</code>状态，那么就不能再转化到<code>rejected</code>。也就是说在<code>Promise</code>的状态切换是不可逆的。并且<code>fulfilled</code>和<code>rejected</code>状态只能由<code>pending</code>转化而来，两者之间不能互相转换。可以看下图之前的切换：</p><p><img src="/2018/08/02/Promise/Users/30san/Downloads/promiseState.png" alt="promiseState"></p><p>代码的思路是这样的：<code>resolve</code>执行时，会将状态设置为<code>fulfilled</code>，在此之后调用<code>then</code>添加的新回调，都会立即执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> state = <span class="string">'pending'</span>,</span><br><span class="line">        value = <span class="literal">null</span>,</span><br><span class="line">        callbacks = []; <span class="comment">//callbacks为数组，因为可能同时有很多个回调</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">            callbacks.push(onFulfilled);</span><br><span class="line">            <span class="comment">//return this支持链式调用</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//假如state已经切换至其他状态，直接执行回调</span></span><br><span class="line">        onFulfilled(value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        state = <span class="string">'fulfilled'</span>;</span><br><span class="line">        value = newValue;</span><br><span class="line"></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            callbacks.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">                callback(newValue);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h5 id="3-链式Promise"><a href="#3-链式Promise" class="headerlink" title="3.链式Promise"></a>3.链式Promise</h5><p>但聪明的小明又发现了一个问题，当在<code>then</code>里面执行一个回调时，假如在这里面返回一个<code>Promise</code>，类似于这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getMsg()</span><br><span class="line">    .then(getDetailMsg)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">detailMsg</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 对detailMsg的处理</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDetailMsg</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        http.get(url + msg, <span class="function"><span class="keyword">function</span>(<span class="params">detailMsg</span>) </span>&#123;</span><br><span class="line">            resolve(detailMsg);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是传说中的链式<code>Promise</code>循环，在第二个<code>then</code>中，我们希望它能挂钩到第一个<code>Promise</code>所<code>resolve</code>的参数。要达到我们想要的效果，需要修改<code>then</code>的源码，使其返回一个新的<code>Promise</code>.作为Promise实现最大的难题，这个我们后面继续实现。</p><p>​</p></li></ul><p>​      </p>]]></content>
      
      
        <tags>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>reactjs错误处理</title>
      <link href="/2018/08/02/reactjs%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/2018/08/02/reactjs%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="无法使用-执行任何命令都出现一下错误"><a href="#无法使用-执行任何命令都出现一下错误" class="headerlink" title="无法使用,执行任何命令都出现一下错误"></a>无法使用,执行任何命令都出现一下错误</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Error: spawn node_modules/webpack/bin/webpack.js ENOENT</span><br><span class="line">    at exports._errnoException (util.js:1022:11)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (internal/child_process.js:189:19)</span><br><span class="line">    at onErrorNT (internal/child_process.js:366:16)</span><br><span class="line">    at _combinedTickCallback (internal/process/next_tick.js:102:11)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:161:9)</span><br><span class="line">    at Function.Module.runMain (module.js:607:11)</span><br><span class="line">    at startup (bootstrap_node.js:158:16)</span><br><span class="line">    at bootstrap_node.js:575:3</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! @ development: `cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Failed at the @ development script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /home/x/.npm/_logs/2017-07-19T09_10_58_764Z-debug.log</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! @ dev: `npm run development`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Failed at the @ dev script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /home/x/.npm/_logs/2017-07-19T09_10_58_772Z-debug.log</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1 verbose cli [ &apos;/usr/local/bin/node&apos;,</span><br><span class="line">1 verbose cli   &apos;/usr/local/bin/npm&apos;,</span><br><span class="line">1 verbose cli   &apos;run&apos;,</span><br><span class="line">1 verbose cli   &apos;development&apos; ]</span><br><span class="line">2 info using npm@5.3.0</span><br><span class="line">3 info using node@v8.1.4</span><br><span class="line">4 verbose run-script [ &apos;predevelopment&apos;, &apos;development&apos;, &apos;postdevelopment&apos; ]</span><br><span class="line">5 info lifecycle @~predevelopment: @</span><br><span class="line">6 info lifecycle @~development: @</span><br><span class="line">7 verbose lifecycle @~development: unsafe-perm in lifecycle true</span><br><span class="line">8 verbose lifecycle @~development: PATH: /usr/local/lib/node_modules/npm/bin/node-gyp-bin:/Users/samsmekens/Dropbox/Teammap van S3S/VisualS3/projecten/2016/S3S/dev/Website_2016/new source/node_modules/.bin:/usr/local/lib/node_modules/npm/bin/node-gyp-bin:/Users/samsmekens/Dropbox/Teammap van S3S/VisualS3/projecten/2016/S3S/dev/Website_2016/new source/node_modules/.bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin</span><br><span class="line">9 verbose lifecycle @~development: CWD: /Users/samsmekens/Dropbox/Teammap van S3S/VisualS3/projecten/2016/S3S/dev/Website_2016/new source</span><br><span class="line">10 silly lifecycle @~development: Args: [ &apos;-c&apos;,</span><br><span class="line">10 silly lifecycle   &apos;cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&apos; ]</span><br><span class="line">11 silly lifecycle @~development: Returned: code: 2  signal: null</span><br><span class="line">12 info lifecycle @~development: Failed to exec development script</span><br><span class="line">13 verbose stack Error: @ development: `cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js`</span><br><span class="line">13 verbose stack Exit status 2</span><br><span class="line">13 verbose stack     at EventEmitter.&lt;anonymous&gt; (/usr/local/lib/node_modules/npm/lib/utils/lifecycle.js:289:16)</span><br><span class="line">13 verbose stack     at emitTwo (events.js:125:13)</span><br><span class="line">13 verbose stack     at EventEmitter.emit (events.js:213:7)</span><br><span class="line">13 verbose stack     at ChildProcess.&lt;anonymous&gt; (/usr/local/lib/node_modules/npm/lib/utils/spawn.js:40:14)</span><br><span class="line">13 verbose stack     at emitTwo (events.js:125:13)</span><br><span class="line">13 verbose stack     at ChildProcess.emit (events.js:213:7)</span><br><span class="line">13 verbose stack     at maybeClose (internal/child_process.js:897:16)</span><br><span class="line">13 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:208:5)</span><br><span class="line">14 verbose pkgid @</span><br><span class="line">15 verbose cwd /Users/samsmekens/Dropbox/Teammap van S3S/VisualS3/projecten/2016/S3S/dev/Website_2016/new source</span><br><span class="line">16 verbose Darwin 16.0.0</span><br><span class="line">17 verbose argv &quot;/usr/local/bin/node&quot; &quot;/usr/local/bin/npm&quot; &quot;run&quot; &quot;development&quot;</span><br><span class="line">18 verbose node v8.1.4</span><br><span class="line">19 verbose npm  v5.3.0</span><br><span class="line">20 error code ELIFECYCLE</span><br><span class="line">21 error errno 2</span><br><span class="line">22 error @ development: `cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js`</span><br><span class="line">22 error Exit status 2</span><br><span class="line">23 error Failed at the @ development script.</span><br><span class="line">23 error This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line">24 verbose exit [ 2, true ]</span><br></pre></td></tr></table></figure><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>先把node 降到一个可以执行npm的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n 6.9.1</span><br></pre></td></tr></table></figure><p>再升级npm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm@next</span><br></pre></td></tr></table></figure><p>node 安装一个稳定版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n stable   </span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line">n latest 最新版本  </span><br><span class="line">n 6.9.1 具体到讴歌版本</span><br><span class="line">n rm 4.4.7 删除某个版本</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>如果还是报错 依次执行以下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf node_modules</span><br><span class="line">rm package-lock.json</span><br><span class="line">npm cache clear --force</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="查看node的路径"><a href="#查看node的路径" class="headerlink" title="查看node的路径"></a>查看node的路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which node</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo + yilia +gitalk 搭建github.io博客</title>
      <link href="/2018/08/02/hexo_yilia_gitalk%E6%90%AD%E5%BB%BAgithub_page%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/08/02/hexo_yilia_gitalk%E6%90%AD%E5%BB%BAgithub_page%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>都是基于Mac os 相关的配置</p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章</p><h3 id="github-page"><a href="#github-page" class="headerlink" title="github page"></a>github page</h3><p>github Pages就是用户编写的、托管在github上的静态网页。</p><ul><li>说白了，你想整个自己不需要花钱，又懒得自己打理的个人blog，那github Page就是个不错的选择</li></ul><a id="more"></a><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><h4 id="安装-Hexo之前你得先安装"><a href="#安装-Hexo之前你得先安装" class="headerlink" title="安装 Hexo之前你得先安装"></a>安装 Hexo之前你得先安装</h4><ul><li><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3></li><li><p>通过homebrew安装<br>通过 <code>brew -v</code> 查看，如果有相关的版本号，说明安装成功，如果没有就需要安装homebrew</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><ul><li>安装homebrew成功后，就可以用brew命令来安装node</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew link node</span><br><span class="line">brew uninstall node</span><br><span class="line">brew install node</span><br></pre></td></tr></table></figure><ul><li>删除已安装的node</li></ul><p>–<br>如果之前已经手动安装过node，再次通过homebrew安装往往产生冲突，可以先删除</p><ol><li>如果是通过homebrew安装的，下发命令brew uninstall node即可</li><li>如果是通过安装包安装的，手动删除node的安装文件即可</li></ol><p>–</p><ul><li><p>配置多版本的node，安装nvm<br><a href="https://ibambooooo.github.io/2018/07/20/nvm%E7%AE%A1%E7%90%86node/" target="_blank" rel="noopener">nvm 管理不同版本的node</a></p></li><li><h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3><p>npm由于源服务器在国外，下载node包速度较慢，cnpm使用国内镜像，下载速度较快</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">Search Packages淘宝 NPM 镜像</a></p><ul><li><h3 id="安装git-（mac-系统一般已经安装好了git）"><a href="#安装git-（mac-系统一般已经安装好了git）" class="headerlink" title="安装git （mac 系统一般已经安装好了git）"></a>安装git （mac 系统一般已经安装好了git）</h3><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">安装 Git</a></li></ul><h2 id="安装-hexo-1"><a href="#安装-hexo-1" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p>进入主题安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ul><li><p>在编译时可能会遇到问题，得先安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p></li><li><h3 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>之后cd到根目下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>通过<code>localhost:4000</code>访问，就可以看到blog已经初步搭建完成</p><ul><li><h3 id="将blog和github关联"><a href="#将blog和github关联" class="headerlink" title="将blog和github关联"></a>将blog和github关联</h3><ul><li>首先得有github账号对吧，然后创建一个仓库<br><img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/001.png" alt=""></li></ul></li><li><h3 id="配置SSH-keys"><a href="#配置SSH-keys" class="headerlink" title="配置SSH keys"></a>配置SSH keys</h3></li><li><h4 id="先检查自己电脑有没有ssh-key"><a href="#先检查自己电脑有没有ssh-key" class="headerlink" title="先检查自己电脑有没有ssh key"></a>先检查自己电脑有没有ssh key</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/. ssh</span><br></pre></td></tr></table></figure></li></ul><p>   如果显示 <code>No such file or directory</code>，说明这是你第一次使用 git</p><ul><li><h4 id="生成新的-SSH-Key"><a href="#生成新的-SSH-Key" class="headerlink" title="生成新的 SSH Key"></a>生成新的 SSH Key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;注册github的邮箱地址@youremail.com&quot;</span><br></pre></td></tr></table></figure></li></ul><p>然后系统会要你输入密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):&lt;设置密码&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入密码&gt;</span><br></pre></td></tr></table></figure><p> 找到生成的key，一般在文稿里，会有两个文件 id_rsa, id_rsa.pub,打开d_rsa.pub文件就呢刚看到key了,key复制的时候，前后全部复制</p><ul><li><h4 id="添加SSH-Key到GitHub"><a href="#添加SSH-Key到GitHub" class="headerlink" title="添加SSH Key到GitHub"></a>添加SSH Key到GitHub</h4><p> <img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/002.png" alt=""></p></li><li><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li><li><p>就是这个命令，不需要做任何修改<br> 然后就是回车，选择Y，回车输入刚才设置的密码</p></li></ul><ul><li><h3 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h3>  修改hexo 根目录</li><li>见后边附件</li><li><p>配置文件所有冒号后边记得得有一个空格<br><a href="https://www.zhihu.com/question/24422335/answer/46357100" target="_blank" rel="noopener">hexo 主题 知乎</a></p></li><li><p>找到喜欢的主题，下载选来拖进hexo根目录themes<br><img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/003.png" alt=""></p></li></ul><p>然后在hexo根目录的配置文件修改主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: yilia</span><br></pre></td></tr></table></figure></p><p>启动本地服务看一下效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo  server</span><br></pre></td></tr></table></figure></p><h3 id="yilia主题的自定义"><a href="#yilia主题的自定义" class="headerlink" title="yilia主题的自定义"></a>yilia主题的自定义</h3><ul><li>个性签名 就是头像下面那就话</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subtitle: 划船不用桨 一生全靠浪</span><br></pre></td></tr></table></figure><p>如果需要修改一些自定义就到文件 yilia-&gt;layout<br>例如需改页尾就去footer.ejs文件</p><h3 id="gitalk评论"><a href="#gitalk评论" class="headerlink" title="gitalk评论"></a>gitalk评论</h3><p>yilia 支持的评论比较多，但是基本都被封了，Disqus会被墙，畅言要备案，所以选了gitalk,还有gitment，gitalk的UI好看一点</p><ul><li><h4 id="新建一个文件-gitalk-ejs"><a href="#新建一个文件-gitalk-ejs" class="headerlink" title="新建一个文件 gitalk.ejs"></a>新建一个文件 gitalk.ejs</h4>在yilia-&gt;layout-&gt;post下创建gitalk.ejs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;gitalk-container&quot; style=&quot;padding: 0px 30px 0px 30px;&quot;&gt;&lt;/div&gt; </span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">if(&lt;%=theme.gitalk.enable%&gt;)&#123;</span><br><span class="line">var gitalk = new Gitalk(&#123;</span><br><span class="line">  clientID: &apos;&lt;%=theme.gitalk.ClientID%&gt;&apos;,</span><br><span class="line">  clientSecret: &apos;&lt;%=theme.gitalk.ClientSecret%&gt;&apos;,</span><br><span class="line">  repo: &apos;&lt;%=theme.gitalk.repo%&gt;&apos;,</span><br><span class="line">  owner: &apos;&lt;%=theme.gitalk.githubID%&gt;&apos;,</span><br><span class="line">  admin: [&apos;&lt;%=theme.gitalk.adminUser%&gt;&apos;],</span><br><span class="line">   id: &apos;&lt;%=page.date%&gt;&apos;, //页面的唯一标识。长度必须小于50</span><br><span class="line">    //id: window.location.pathname,</span><br><span class="line">     //类似Facebook评论框的全屏遮罩效果.</span><br><span class="line">  distractionFreeMode: false</span><br><span class="line">&#125;)</span><br><span class="line">gitalk.render(&apos;gitalk-container&apos;) </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><h4 id="在yilia的配置文件-config-yml-的gitment后边添加"><a href="#在yilia的配置文件-config-yml-的gitment后边添加" class="headerlink" title="在yilia的配置文件_config.yml 的gitment后边添加"></a>在yilia的配置文件_config.yml 的gitment后边添加</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#6、gitalk评论</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  githubID: &apos;ibambooooo&apos;  </span><br><span class="line">  repo: &apos;ibambooooo.github.io&apos;</span><br><span class="line">  ClientID: &apos;自己的ClientID&apos;</span><br><span class="line">  ClientSecret: &apos;自己的ClientSecret&apos;</span><br><span class="line">  adminUser: &apos;ibambooooo&apos;</span><br><span class="line">  #类似Facebook评论框的全屏遮罩效果.</span><br><span class="line">  distractionFreeMode: true</span><br></pre></td></tr></table></figure><ul><li>创建 OAuth Apps<br><img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/004.png" alt=""><br><img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/005.png" alt=""></li></ul><ul><li><h4 id="在article-ejs里引用评论"><a href="#在article-ejs里引用评论" class="headerlink" title="在article.ejs里引用评论"></a>在article.ejs里引用评论</h4><p>找到yilia-&gt;layout-&gt;article.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;% if(theme.gitalk.enable)&#123; %&gt;</span><br><span class="line">   &lt;%- partial(&apos;post/gitalk&apos;, &#123;</span><br><span class="line">       key: post.slug,</span><br><span class="line">       title: post.title,</span><br><span class="line">       url: config.url+url_for(post.path)</span><br><span class="line">     &#125;) %&gt;</span><br><span class="line">   &lt;% &#125; %&gt;</span><br><span class="line"> &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li><p>把原来下面代码块的代码删了，换成上边的代码块（因为我出过bug）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123;  </span><br><span class="line">....</span><br><span class="line"> &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="hexo-常用命令"><a href="#hexo-常用命令" class="headerlink" title="hexo 常用命令"></a>hexo 常用命令</h3><ul><li><h4 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><ul><li><h4 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;博客名称&quot;  =&gt; hexo new &quot;博客名称&quot;   #这两个都是创建新文章，前者是简写模式</span><br><span class="line">hexo p  =&gt; hexo publish</span><br><span class="line">hexo g  =&gt; hexo generate  #生成静态页面至public目录</span><br><span class="line">hexo s  =&gt; hexo server  #启动本地服务预览</span><br><span class="line">hexo d  =&gt; hexo deploy  #将.deploy目录部署到GitHub</span><br><span class="line"></span><br><span class="line">hexo server  =&gt; heox s #Hexo 会监视文件变动并自动更新，无须重启服务器。</span><br><span class="line"></span><br><span class="line">//切换端口</span><br><span class="line">hexo sever -port 4001</span><br><span class="line"></span><br><span class="line">//自定义IP</span><br><span class="line">hexo server -i 192.168.1.1   </span><br><span class="line"></span><br><span class="line">#清除缓存，网页正常情况下可以忽略此条命令</span><br><span class="line">hexo clean   </span><br><span class="line"></span><br><span class="line">hexo g   #生成静态页面至public目录</span><br><span class="line">hexo d   #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure><ul><li>常用复合命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br><span class="line">hexo server -g</span><br></pre></td></tr></table></figure><ul><li><h4 id="删除分类或者啥的"><a href="#删除分类或者啥的" class="headerlink" title="删除分类或者啥的"></a>删除分类或者啥的</h4><ul><li>先删除 <code>db.json</code>文件</li><li>hexo clean</li><li>根目录配置问价 <code>category_dir:categories</code> 赋值为空</li></ul></li></ul><h3 id="hexo添加分类及标签"><a href="#hexo添加分类及标签" class="headerlink" title="hexo添加分类及标签"></a>hexo添加分类及标签</h3><ul><li><h4 id="创建分类选项"><a href="#创建分类选项" class="headerlink" title="创建分类选项"></a>创建分类选项</h4>cd到博客根目录，执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>在hexo的根目录source-&gt;categories-&gt;index.md中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: &#123;&#123;date&#125;&#125;</span><br><span class="line">type: categories</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li><h4 id="创建标签选项"><a href="#创建标签选项" class="headerlink" title="创建标签选项"></a>创建标签选项</h4>cd到博客根目录，执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>在hexo的根目录source-&gt;tags-&gt;index.md中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: &#123;&#123;date&#125;&#125;</span><br><span class="line">type: tags</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="在博文正文配置当前文章的分类、标签、评论"><a href="#在博文正文配置当前文章的分类、标签、评论" class="headerlink" title="在博文正文配置当前文章的分类、标签、评论"></a>在博文正文配置当前文章的分类、标签、评论</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 文章标题</span><br><span class="line">toc: ture  //显示目录</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">tags:</span><br><span class="line">- 算法</span><br><span class="line">comments: true //是否支持评论</span><br></pre></td></tr></table></figure><h3 id="主页显示预览"><a href="#主页显示预览" class="headerlink" title="主页显示预览"></a>主页显示预览</h3><p>在文章显示更多的地方加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!---more---&gt;</span><br></pre></td></tr></table></figure><h3 id="常用的插件"><a href="#常用的插件" class="headerlink" title="常用的插件"></a>常用的插件</h3><ul><li><h3 id="图片管理"><a href="#图片管理" class="headerlink" title="图片管理"></a>图片管理</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>把在hexo根目下的_config.yml设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>当新建的时候，会生成一个跟文章名一样的文件夹的文字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] test-img-demo</span><br></pre></td></tr></table></figure><p>现在可以看到<code>source/_posts</code>里边，除了有<code>test-img-demo.md</code>，还多一个文件夹 <code>test-img-demo</code></p><p>使用图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](test-img/img.jpg)</span><br></pre></td></tr></table></figure><ul><li>如果是手动创建的md文件，只需要在当前创建一个与md文件名一致的文件夹名即可</li></ul><h3 id="配置自己域名"><a href="#配置自己域名" class="headerlink" title="配置自己域名"></a>配置自己域名</h3><ul><li>在hexo的source创建CNAME文件，没有后缀,添加以下内容，没有http，也没有www</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">starforkwatch.xyz</span><br></pre></td></tr></table></figure><ul><li><p>修改github.io项目setting</p><p><img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/006.png" alt=""></p><ul><li>解析域名</li></ul><p><img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/007.png" alt=""><br> <img src="/2018/08/02/hexo_yilia_gitalk搭建github_page博客/008.png" alt=""></p></li></ul><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><ul><li><h4 id="hexo-根目录配置文件-config-yml"><a href="#hexo-根目录配置文件-config-yml" class="headerlink" title="hexo 根目录配置文件_config.yml"></a>hexo 根目录配置文件_config.yml</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">title: ibamboo</span><br><span class="line">subtitle:</span><br><span class="line">description: 划船不用桨，一生全靠浪</span><br><span class="line">keywords:</span><br><span class="line">author: ibamboo</span><br><span class="line">language:</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line"></span><br><span class="line">#安装hexo-asset-image模块 管理博客图片</span><br><span class="line">post_asset_folder: true</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line">  </span><br><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default = &apos;&apos;)</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &apos;&apos;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line">  </span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map: /</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"></span><br><span class="line">#原来自带的主题</span><br><span class="line">#theme: landscape</span><br><span class="line">#修改主题</span><br><span class="line">theme: yilia  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">#这里记得所有的冒号后边都得加空格</span><br><span class="line"></span><br><span class="line"># 和自己的github绑定</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: http://github.com/ibambooooo/ibambooooo.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  </span><br><span class="line">archive: true</span><br></pre></td></tr></table></figure><ul><li><h4 id="yilia-主题的配置文件-config-yml"><a href="#yilia-主题的配置文件-config-yml" class="headerlink" title="yilia 主题的配置文件_config.yml"></a>yilia 主题的配置文件_config.yml</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: /.</span><br><span class="line">  目录: /archives</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#个性签名</span><br><span class="line">subtitle: 划船不用桨 一生全靠浪</span><br><span class="line"></span><br><span class="line"># SubNav</span><br><span class="line">subnav:</span><br><span class="line">  github: &quot;https://github.com/ibambooooo&quot;</span><br><span class="line">  # weibo: &quot;#&quot;</span><br><span class="line">  # rss: &quot;#&quot;</span><br><span class="line">  # zhihu: &quot;#&quot;</span><br><span class="line">  qq: &quot;http://wpa.qq.com/msgrd?v=3&amp;uin=2770123398&amp;site=qq&amp;menu=yes&quot;</span><br><span class="line">  # weixin: &quot;#&quot;</span><br><span class="line">  #jianshu: &quot;#&quot;</span><br><span class="line">  #douban: &quot;#&quot;</span><br><span class="line">  #segmentfault: &quot;#&quot;</span><br><span class="line">  #bilibili: &quot;#&quot;</span><br><span class="line">  #acfun: &quot;#&quot;</span><br><span class="line">  #mail: &quot;mailto:2770123398@qq.com&quot;</span><br><span class="line">  #facebook: &quot;#&quot;</span><br><span class="line">  #google: &quot;#&quot;</span><br><span class="line">  #twitter: &quot;#&quot;</span><br><span class="line">  #linkedin: &quot;#&quot;</span><br><span class="line"></span><br><span class="line"># rss: /atom.xml</span><br><span class="line"></span><br><span class="line"># 是否需要修改 root 路径</span><br><span class="line"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</span><br><span class="line"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span><br><span class="line">root: /</span><br><span class="line"></span><br><span class="line"># Content</span><br><span class="line"></span><br><span class="line"># 文章太长，截断按钮文字</span><br><span class="line">excerpt_link: &apos;More&apos;</span><br><span class="line"># 文章卡片右下角常驻链接，不需要请设置为false</span><br><span class="line">show_all_link: &apos;展开全文&apos;</span><br><span class="line">fancybox: false</span><br><span class="line"># 数学公式</span><br><span class="line">mathjax: false</span><br><span class="line"># 是否在新窗口打开链接</span><br><span class="line">open_in_new: false</span><br><span class="line"></span><br><span class="line"># 打赏</span><br><span class="line"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</span><br><span class="line">reward_type: 0</span><br><span class="line"># 打赏wording</span><br><span class="line">reward_wording: &apos;谢谢你请我吃糖果&apos;</span><br><span class="line"># 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</span><br><span class="line">alipay: </span><br><span class="line"># 微信二维码图片地址</span><br><span class="line">weixin: </span><br><span class="line"></span><br><span class="line"># 目录</span><br><span class="line"># 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录</span><br><span class="line">toc: 0·</span><br><span class="line"># 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为false</span><br><span class="line">toc_hide_index: true</span><br><span class="line"># 目录为空时的提示</span><br><span class="line">toc_empty_wording: &apos;目录，不存在的…&apos;</span><br><span class="line"></span><br><span class="line"># 是否有快速回到顶部的按钮</span><br><span class="line">top: true</span><br><span class="line"></span><br><span class="line"># Miscellaneous</span><br><span class="line">baidu_analytics: &apos;&apos;</span><br><span class="line">google_analytics: false</span><br><span class="line">favicon: /assets/image/竹子2.png</span><br><span class="line"></span><br><span class="line">#你的头像url</span><br><span class="line">avatar: /assets/image/header.jpg</span><br><span class="line"></span><br><span class="line">#是否开启分享</span><br><span class="line">share_jia: false</span><br><span class="line"></span><br><span class="line">#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus；5、Gitment</span><br><span class="line">#不需要使用某项，直接设置值为false，或注释掉</span><br><span class="line">#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/</span><br><span class="line"></span><br><span class="line">#1、多说</span><br><span class="line">duoshuo: false</span><br><span class="line"></span><br><span class="line">#2、网易云跟帖</span><br><span class="line">wangyiyun: false</span><br><span class="line"></span><br><span class="line">#3、畅言</span><br><span class="line">changyan_appid: false</span><br><span class="line">changyan_conf: false</span><br><span class="line"></span><br><span class="line">#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的</span><br><span class="line">#disqus: &quot;ibambooooo&quot;</span><br><span class="line"></span><br><span class="line">#5、Gitment</span><br><span class="line">#查看github id 方法  https://api.github.com/users/ibambooooo（你的用户名）</span><br><span class="line">gitment:</span><br><span class="line">  enable: false</span><br><span class="line">  gitment_owner: #&apos;ibambooooo&apos;  #你的 GitHub ID 16451695</span><br><span class="line">  gitment_repo:  #&apos;ibambooooo.github.io&apos; #存储评论的 repo ibambooooo.github.io</span><br><span class="line">  gitment_oauth:</span><br><span class="line">    client_id: #&apos;&apos;    #client ID</span><br><span class="line">    client_secret: #&apos;&apos;   #client secret</span><br><span class="line"></span><br><span class="line">#6、gitalk评论</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  githubID: &apos;ibambooooo&apos;  </span><br><span class="line">  repo: &apos;ibambooooo.github.io&apos;</span><br><span class="line">  ClientID: &apos;ClientID&apos;</span><br><span class="line">  ClientSecret: &apos;ClientSecret&apos;</span><br><span class="line">  adminUser: &apos;ibambooooo&apos;</span><br><span class="line">  #类似Facebook评论框的全屏遮罩效果.</span><br><span class="line">  distractionFreeMode: true</span><br><span class="line"></span><br><span class="line"># 样式定制 - 一般不需要修改，除非有很强的定制欲望…</span><br><span class="line">style:</span><br><span class="line">  # 头像上面的背景颜色</span><br><span class="line">  header: &apos;#4d4d4d&apos;</span><br><span class="line">  # 右滑板块背景</span><br><span class="line">  slider: &apos;linear-gradient(200deg,#a0cfe4,#e8c37e)&apos;</span><br><span class="line"></span><br><span class="line"># slider的设置</span><br><span class="line">slider:</span><br><span class="line">  # 是否默认展开tags板块</span><br><span class="line">  showTags: ture</span><br><span class="line"></span><br><span class="line"># 智能菜单</span><br><span class="line"># 如不需要，将该对应项置为false</span><br><span class="line"># 比如</span><br><span class="line">#smart_menu:</span><br><span class="line">#  friends: false</span><br><span class="line">smart_menu:</span><br><span class="line">  innerArchive: &apos;所有文章&apos;</span><br><span class="line">  friends: false</span><br><span class="line">  aboutme: false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">friends:</span><br><span class="line">  友情链接1: http://localhost:4000/</span><br><span class="line">  友情链接2: http://localhost:4000/</span><br><span class="line">  友情链接3: http://localhost:4000/</span><br><span class="line">  友情链接4: http://localhost:4000/</span><br><span class="line">  友情链接5: http://localhost:4000/</span><br><span class="line">  友情链接6: http://localhost:4000/</span><br><span class="line"></span><br><span class="line">aboutme: 很惭愧&lt;br&gt;&lt;br&gt;只做了一点微小的工作&lt;br&gt;谢谢大家</span><br></pre></td></tr></table></figure><p>致谢：<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a></p>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中的或运算与三目运算</title>
      <link href="/2018/08/02/js%E4%B8%AD%E7%9A%84%E6%88%96%E8%BF%90%E7%AE%97%E4%B8%8E%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%20/"/>
      <url>/2018/08/02/js%E4%B8%AD%E7%9A%84%E6%88%96%E8%BF%90%E7%AE%97%E4%B8%8E%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%20/</url>
      <content type="html"><![CDATA[<p>先看代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = a || &#123;&#125;;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = a ? a : &#123;&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="或运算的解释"><a href="#或运算的解释" class="headerlink" title="或运算的解释"></a>或运算的解释</h3><p>||运算左边为假，才会执行右边，而||的返回结果为最后被执行的表达式返回值</p><h3 id="或运算的运用"><a href="#或运算的运用" class="headerlink" title="或运算的运用"></a>或运算的运用</h3><h6 id="1-逻辑判断"><a href="#1-逻辑判断" class="headerlink" title="1.逻辑判断"></a>1.逻辑判断</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(a === 0 || a === &quot;&quot;) &#123;&#125;</span><br></pre></td></tr></table></figure><h6 id="2-等效于三目运算的赋值用法"><a href="#2-等效于三目运算的赋值用法" class="headerlink" title="2.等效于三目运算的赋值用法"></a>2.等效于三目运算的赋值用法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = a || b; // var a = a ? a : b;</span><br></pre></td></tr></table></figure><h6 id="3-等效于三目运算"><a href="#3-等效于三目运算" class="headerlink" title="3.等效于三目运算"></a>3.等效于三目运算</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = 10;while(1) &#123;</span><br><span class="line">  </span><br><span class="line">  a -- || break;&#125;</span><br></pre></td></tr></table></figure><h6 id="4-运算合并"><a href="#4-运算合并" class="headerlink" title="4.运算合并"></a>4.运算合并</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update(&apos;key&apos;,value) || add(&apos;key&apos;,value); </span><br><span class="line">// 更新，如果不存在则添加</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RN相关环境配置</title>
      <link href="/2018/08/02/RN%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/02/RN%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="babel-安装以及介绍"><a href="#babel-安装以及介绍" class="headerlink" title="babel 安装以及介绍"></a>babel 安装以及介绍</h3><ul><li><p><a href="https://www.babeljs.cn/" target="_blank" rel="noopener">babel中文官网</a></p></li><li><h3 id="安装-Babel-CLI-和-env-preset"><a href="#安装-Babel-CLI-和-env-preset" class="headerlink" title="安装 Babel CLI 和 env preset"></a>安装 Babel CLI 和 env preset</h3></li></ul><a id="more"></a><h3 id="ESLint-Airbnb-配置"><a href="#ESLint-Airbnb-配置" class="headerlink" title="ESLint Airbnb 配置"></a>ESLint Airbnb 配置</h3><ul><li><h3 id="安装eslint"><a href="#安装eslint" class="headerlink" title="安装eslint"></a>安装eslint</h3></li><li><p>一定要cd到创建的项目的根目录安装</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint</span><br></pre></td></tr></table></figure><ul><li><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint --init</span><br></pre></td></tr></table></figure><p>出现代码风格选项：(依次选择)<br>1.Use a popular style guide<br>2.Airbnb (<a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">https://github.com/airbnb/javascript</a>)<br>3.配置文件选JSON<br>4.是否支持React 选择 Y</p><ul><li><p>其他的没事就选Y吧<br><code>Successfully created .eslintrc.json file i XXX/XXXX</code> 说明创建成功了<br>结束后就会在根目录生成.eslintrc文件</p></li><li><h3 id="配置-eslintrc文件"><a href="#配置-eslintrc文件" class="headerlink" title="配置.eslintrc文件"></a>配置.eslintrc文件</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: &quot;airbnb&quot;,</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;react&quot;,</span><br><span class="line">    &quot;react-native&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;globals&quot;: &#123;</span><br><span class="line">    &quot;__DEV__&quot;: true,</span><br><span class="line">    &quot;fetch&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;parser&quot;: &quot;babel-eslint&quot;,</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;max-len&quot;: [&quot;error&quot;, 120],</span><br><span class="line">    &quot;no-console&quot;: 0,</span><br><span class="line">    &quot;react/forbid-prop-types&quot;: [0, &#123; &quot;forbid&quot;: [&quot;any&quot;, &quot;array&quot;, &quot;object&quot;] &#125;],</span><br><span class="line">    &quot;react/jsx-filename-extension&quot;: [1, &#123; &quot;extensions&quot;: [&quot;.js&quot;, &quot;.jsx&quot;] &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在根目录的-package-json文件下修改如下"><a href="#在根目录的-package-json文件下修改如下" class="headerlink" title="在根目录的 package.json文件下修改如下:"></a>在根目录的 package.json文件下修改如下:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;,</span><br><span class="line">  &quot;lint&quot;: &quot;eslint --ext .js ./src --fix&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Could not find a package.json file. Run &apos;npm init&apos; to create one.</span><br><span class="line">Error: Could not find a package.json file. Run &apos;npm init&apos; to create one.</span><br><span class="line">    at check (/Users/30san/.nvm/versions/node/v10.7.0/lib/node_modules/eslint/lib/util/npm-util.js:106:15)</span><br><span class="line">    at Object.checkDevDeps (/Users/30san/.nvm/versions/node/v10.7.0/lib/node_modules/eslint/lib/util/npm-util.js:160:12)</span><br><span class="line">    at getModulesList (/Users/30san/.nvm/versions/node/v10.7.0/lib/node_modules/eslint/lib/config/config-initializer.js:112:39)</span><br><span class="line">    at inquirer.prompt.then.answers (/Users/30san/.nvm/versions/node/v10.7.0/lib/node_modules/eslint/lib/config/config-initializer.js:624:33)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:68:7)</span><br></pre></td></tr></table></figure><ul><li>出现这个错，没有cd到项目根目录下</li></ul><h3 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h3>]]></content>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vim常用</title>
      <link href="/2018/08/01/Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/08/01/Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul><li><code>vim</code> 直接启动vim</li><li><code>vim filename</code>打开vim并创建名为filename的文件</li></ul><h3 id="vim的模式"><a href="#vim的模式" class="headerlink" title="vim的模式"></a>vim的模式</h3><ul><li>正常模式 <code>ESC</code>或者<code>Ctrl + [</code> 左下角文件名为空</li><li>插入模式 <code>i</code> 左下角显示 – INSERT–</li></ul><a id="more"></a><h3 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a>退出命令</h3><p>:wq 保存并退出<br>ZZ 保存并退出<br>:q! 强制退出并忽略所有更改<br>:e! 放弃所有修改，并打开原来文件。</p><h3 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h3><ul><li><code>U</code> 在撤销（需要在正常模式）</li><li><code>ctrl + r</code> 重做（逆返回撤销）</li><li><code>yy</code>拷贝当前行</li><li><code>shift+p</code>在当前行前粘贴</li><li>正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切</li></ul><ul><li><code>vim file1 file2 file3 ...</code> 同时打开多个文件</li><li><code>:open file</code>在vim窗口打开一个新文件</li><li><code>:split file</code> 在新窗口中打开文件</li><li><code>:bn</code>切换到下一个文件</li><li><code>:bp</code>切换到上一个文件</li><li><code>:args</code> 查看当前打开的文件列表，当前正在编辑的文件会用[]括起来</li><li><code>:e ftp://192.168.10.76/abc.txt</code> 打开远程ftp的文件</li><li><code>:e \\qadrive\test\1.txt</code> 打开共享服务器的文件</li><li><code>^</code>移动光标到行首</li><li><code>$</code>移动光标到行尾</li></ul>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssh连接服务器常用操作</title>
      <link href="/2018/08/01/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/08/01/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>SSH是一种网络协议，用于计算机之间的加密登录</p><h3 id="登录服务器"><a href="#登录服务器" class="headerlink" title="登录服务器"></a>登录服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip地址</span><br></pre></td></tr></table></figure><p>回车 输入密码</p><a id="more"></a><h3 id="从服务器上传下载"><a href="#从服务器上传下载" class="headerlink" title="从服务器上传下载"></a>从服务器上传下载</h3><ul><li>从服务器下载文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp username@servername:/path/filename  /Users/mac/Desktop</span><br></pre></td></tr></table></figure><p> <code>scp root@172.16.1.93:/root/test.txt /Users/mac/Desktop</code><br> 就是将服务器上的/root/test.txt下载到本地的/Users/mac/Desktop目录下。两个地址之间有空格！</p><ul><li>上传文件到服务器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /Users/mac/Desktop/test.txt root@123.207.170.40:/root/</span><br></pre></td></tr></table></figure><p> <code>/Users/mac/Desktop/test.txt</code> 本地文件地址，<a href="mailto:`root@123.207.170.40" target="_blank" rel="noopener">`root@123.207.170.40</a>:/root/`服务器地址</p><ul><li>从服务器下载整个目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r root@192.168.0.101:/root/ /Users/mac/Desktop/</span><br></pre></td></tr></table></figure><p>  <code>scp -r root@192.168.0.101:/root/</code> 远程目录， <code>/Users/mac/Desktop/</code>本地目录</p><ul><li><p>上传目录到服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r test root@192.168.0.101:/root/</span><br></pre></td></tr></table></figure></li></ul><h3 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h3><ul><li>压缩某个文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -c dragonmail.plist &gt; dragonmail.plist.gz</span><br></pre></td></tr></table></figure><h2 id="cd到上级目录"><a href="#cd到上级目录" class="headerlink" title="cd到上级目录"></a>cd到上级目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ../</span><br></pre></td></tr></table></figure><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv  原名.doc  修改名.doc</span><br></pre></td></tr></table></figure><h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp 原名.doc  copy后的名.doc</span><br></pre></td></tr></table></figure><h2 id="查看目录"><a href="#查看目录" class="headerlink" title="查看目录"></a>查看目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls </span><br><span class="line">ll</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac使用tree生成目录结构</title>
      <link href="/2018/07/26/tree%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2018/07/26/tree%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="根据需求要生出目录结构"><a href="#根据需求要生出目录结构" class="headerlink" title="根据需求要生出目录结构"></a>根据需求要生出目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── build</span><br><span class="line">├── config</span><br><span class="line">├── docs</span><br><span class="line">│   └── static</span><br><span class="line">│       ├── css</span><br><span class="line">│       └── js</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets</span><br><span class="line">│   ├── components</span><br><span class="line">│   ├── store</span><br><span class="line">│   │   └── modules</span><br><span class="line">│   └── views</span><br><span class="line">│       ├── book</span><br><span class="line">│       └── movie</span><br><span class="line">└── static</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="bash-profile在这个文件添加"><a href="#bash-profile在这个文件添加" class="headerlink" title=".bash_profile在这个文件添加"></a>.bash_profile在这个文件添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br></pre></td></tr></table></figure><h3 id="让-bash-profile-生效"><a href="#让-bash-profile-生效" class="headerlink" title="让.bash_profile 生效"></a>让.bash_profile 生效</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><h3 id="安装tree"><a href="#安装tree" class="headerlink" title="安装tree"></a>安装tree</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tree</span><br></pre></td></tr></table></figure><h3 id="查看tree-帮助信息"><a href="#查看tree-帮助信息" class="headerlink" title="查看tree 帮助信息"></a>查看tree 帮助信息</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree --help</span><br></pre></td></tr></table></figure><h3 id="输出目录树"><a href="#输出目录树" class="headerlink" title="输出目录树"></a>输出目录树</h3><ul><li>cd 目标文件夹路径</li><li>然后 tree 一下，会将该层级下所有文件都遍历了输出，不管层级多深</li><li><p>生成的目录树.md文件一般在当前目录下</p><h3 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h3></li><li><p>指定遍历层级（首先得cd到遍历的目录中）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -l 2</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>把一个目录的结构树导出到文件 Readme.md</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ree -l 2 &gt;README.md</span><br></pre></td></tr></table></figure></li><li><p>只显示文件夹</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -d</span><br></pre></td></tr></table></figure><ul><li>显示项目的层级，n表示层级数。例：显示项目三层结构，tree -l 3；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -l n</span><br></pre></td></tr></table></figure><ul><li><code>tree -I pattern</code> 用于过滤不想要显示的文件或者文件夹。比如要过滤项目中的node_modules文件夹</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -I “node_modules”</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
